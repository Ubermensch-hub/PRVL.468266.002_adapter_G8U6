
PRVL.468266.002_adapter_G8U6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006cbc  08006cbc  00007cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006d60  08006d60  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d60  08006d60  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d60  08006d60  00007d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d64  08006d64  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006d68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08006d78  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08006d78  00008240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7b1  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002383  00000000  00000000  000167e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00018b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf1  00000000  00000000  00019ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e40  00000000  00000000  0001a6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f4f  00000000  00000000  000324e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b055  00000000  00000000  00044430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000df4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ca4 	.word	0x08006ca4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08006ca4 	.word	0x08006ca4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <OpenKey>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
void OpenKey()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_RESET);
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <OpenKey+0x24>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	@ 0x40
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 ff7f 	bl	80022fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <OpenKey+0x24>)
 8000402:	2200      	movs	r2, #0
 8000404:	2108      	movs	r1, #8
 8000406:	0018      	movs	r0, r3
 8000408:	f001 ff79 	bl	80022fe <HAL_GPIO_WritePin>

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	50000400 	.word	0x50000400

08000418 <CloseKey>:

void CloseKey()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_SET);
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <CloseKey+0x24>)
 800041e:	2201      	movs	r2, #1
 8000420:	2140      	movs	r1, #64	@ 0x40
 8000422:	0018      	movs	r0, r3
 8000424:	f001 ff6b 	bl	80022fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_SET);
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <CloseKey+0x24>)
 800042a:	2201      	movs	r2, #1
 800042c:	2108      	movs	r1, #8
 800042e:	0018      	movs	r0, r3
 8000430:	f001 ff65 	bl	80022fe <HAL_GPIO_WritePin>

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	50000400 	.word	0x50000400

08000440 <ResetFan>:
uint16_t minRPM = 0;
uint8_t statusFAN1 = 0;
uint8_t statusFAN2 = 0;

void ResetFan()
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b087      	sub	sp, #28
 8000444:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c1, (0x51 << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	2301      	movs	r3, #1
 800044a:	425b      	negs	r3, r3
 800044c:	4832      	ldr	r0, [pc, #200]	@ (8000518 <ResetFan+0xd8>)
 800044e:	220a      	movs	r2, #10
 8000450:	21a2      	movs	r1, #162	@ 0xa2
 8000452:	f002 fb99 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d1f6      	bne.n	8000448 <ResetFan+0x8>
	{}
	uint8_t pData[1] = {0x40};
 800045a:	210c      	movs	r1, #12
 800045c:	187b      	adds	r3, r7, r1
 800045e:	4a2f      	ldr	r2, [pc, #188]	@ (800051c <ResetFan+0xdc>)
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	701a      	strb	r2, [r3, #0]
	uint8_t pData_2[1] = {0x02};
 8000464:	2408      	movs	r4, #8
 8000466:	193b      	adds	r3, r7, r4
 8000468:	4a2d      	ldr	r2, [pc, #180]	@ (8000520 <ResetFan+0xe0>)
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	701a      	strb	r2, [r3, #0]
	uint8_t pData_3[1] = {0xFF};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4a2c      	ldr	r2, [pc, #176]	@ (8000524 <ResetFan+0xe4>)
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(&hi2c1, (0x51 << 1), MAX31760_CR1_REG, 1, pData, 1);
 8000476:	4828      	ldr	r0, [pc, #160]	@ (8000518 <ResetFan+0xd8>)
 8000478:	2301      	movs	r3, #1
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	187b      	adds	r3, r7, r1
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2301      	movs	r3, #1
 8000482:	2200      	movs	r2, #0
 8000484:	21a2      	movs	r1, #162	@ 0xa2
 8000486:	f002 f97d 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(200);
 800048a:	20c8      	movs	r0, #200	@ 0xc8
 800048c:	f001 f9d6 	bl	800183c <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(&hi2c1, (0x51 << 1), 0x02, 1, pData_2, 1);
 8000490:	4821      	ldr	r0, [pc, #132]	@ (8000518 <ResetFan+0xd8>)
 8000492:	2301      	movs	r3, #1
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	193b      	adds	r3, r7, r4
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2301      	movs	r3, #1
 800049c:	2202      	movs	r2, #2
 800049e:	21a2      	movs	r1, #162	@ 0xa2
 80004a0:	f002 f970 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(50);
 80004a4:	2032      	movs	r0, #50	@ 0x32
 80004a6:	f001 f9c9 	bl	800183c <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(&hi2c1, (0x51 << 1), 0x04, 1, pData_3, 1);
 80004aa:	481b      	ldr	r0, [pc, #108]	@ (8000518 <ResetFan+0xd8>)
 80004ac:	2301      	movs	r3, #1
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2301      	movs	r3, #1
 80004b6:	2204      	movs	r2, #4
 80004b8:	21a2      	movs	r1, #162	@ 0xa2
 80004ba:	f002 f963 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(50);
 80004be:	2032      	movs	r0, #50	@ 0x32
 80004c0:	f001 f9bc 	bl	800183c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c1, (0x54 << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	2301      	movs	r3, #1
 80004c8:	425b      	negs	r3, r3
 80004ca:	4813      	ldr	r0, [pc, #76]	@ (8000518 <ResetFan+0xd8>)
 80004cc:	220a      	movs	r2, #10
 80004ce:	21a8      	movs	r1, #168	@ 0xa8
 80004d0:	f002 fb5a 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d1f6      	bne.n	80004c6 <ResetFan+0x86>
	{}
	HAL_I2C_Mem_Write_DMA(&hi2c1, (0x54<<1), MAX31760_CR1_REG, 1, pData, 1);
 80004d8:	480f      	ldr	r0, [pc, #60]	@ (8000518 <ResetFan+0xd8>)
 80004da:	2301      	movs	r3, #1
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	230c      	movs	r3, #12
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	2200      	movs	r2, #0
 80004e8:	21a8      	movs	r1, #168	@ 0xa8
 80004ea:	f002 f94b 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(200);
 80004ee:	20c8      	movs	r0, #200	@ 0xc8
 80004f0:	f001 f9a4 	bl	800183c <HAL_Delay>
	HAL_I2C_Mem_Write_DMA(&hi2c1, (0x54 << 1), 0x04, 1, pData_3, 1);
 80004f4:	4808      	ldr	r0, [pc, #32]	@ (8000518 <ResetFan+0xd8>)
 80004f6:	2301      	movs	r3, #1
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2301      	movs	r3, #1
 8000500:	2204      	movs	r2, #4
 8000502:	21a8      	movs	r1, #168	@ 0xa8
 8000504:	f002 f93e 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
	HAL_Delay(50);
 8000508:	2032      	movs	r0, #50	@ 0x32
 800050a:	f001 f997 	bl	800183c <HAL_Delay>

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b005      	add	sp, #20
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	20000030 	.word	0x20000030
 800051c:	08006cbc 	.word	0x08006cbc
 8000520:	08006cc0 	.word	0x08006cc0
 8000524:	08006cc4 	.word	0x08006cc4

08000528 <ReadTachRegister>:
uint16_t ReadTachRegister(uint8_t address, uint8_t regMSB, uint8_t regLSB)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	0004      	movs	r4, r0
 8000530:	0008      	movs	r0, r1
 8000532:	0011      	movs	r1, r2
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	1c22      	adds	r2, r4, #0
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	1dbb      	adds	r3, r7, #6
 800053c:	1c02      	adds	r2, r0, #0
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	1d7b      	adds	r3, r7, #5
 8000542:	1c0a      	adds	r2, r1, #0
 8000544:	701a      	strb	r2, [r3, #0]
	uint8_t msb, lsb;  // @suppress("Multiple variable declaration")

	HAL_I2C_Mem_Read_DMA(&hi2c1, address << 1, regMSB, I2C_MEMADD_SIZE_8BIT, &msb, 1);
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	18db      	adds	r3, r3, r3
 800054e:	b299      	uxth	r1, r3
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b29a      	uxth	r2, r3
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <ReadTachRegister+0x80>)
 8000558:	2301      	movs	r3, #1
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	240f      	movs	r4, #15
 800055e:	193b      	adds	r3, r7, r4
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2301      	movs	r3, #1
 8000564:	f002 fa10 	bl	8002988 <HAL_I2C_Mem_Read_DMA>
	HAL_I2C_Mem_Read_DMA(&hi2c1, address << 1, regLSB, I2C_MEMADD_SIZE_8BIT, &lsb, 1);
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b29b      	uxth	r3, r3
 800056e:	18db      	adds	r3, r3, r3
 8000570:	b299      	uxth	r1, r3
 8000572:	1d7b      	adds	r3, r7, #5
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b29a      	uxth	r2, r3
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <ReadTachRegister+0x80>)
 800057a:	2301      	movs	r3, #1
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	250e      	movs	r5, #14
 8000580:	197b      	adds	r3, r7, r5
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	f002 f9ff 	bl	8002988 <HAL_I2C_Mem_Read_DMA>
	return (msb << 8) | lsb; // Объединяем MSB и LSB в 16-битное значение
 800058a:	193b      	adds	r3, r7, r4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	197b      	adds	r3, r7, r5
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	b29b      	uxth	r3, r3
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	20000030 	.word	0x20000030

080005ac <Read_Fan_Tachometer>:


void Read_Fan_Tachometer()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	tachValue2 = ReadTachRegister(0x51, MAX31760_TACH1_MSB, MAX31760_TACH1_LSB); // Первый контроллер, второй тахометр
 80005b0:	2253      	movs	r2, #83	@ 0x53
 80005b2:	2152      	movs	r1, #82	@ 0x52
 80005b4:	2051      	movs	r0, #81	@ 0x51
 80005b6:	f7ff ffb7 	bl	8000528 <ReadTachRegister>
 80005ba:	0003      	movs	r3, r0
 80005bc:	001a      	movs	r2, r3
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <Read_Fan_Tachometer+0x40>)
 80005c0:	801a      	strh	r2, [r3, #0]
	tachValue3 = ReadTachRegister(0x54, MAX31760_TACH1_MSB, MAX31760_TACH1_LSB); // Второй контроллер, первый тахометр
 80005c2:	2253      	movs	r2, #83	@ 0x53
 80005c4:	2152      	movs	r1, #82	@ 0x52
 80005c6:	2054      	movs	r0, #84	@ 0x54
 80005c8:	f7ff ffae 	bl	8000528 <ReadTachRegister>
 80005cc:	0003      	movs	r3, r0
 80005ce:	001a      	movs	r2, r3
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <Read_Fan_Tachometer+0x44>)
 80005d2:	801a      	strh	r2, [r3, #0]
	tachValue4 = ReadTachRegister(0x54, MAX31760_TACH2_MSB, MAX31760_TACH2_LSB); // Второй контроллер, второй тахометр
 80005d4:	2255      	movs	r2, #85	@ 0x55
 80005d6:	2154      	movs	r1, #84	@ 0x54
 80005d8:	2054      	movs	r0, #84	@ 0x54
 80005da:	f7ff ffa5 	bl	8000528 <ReadTachRegister>
 80005de:	0003      	movs	r3, r0
 80005e0:	001a      	movs	r2, r3
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <Read_Fan_Tachometer+0x48>)
 80005e4:	801a      	strh	r2, [r3, #0]
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000228 	.word	0x20000228
 80005f0:	2000022a 	.word	0x2000022a
 80005f4:	2000022c 	.word	0x2000022c

080005f8 <CalculateRPM>:
{
	HAL_I2C_Mem_Read_DMA(&hi2c1,( 0x51 << 1), 0x5A, I2C_MEMADD_SIZE_8BIT, &statusFAN1, 1);
	HAL_I2C_Mem_Read_DMA(&hi2c1, (0x54 << 1), 0x5A, I2C_MEMADD_SIZE_8BIT, &statusFAN2, 1);
}
uint16_t CalculateRPM(uint16_t tachValue)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	0002      	movs	r2, r0
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	801a      	strh	r2, [r3, #0]
	if (tachValue == 0) return 0; // �?збегаем деления на ноль
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d101      	bne.n	8000610 <CalculateRPM+0x18>
 800060c:	2300      	movs	r3, #0
 800060e:	e008      	b.n	8000622 <CalculateRPM+0x2a>
	return (60 * 100000) / (tachValue*TACH_PULSES_PER_REV);
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	0019      	movs	r1, r3
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <CalculateRPM+0x34>)
 800061a:	f7ff fdfd 	bl	8000218 <__divsi3>
 800061e:	0003      	movs	r3, r0
 8000620:	b29b      	uxth	r3, r3
}
 8000622:	0018      	movs	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	005b8d80 	.word	0x005b8d80

08000630 <GetMinRPM>:



uint16_t GetMinRPM(uint16_t rpm2, uint16_t rpm3, uint16_t rpm4)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	0004      	movs	r4, r0
 8000638:	0008      	movs	r0, r1
 800063a:	0011      	movs	r1, r2
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	1c22      	adds	r2, r4, #0
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	1c02      	adds	r2, r0, #0
 8000646:	801a      	strh	r2, [r3, #0]
 8000648:	1cbb      	adds	r3, r7, #2
 800064a:	1c0a      	adds	r2, r1, #0
 800064c:	801a      	strh	r2, [r3, #0]
	uint16_t minRPM = rpm3; // Предполагаем, что первое значение минимальное
 800064e:	210e      	movs	r1, #14
 8000650:	187b      	adds	r3, r7, r1
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	8812      	ldrh	r2, [r2, #0]
 8000656:	801a      	strh	r2, [r3, #0]

	if (rpm3 < minRPM) {
 8000658:	1d3a      	adds	r2, r7, #4
 800065a:	187b      	adds	r3, r7, r1
 800065c:	8812      	ldrh	r2, [r2, #0]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d203      	bcs.n	800066c <GetMinRPM+0x3c>
		minRPM = rpm3; // Обновляем минимум, если второе значение меньше
 8000664:	187b      	adds	r3, r7, r1
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	8812      	ldrh	r2, [r2, #0]
 800066a:	801a      	strh	r2, [r3, #0]
	}
	if (rpm4 < minRPM) {
 800066c:	1cba      	adds	r2, r7, #2
 800066e:	210e      	movs	r1, #14
 8000670:	187b      	adds	r3, r7, r1
 8000672:	8812      	ldrh	r2, [r2, #0]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d203      	bcs.n	8000682 <GetMinRPM+0x52>
		minRPM = rpm4; // Обновляем минимум, если третье значение меньше
 800067a:	187b      	adds	r3, r7, r1
 800067c:	1cba      	adds	r2, r7, #2
 800067e:	8812      	ldrh	r2, [r2, #0]
 8000680:	801a      	strh	r2, [r3, #0]
	}

	return minRPM; // Возвращаем минимальное значение
 8000682:	230e      	movs	r3, #14
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	881b      	ldrh	r3, [r3, #0]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b005      	add	sp, #20
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <Calculate_RPM>:

void Calculate_RPM()
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0

	uint16_t rpm2 = CalculateRPM(tachValue2);
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <Calculate_RPM+0x58>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	1dbc      	adds	r4, r7, #6
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ffab 	bl	80005f8 <CalculateRPM>
 80006a2:	0003      	movs	r3, r0
 80006a4:	8023      	strh	r3, [r4, #0]
	uint16_t rpm3 = CalculateRPM(tachValue3);
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <Calculate_RPM+0x5c>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	1d3c      	adds	r4, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff ffa3 	bl	80005f8 <CalculateRPM>
 80006b2:	0003      	movs	r3, r0
 80006b4:	8023      	strh	r3, [r4, #0]
	uint16_t rpm4 = CalculateRPM(tachValue4);
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <Calculate_RPM+0x60>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	1cbc      	adds	r4, r7, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff9b 	bl	80005f8 <CalculateRPM>
 80006c2:	0003      	movs	r3, r0
 80006c4:	8023      	strh	r3, [r4, #0]

	// Здесь можно сохранить значения RPM в глобальные переменные или передать их дальше
	minRPM = GetMinRPM(rpm2, rpm3, rpm4);
 80006c6:	1cbb      	adds	r3, r7, #2
 80006c8:	881a      	ldrh	r2, [r3, #0]
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	8819      	ldrh	r1, [r3, #0]
 80006ce:	1dbb      	adds	r3, r7, #6
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ffac 	bl	8000630 <GetMinRPM>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <Calculate_RPM+0x64>)
 80006de:	801a      	strh	r2, [r3, #0]
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b003      	add	sp, #12
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	20000228 	.word	0x20000228
 80006ec:	2000022a 	.word	0x2000022a
 80006f0:	2000022c 	.word	0x2000022c
 80006f4:	20000236 	.word	0x20000236

080006f8 <FanContrlSetDuty>:

void FanContrlSetDuty(I2C_HandleTypeDef *hi2c, uint16_t slaveAddress, uint8_t duty)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	0008      	movs	r0, r1
 8000702:	0011      	movs	r1, r2
 8000704:	1cbb      	adds	r3, r7, #2
 8000706:	1c02      	adds	r2, r0, #0
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	1c7b      	adds	r3, r7, #1
 800070c:	1c0a      	adds	r2, r1, #0
 800070e:	701a      	strb	r2, [r3, #0]
	uint8_t comm;
	uint8_t aTxBuffer[1] = {0};
 8000710:	230c      	movs	r3, #12
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	4a25      	ldr	r2, [pc, #148]	@ (80007ac <FanContrlSetDuty+0xb4>)
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	701a      	strb	r2, [r3, #0]
	while (HAL_I2C_IsDeviceReady(hi2c, slaveAddress, 10, HAL_MAX_DELAY) != HAL_OK)
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	2301      	movs	r3, #1
 800071e:	425a      	negs	r2, r3
 8000720:	1cbb      	adds	r3, r7, #2
 8000722:	8819      	ldrh	r1, [r3, #0]
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	0013      	movs	r3, r2
 8000728:	220a      	movs	r2, #10
 800072a:	f002 fa2d 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d1f4      	bne.n	800071c <FanContrlSetDuty+0x24>
	{
	}

	comm = MAX31760_PWM_DUTY_REG;
 8000732:	210f      	movs	r1, #15
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2250      	movs	r2, #80	@ 0x50
 8000738:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = duty;
 800073a:	240c      	movs	r4, #12
 800073c:	193b      	adds	r3, r7, r4
 800073e:	1c7a      	adds	r2, r7, #1
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(hi2c, slaveAddress, comm, 1, aTxBuffer, 1);
 8000744:	187b      	adds	r3, r7, r1
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b29a      	uxth	r2, r3
 800074a:	1cbb      	adds	r3, r7, #2
 800074c:	8819      	ldrh	r1, [r3, #0]
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	193b      	adds	r3, r7, r4
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f002 f813 	bl	8002784 <HAL_I2C_Mem_Write_DMA>

	while (HAL_I2C_IsDeviceReady(hi2c, slaveAddress, 10, HAL_MAX_DELAY) != HAL_OK)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	2301      	movs	r3, #1
 8000762:	425a      	negs	r2, r3
 8000764:	1cbb      	adds	r3, r7, #2
 8000766:	8819      	ldrh	r1, [r3, #0]
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	0013      	movs	r3, r2
 800076c:	220a      	movs	r2, #10
 800076e:	f002 fa0b 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d1f4      	bne.n	8000760 <FanContrlSetDuty+0x68>
	{
	}

	comm = _FAN2_FAIL_DUTY_REGISTER;
 8000776:	210f      	movs	r1, #15
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2203      	movs	r2, #3
 800077c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = duty;
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	1c7a      	adds	r2, r7, #1
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(hi2c, slaveAddress, comm, 1, aTxBuffer, 1);
 8000788:	187b      	adds	r3, r7, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b29a      	uxth	r2, r3
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	2301      	movs	r3, #1
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	193b      	adds	r3, r7, r4
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	f001 fff1 	bl	8002784 <HAL_I2C_Mem_Write_DMA>
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b005      	add	sp, #20
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	08006cc8 	.word	0x08006cc8

080007b0 <SetPWMFrequency>:

void SetPWMFrequency(uint8_t address, uint8_t frequencySetting) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	0002      	movs	r2, r0
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	1c0a      	adds	r2, r1, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	uint8_t data[2] = {MAX31760_CR1_REG, frequencySetting};
 80007c2:	210c      	movs	r1, #12
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	1dba      	adds	r2, r7, #6
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	705a      	strb	r2, [r3, #1]

	uint8_t data_2[2] = {MAX31760_CR2_REG, 0x11};
 80007d2:	2308      	movs	r3, #8
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <SetPWMFrequency+0x98>)
 80007d8:	801a      	strh	r2, [r3, #0]
	while (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	18db      	adds	r3, r3, r3
 80007e4:	b299      	uxth	r1, r3
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	4818      	ldr	r0, [pc, #96]	@ (800084c <SetPWMFrequency+0x9c>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	f002 f9cb 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d1f2      	bne.n	80007dc <SetPWMFrequency+0x2c>
	{
	}
	HAL_I2C_Master_Transmit_DMA(&hi2c1, (address << 1), data, 2);
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	18db      	adds	r3, r3, r3
 80007fe:	b299      	uxth	r1, r3
 8000800:	230c      	movs	r3, #12
 8000802:	18fa      	adds	r2, r7, r3
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <SetPWMFrequency+0x9c>)
 8000806:	2302      	movs	r3, #2
 8000808:	f001 fe92 	bl	8002530 <HAL_I2C_Master_Transmit_DMA>
	while (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	18db      	adds	r3, r3, r3
 8000816:	b299      	uxth	r1, r3
 8000818:	2301      	movs	r3, #1
 800081a:	425b      	negs	r3, r3
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <SetPWMFrequency+0x9c>)
 800081e:	220a      	movs	r2, #10
 8000820:	f002 f9b2 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d1f2      	bne.n	800080e <SetPWMFrequency+0x5e>
	{
	}

	HAL_I2C_Master_Transmit_DMA(&hi2c1, (address << 1), data_2, 2);
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	18db      	adds	r3, r3, r3
 8000830:	b299      	uxth	r1, r3
 8000832:	2308      	movs	r3, #8
 8000834:	18fa      	adds	r2, r7, r3
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <SetPWMFrequency+0x9c>)
 8000838:	2302      	movs	r3, #2
 800083a:	f001 fe79 	bl	8002530 <HAL_I2C_Master_Transmit_DMA>
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b004      	add	sp, #16
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	00001101 	.word	0x00001101
 800084c:	20000030 	.word	0x20000030

08000850 <InitMAX31760>:
	}
	uint8_t data[2] = {reg, value};
	HAL_I2C_Master_Transmit_DMA(&hi2c1, (address << 1), data, 2);
}

void InitMAX31760(uint8_t address) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
	// Установка частоты Ш�?М 24 кГц
	// Значение для регистра 0x32 зависит от формулы в документации
	// Например, если для 24 кГц нужно значение 0x4B:
	while (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	18db      	adds	r3, r3, r3
 8000866:	b299      	uxth	r1, r3
 8000868:	2301      	movs	r3, #1
 800086a:	425b      	negs	r3, r3
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <InitMAX31760+0x50>)
 800086e:	220a      	movs	r2, #10
 8000870:	f002 f98a 	bl	8002b88 <HAL_I2C_IsDeviceReady>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d1f2      	bne.n	800085e <InitMAX31760+0xe>
	{
	}
	SetPWMFrequency(address, 0x19);
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2119      	movs	r1, #25
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff ff96 	bl	80007b0 <SetPWMFrequency>
	// Установка коэффициента заполнения Ш�?М 50%
	FanContrlSetDuty(&hi2c1, (address << 1), 0xFF);
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	18db      	adds	r3, r3, r3
 800088c:	b299      	uxth	r1, r3
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <InitMAX31760+0x50>)
 8000890:	22ff      	movs	r2, #255	@ 0xff
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff ff30 	bl	80006f8 <FanContrlSetDuty>

}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000030 	.word	0x20000030

080008a4 <SetButton>:

void SetButton(GPIO_PinState state)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PWR_SW_GPIO_Port, PWR_SW_Pin, state);
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	23a0      	movs	r3, #160	@ 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2110      	movs	r1, #16
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fd1f 	bl	80022fe <HAL_GPIO_WritePin>
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <PressButton>:

void PressButton(uint16_t time)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	801a      	strh	r2, [r3, #0]
	SetButton(GPIO_PIN_RESET);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ffe5 	bl	80008a4 <SetButton>
	HAL_Delay(time);
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 ffac 	bl	800183c <HAL_Delay>
	SetButton(GPIO_PIN_SET);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff ffdd 	bl	80008a4 <SetButton>
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <SetPWROK>:

void SetPWROK(PWROKState state)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, (state == HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	425a      	negs	r2, r3
 8000908:	4153      	adcs	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	001a      	movs	r2, r3
 800090e:	23a0      	movs	r3, #160	@ 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2108      	movs	r1, #8
 8000914:	0018      	movs	r0, r3
 8000916:	f001 fcf2 	bl	80022fe <HAL_GPIO_WritePin>
	PWR_OK_State = state;
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <SetPWROK+0x38>)
 800091c:	1dfa      	adds	r2, r7, #7
 800091e:	7812      	ldrb	r2, [r2, #0]
 8000920:	701a      	strb	r2, [r3, #0]
}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	20000231 	.word	0x20000231

08000930 <SetTempMode>:
void SetTempMode()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	MCU_attach = HAL_GPIO_ReadPin(MCU_ATTACH_IN_GPIO_Port, MCU_ATTACH_IN_Pin);
 8000934:	23a0      	movs	r3, #160	@ 0xa0
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fcc2 	bl	80022c4 <HAL_GPIO_ReadPin>
 8000940:	0003      	movs	r3, r0
 8000942:	001a      	movs	r2, r3
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <SetTempMode+0x50>)
 8000946:	701a      	strb	r2, [r3, #0]
	if(MCU_attach == 1) {
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <SetTempMode+0x50>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d103      	bne.n	8000958 <SetTempMode+0x28>
		TempMode = 0;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <SetTempMode+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	} else if (MCU_attach == 0 && temperature > 50 )
	{
		TempMode = 0;
	}else TempMode = 1;
}
 8000956:	e00f      	b.n	8000978 <SetTempMode+0x48>
	} else if (MCU_attach == 0 && temperature > 50 )
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <SetTempMode+0x50>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d108      	bne.n	8000972 <SetTempMode+0x42>
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <SetTempMode+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	2b32      	cmp	r3, #50	@ 0x32
 8000968:	dd03      	ble.n	8000972 <SetTempMode+0x42>
		TempMode = 0;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SetTempMode+0x54>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	e002      	b.n	8000978 <SetTempMode+0x48>
	}else TempMode = 1;
 8000972:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <SetTempMode+0x54>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	2000002d 	.word	0x2000002d
 8000984:	20000000 	.word	0x20000000
 8000988:	20000235 	.word	0x20000235

0800098c <Send_Fan_Tachometer_To_Motherboard>:

void Send_Fan_Tachometer_To_Motherboard() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	// Пример: генерация Ш�?М сигнала с частотой 1 кГц и duty cycle, соответствующим значению RPM
	uint32_t period1 = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]

	if (minRPM > 0) {
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <Send_Fan_Tachometer_To_Motherboard+0x50>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d009      	beq.n	80009b2 <Send_Fan_Tachometer_To_Motherboard+0x26>
		// Вычисляем период таймера для заданного RPM

		period1 = (1000000 / (minRPM * 2));
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <Send_Fan_Tachometer_To_Motherboard+0x50>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	0019      	movs	r1, r3
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <Send_Fan_Tachometer_To_Motherboard+0x54>)
 80009a8:	f7ff fc36 	bl	8000218 <__divsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e001      	b.n	80009b6 <Send_Fan_Tachometer_To_Motherboard+0x2a>
	} else {
		// Если RPM == 0, устанавливаем максимальный период (или другой порог)
		period1 = 1000 - 1; // Например, 1 мс (частота 1 кГц)
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <Send_Fan_Tachometer_To_Motherboard+0x58>)
 80009b4:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, period1 - 1); // Установка периода 1 мс (частота 1 кГц)
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	3a01      	subs	r2, #1
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	1e5a      	subs	r2, r3, #1
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 80009c6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period1 / 2); // Установка duty cycle пропорционально значению RPM
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	0852      	lsrs	r2, r2, #1
 80009d0:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	20000236 	.word	0x20000236
 80009e0:	000f4240 	.word	0x000f4240
 80009e4:	000003e7 	.word	0x000003e7
 80009e8:	20000190 	.word	0x20000190

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fe9e 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f890 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f000 fa94 	bl	8000f24 <MX_GPIO_Init>
  MX_DMA_Init();
 80009fc:	f000 fa6c 	bl	8000ed8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a00:	f000 f90e 	bl	8000c20 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a04:	f000 f94e 	bl	8000ca4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000a08:	f000 f98e 	bl	8000d28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a0c:	f000 fa0c 	bl	8000e28 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000a10:	f000 f8e0 	bl	8000bd4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(200);
 8000a14:	20c8      	movs	r0, #200	@ 0xc8
 8000a16:	f000 ff11 	bl	800183c <HAL_Delay>
	ResetFan();
 8000a1a:	f7ff fd11 	bl	8000440 <ResetFan>
	HAL_Delay(200);
 8000a1e:	20c8      	movs	r0, #200	@ 0xc8
 8000a20:	f000 ff0c 	bl	800183c <HAL_Delay>
	SetButton(GPIO_PIN_SET);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff ff3d 	bl	80008a4 <SetButton>
	SetPWROK(HIGH);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff62 	bl	80008f4 <SetPWROK>
	InitMAX31760(0x54); // �?нициализация первого контроллера
 8000a30:	2054      	movs	r0, #84	@ 0x54
 8000a32:	f7ff ff0d 	bl	8000850 <InitMAX31760>
	InitMAX31760(0x51); // �?нициализация второго контроллера
 8000a36:	2051      	movs	r0, #81	@ 0x51
 8000a38:	f7ff ff0a 	bl	8000850 <InitMAX31760>

	HAL_TIM_Base_Start_IT(&htim3);
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <main+0x10c>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f004 ffc8 	bl	80059d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //запуск Ш�?М
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <main+0x110>)
 8000a46:	2104      	movs	r1, #4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f005 f87f 	bl	8005b4c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_SET);
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <main+0x114>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fc52 	bl	80022fe <HAL_GPIO_WritePin>
	Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <main+0x114>)
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fc30 	bl	80022c4 <HAL_GPIO_ReadPin>
 8000a64:	0003      	movs	r3, r0
 8000a66:	001a      	movs	r2, r3
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <main+0x118>)
 8000a6a:	701a      	strb	r2, [r3, #0]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <main+0x114>)
 8000a6e:	2110      	movs	r1, #16
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fc27 	bl	80022c4 <HAL_GPIO_ReadPin>
 8000a76:	0003      	movs	r3, r0
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <main+0x118>)
 8000a7c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8000a7e:	4922      	ldr	r1, [pc, #136]	@ (8000b08 <main+0x11c>)
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <main+0x120>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fcfd 	bl	8002484 <HAL_I2C_Slave_Receive_IT>
		SetTempMode();
 8000a8a:	f7ff ff51 	bl	8000930 <SetTempMode>
		Read_Fan_Tachometer();
 8000a8e:	f7ff fd8d 	bl	80005ac <Read_Fan_Tachometer>
		Calculate_RPM();
 8000a92:	f7ff fdfd 	bl	8000690 <Calculate_RPM>
		Send_Fan_Tachometer_To_Motherboard();
 8000a96:	f7ff ff79 	bl	800098c <Send_Fan_Tachometer_To_Motherboard>

		// Управление вентиляторами
		if (TempMode == 0) {
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <main+0x124>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <main+0xd0>
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0xFF); // Установка Ш�?М на 50% для первого контроллера
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <main+0x128>)
 8000aa4:	22ff      	movs	r2, #255	@ 0xff
 8000aa6:	21a8      	movs	r1, #168	@ 0xa8
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fe25 	bl	80006f8 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0xFF); // Установка Ш�?М на 50% для второго контроллера
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <main+0x128>)
 8000ab0:	22ff      	movs	r2, #255	@ 0xff
 8000ab2:	21a2      	movs	r1, #162	@ 0xa2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fe1f 	bl	80006f8 <FanContrlSetDuty>
 8000aba:	e7d7      	b.n	8000a6c <main+0x80>
		} else if (TempMode == 1) {
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <main+0x124>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10c      	bne.n	8000ade <main+0xf2>
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0x80); // Установка Ш�?М на 50% для первого контроллера
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <main+0x128>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	21a8      	movs	r1, #168	@ 0xa8
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fe14 	bl	80006f8 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0x80); // Установка Ш�?М на 50% для второго контроллера
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <main+0x128>)
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	21a2      	movs	r1, #162	@ 0xa2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fe0e 	bl	80006f8 <FanContrlSetDuty>
 8000adc:	e7c6      	b.n	8000a6c <main+0x80>
		} else {
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0xFF); // Установка Ш�?М на 50% для первого контроллера
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <main+0x128>)
 8000ae0:	22ff      	movs	r2, #255	@ 0xff
 8000ae2:	21a8      	movs	r1, #168	@ 0xa8
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fe07 	bl	80006f8 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0xFF); // Установка Ш�?М на 50% для второго контроллера
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <main+0x128>)
 8000aec:	22ff      	movs	r2, #255	@ 0xff
 8000aee:	21a2      	movs	r1, #162	@ 0xa2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fe01 	bl	80006f8 <FanContrlSetDuty>
		Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8000af6:	e7b9      	b.n	8000a6c <main+0x80>
 8000af8:	200001dc 	.word	0x200001dc
 8000afc:	20000190 	.word	0x20000190
 8000b00:	50000400 	.word	0x50000400
 8000b04:	20000239 	.word	0x20000239
 8000b08:	20000238 	.word	0x20000238
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000030 	.word	0x20000030

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b093      	sub	sp, #76	@ 0x4c
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	2410      	movs	r4, #16
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	0018      	movs	r0, r3
 8000b24:	2338      	movs	r3, #56	@ 0x38
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f006 f88f 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2e:	003b      	movs	r3, r7
 8000b30:	0018      	movs	r0, r3
 8000b32:	2310      	movs	r3, #16
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f006 f888 	bl	8006c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f004 f853 	bl	8004bec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2202      	movs	r2, #2
 8000b4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b54:	0021      	movs	r1, r4
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2240      	movs	r2, #64	@ 0x40
 8000b60:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2202      	movs	r2, #2
 8000b66:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2208      	movs	r2, #8
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	0292      	lsls	r2, r2, #10
 8000b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	22e0      	movs	r2, #224	@ 0xe0
 8000b86:	0512      	lsls	r2, r2, #20
 8000b88:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	0592      	lsls	r2, r2, #22
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	0018      	movs	r0, r3
 8000b96:	f004 f869 	bl	8004c6c <HAL_RCC_OscConfig>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b9e:	f000 fb8b 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	003b      	movs	r3, r7
 8000baa:	2202      	movs	r2, #2
 8000bac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f004 fb6e 	bl	80052a0 <HAL_RCC_ClockConfig>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bc8:	f000 fb76 	bl	80012b8 <Error_Handler>
  }
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b013      	add	sp, #76	@ 0x4c
 8000bd2:	bd90      	pop	{r4, r7, pc}

08000bd4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2017      	movs	r0, #23
 8000bde:	f000 ff13 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000be2:	2017      	movs	r0, #23
 8000be4:	f000 ff25 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	2018      	movs	r0, #24
 8000bee:	f000 ff0b 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000bf2:	2018      	movs	r0, #24
 8000bf4:	f000 ff1d 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	200f      	movs	r0, #15
 8000bfe:	f000 ff03 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 ff15 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f000 fefb 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c12:	2010      	movs	r0, #16
 8000c14:	f000 ff0d 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <MX_I2C1_Init+0x7c>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E47DAF;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_I2C1_Init+0x80>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000c54:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	0292      	lsls	r2, r2, #10
 8000c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f001 fb6a 	bl	8002338 <HAL_I2C_Init>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c68:	f000 fb26 	bl	80012b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 ff23 	bl	8004abc <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c7a:	f000 fb1d 	bl	80012b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_I2C1_Init+0x78>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f003 ff66 	bl	8004b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 fb14 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	20000030 	.word	0x20000030
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	10e47daf 	.word	0x10e47daf

08000ca4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000caa:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <MX_I2C2_Init+0x7c>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12469;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_I2C2_Init+0x80>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 74;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cb6:	224a      	movs	r2, #74	@ 0x4a
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fb29 	bl	8002338 <HAL_I2C_Init>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 fae5 	bl	80012b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 fee0 	bl	8004abc <HAL_I2CEx_ConfigAnalogFilter>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8000d00:	f000 fada 	bl	80012b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <MX_I2C2_Init+0x78>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f003 ff23 	bl	8004b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 8000d12:	f000 fad1 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000084 	.word	0x20000084
 8000d20:	40005800 	.word	0x40005800
 8000d24:	00c12469 	.word	0x00c12469

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	@ 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	2328      	movs	r3, #40	@ 0x28
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	2310      	movs	r3, #16
 8000d36:	001a      	movs	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f005 ff87 	bl	8006c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	231c      	movs	r3, #28
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	0018      	movs	r0, r3
 8000d44:	230c      	movs	r3, #12
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f005 ff7f 	bl	8006c4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4e:	003b      	movs	r3, r7
 8000d50:	0018      	movs	r0, r3
 8000d52:	231c      	movs	r3, #28
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f005 ff78 	bl	8006c4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5c:	4b30      	ldr	r3, [pc, #192]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	05d2      	lsls	r2, r2, #23
 8000d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d66:	223f      	movs	r2, #63	@ 0x3f
 8000d68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d72:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <MX_TIM2_Init+0xfc>)
 8000d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 fdcd 	bl	8005924 <HAL_TIM_Base_Init>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 fa93 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	2128      	movs	r1, #40	@ 0x28
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	0152      	lsls	r2, r2, #5
 8000d9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9c:	187a      	adds	r2, r7, r1
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f005 f9c4 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000dac:	f000 fa84 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f004 fe6a 	bl	8005a8c <HAL_TIM_PWM_Init>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000dbc:	f000 fa7c 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	211c      	movs	r1, #28
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dce:	187a      	adds	r2, r7, r1
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f005 feb3 	bl	8006b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000dde:	f000 fa6b 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2260      	movs	r2, #96	@ 0x60
 8000de6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000de8:	003b      	movs	r3, r7
 8000dea:	22fa      	movs	r2, #250	@ 0xfa
 8000dec:	0052      	lsls	r2, r2, #1
 8000dee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfc:	0039      	movs	r1, r7
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	0018      	movs	r0, r3
 8000e04:	f005 f894 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000e0c:	f000 fa54 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <MX_TIM2_Init+0xf8>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fba6 	bl	8001564 <HAL_TIM_MspPostInit>

}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b00e      	add	sp, #56	@ 0x38
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000190 	.word	0x20000190
 8000e24:	000003e7 	.word	0x000003e7

08000e28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2e:	2310      	movs	r3, #16
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	0018      	movs	r0, r3
 8000e34:	2310      	movs	r3, #16
 8000e36:	001a      	movs	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f005 ff07 	bl	8006c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	0018      	movs	r0, r3
 8000e42:	230c      	movs	r3, #12
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f005 ff00 	bl	8006c4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <MX_TIM3_Init+0xa4>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e54:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed0 <MX_TIM3_Init+0xa8>)
 8000e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <MX_TIM3_Init+0xac>)
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f004 fd56 	bl	8005924 <HAL_TIM_Base_Init>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fa1c 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	2110      	movs	r1, #16
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	0152      	lsls	r2, r2, #5
 8000e88:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8a:	187a      	adds	r2, r7, r1
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f005 f94d 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e9a:	f000 fa0d 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	1d3a      	adds	r2, r7, #4
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_TIM3_Init+0xa0>)
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f005 fe45 	bl	8006b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000eba:	f000 f9fd 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b008      	add	sp, #32
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	200001dc 	.word	0x200001dc
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	0000f9ff 	.word	0x0000f9ff
 8000ed4:	000003e7 	.word	0x000003e7

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2009      	movs	r0, #9
 8000efc:	f000 fd84 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f00:	2009      	movs	r0, #9
 8000f02:	f000 fd96 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f000 fd7c 	bl	8001a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000f10:	200a      	movs	r0, #10
 8000f12:	f000 fd8e 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	40021000 	.word	0x40021000

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	240c      	movs	r4, #12
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2314      	movs	r3, #20
 8000f32:	001a      	movs	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f005 fe89 	bl	8006c4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f3e:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f46:	4b37      	ldr	r3, [pc, #220]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f56:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f58:	2102      	movs	r1, #2
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f5e:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <MX_GPIO_Init+0x100>)
 8000f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_I2C_RES_Pin|PWR_SW_Pin|RST_SW_Pin, GPIO_PIN_SET);
 8000f6a:	23a0      	movs	r3, #160	@ 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2131      	movs	r1, #49	@ 0x31
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 f9c3 	bl	80022fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, GPIO_PIN_RESET);
 8000f78:	23a0      	movs	r3, #160	@ 0xa0
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 f9bc 	bl	80022fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MB_BITCH_Pin|MCU_HOS_ON_Pin, GPIO_PIN_SET);
 8000f86:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <MX_GPIO_Init+0x104>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2148      	movs	r1, #72	@ 0x48
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f9b6 	bl	80022fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_I2C_RES_Pin MB_PWROK_Pin PWR_SW_Pin RST_SW_Pin */
  GPIO_InitStruct.Pin = USB_I2C_RES_Pin|MB_PWROK_Pin|PWR_SW_Pin|RST_SW_Pin;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2239      	movs	r2, #57	@ 0x39
 8000f96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	193a      	adds	r2, r7, r4
 8000fac:	23a0      	movs	r3, #160	@ 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 f822 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PSON_Pin MCU_ATTACH_IN_Pin */
  GPIO_InitStruct.Pin = MB_PSON_Pin|MCU_ATTACH_IN_Pin;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2284      	movs	r2, #132	@ 0x84
 8000fbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	193a      	adds	r2, r7, r4
 8000fcc:	23a0      	movs	r3, #160	@ 0xa0
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f001 f812 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_Pin MB_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|MB_STATUS_LED_Pin;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2211      	movs	r2, #17
 8000fdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	4a0e      	ldr	r2, [pc, #56]	@ (8001028 <MX_GPIO_Init+0x104>)
 8000fee:	0019      	movs	r1, r3
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	f001 f803 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_BITCH_Pin MCU_HOS_ON_Pin */
  GPIO_InitStruct.Pin = MB_BITCH_Pin|MCU_HOS_ON_Pin;
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2248      	movs	r2, #72	@ 0x48
 8000ffc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2201      	movs	r2, #1
 8001002:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	187b      	adds	r3, r7, r1
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <MX_GPIO_Init+0x104>)
 8001014:	0019      	movs	r1, r3
 8001016:	0010      	movs	r0, r2
 8001018:	f000 fff0 	bl	8001ffc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b009      	add	sp, #36	@ 0x24
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	50000400 	.word	0x50000400

0800102c <ProcessComand>:

/* USER CODE BEGIN 4 */

void ProcessComand(uint8_t command)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	0002      	movs	r2, r0
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	701a      	strb	r2, [r3, #0]
	if(command == 0b00 || command == 0b01 ||command == 0b10 ||command == 0b11)
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00c      	beq.n	800105a <ProcessComand+0x2e>
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d008      	beq.n	800105a <ProcessComand+0x2e>
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d004      	beq.n	800105a <ProcessComand+0x2e>
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d000      	beq.n	800105a <ProcessComand+0x2e>
 8001058:	e0ca      	b.n	80011f0 <ProcessComand+0x1c4>
	{
		Command = command;
 800105a:	4b67      	ldr	r3, [pc, #412]	@ (80011f8 <ProcessComand+0x1cc>)
 800105c:	1dfa      	adds	r2, r7, #7
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	701a      	strb	r2, [r3, #0]
		MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8001062:	23a0      	movs	r3, #160	@ 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	2104      	movs	r1, #4
 8001068:	0018      	movs	r0, r3
 800106a:	f001 f92b 	bl	80022c4 <HAL_GPIO_ReadPin>
 800106e:	0003      	movs	r3, r0
 8001070:	001a      	movs	r2, r3
 8001072:	4b62      	ldr	r3, [pc, #392]	@ (80011fc <ProcessComand+0x1d0>)
 8001074:	701a      	strb	r2, [r3, #0]
		if (Command == PWR_OFF && MB_State == 1) {
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <ProcessComand+0x1cc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d129      	bne.n	80010d2 <ProcessComand+0xa6>
 800107e:	4b5f      	ldr	r3, [pc, #380]	@ (80011fc <ProcessComand+0x1d0>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d125      	bne.n	80010d2 <ProcessComand+0xa6>

			SetButton(0);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fc0c 	bl	80008a4 <SetButton>
			while(MB_State != 0)
 800108c:	e009      	b.n	80010a2 <ProcessComand+0x76>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 800108e:	23a0      	movs	r3, #160	@ 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	2104      	movs	r1, #4
 8001094:	0018      	movs	r0, r3
 8001096:	f001 f915 	bl	80022c4 <HAL_GPIO_ReadPin>
 800109a:	0003      	movs	r3, r0
 800109c:	001a      	movs	r2, r3
 800109e:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <ProcessComand+0x1d0>)
 80010a0:	701a      	strb	r2, [r3, #0]
			while(MB_State != 0)
 80010a2:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <ProcessComand+0x1d0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f1      	bne.n	800108e <ProcessComand+0x62>
			}
			SetButton(1);// Короткое нажатие
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fbfa 	bl	80008a4 <SetButton>
			CloseKey();
 80010b0:	f7ff f9b2 	bl	8000418 <CloseKey>
			SetPWROK(HIGH);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff fc1d 	bl	80008f4 <SetPWROK>
			HAL_Delay(300);
 80010ba:	2396      	movs	r3, #150	@ 0x96
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fbbc 	bl	800183c <HAL_Delay>


			flag_receive = 0;
 80010c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001200 <ProcessComand+0x1d4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
			Adapter_State = 0;
 80010ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001204 <ProcessComand+0x1d8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e08e      	b.n	80011f0 <ProcessComand+0x1c4>

		} else if (Command == PWR_ON)
 80010d2:	4b49      	ldr	r3, [pc, #292]	@ (80011f8 <ProcessComand+0x1cc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12e      	bne.n	8001138 <ProcessComand+0x10c>
		{

			HAL_Delay(500);
 80010da:	23fa      	movs	r3, #250	@ 0xfa
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fbac 	bl	800183c <HAL_Delay>
			PressButton(200);
 80010e4:	20c8      	movs	r0, #200	@ 0xc8
 80010e6:	f7ff fbef 	bl	80008c8 <PressButton>
			while(MB_State != 1)
 80010ea:	e009      	b.n	8001100 <ProcessComand+0xd4>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80010ec:	23a0      	movs	r3, #160	@ 0xa0
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	2104      	movs	r1, #4
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 f8e6 	bl	80022c4 <HAL_GPIO_ReadPin>
 80010f8:	0003      	movs	r3, r0
 80010fa:	001a      	movs	r2, r3
 80010fc:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <ProcessComand+0x1d0>)
 80010fe:	701a      	strb	r2, [r3, #0]
			while(MB_State != 1)
 8001100:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <ProcessComand+0x1d0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1f1      	bne.n	80010ec <ProcessComand+0xc0>
			}
			HAL_Delay(100);
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f000 fb97 	bl	800183c <HAL_Delay>
			OpenKey();
 800110e:	f7ff f96f 	bl	80003f0 <OpenKey>
			SetPWROK(LOW);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fbee 	bl	80008f4 <SetPWROK>
			HAL_Delay(500);
 8001118:	23fa      	movs	r3, #250	@ 0xfa
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fb8d 	bl	800183c <HAL_Delay>
			Adapter_State = 1;
 8001122:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <ProcessComand+0x1d8>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			HAL_Delay(7000);
 8001128:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <ProcessComand+0x1dc>)
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fb86 	bl	800183c <HAL_Delay>
			flag_receive = 0;
 8001130:	4b33      	ldr	r3, [pc, #204]	@ (8001200 <ProcessComand+0x1d4>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e05b      	b.n	80011f0 <ProcessComand+0x1c4>
		} else if (Command == HARD_RESET && MB_State == 1) {
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <ProcessComand+0x1cc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d14e      	bne.n	80011de <ProcessComand+0x1b2>
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <ProcessComand+0x1d0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d14a      	bne.n	80011de <ProcessComand+0x1b2>
			SetButton(0);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fbab 	bl	80008a4 <SetButton>
			while(MB_State != 0)
 800114e:	e009      	b.n	8001164 <ProcessComand+0x138>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8001150:	23a0      	movs	r3, #160	@ 0xa0
 8001152:	05db      	lsls	r3, r3, #23
 8001154:	2104      	movs	r1, #4
 8001156:	0018      	movs	r0, r3
 8001158:	f001 f8b4 	bl	80022c4 <HAL_GPIO_ReadPin>
 800115c:	0003      	movs	r3, r0
 800115e:	001a      	movs	r2, r3
 8001160:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <ProcessComand+0x1d0>)
 8001162:	701a      	strb	r2, [r3, #0]
			while(MB_State != 0)
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <ProcessComand+0x1d0>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f1      	bne.n	8001150 <ProcessComand+0x124>
			}
			SetButton(1);// Короткое нажатие
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fb99 	bl	80008a4 <SetButton>
			SetPWROK(HIGH);
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff fbbe 	bl	80008f4 <SetPWROK>
			CloseKey();
 8001178:	f7ff f94e 	bl	8000418 <CloseKey>
			HAL_Delay(500);
 800117c:	23fa      	movs	r3, #250	@ 0xfa
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fb5b 	bl	800183c <HAL_Delay>
			OpenKey();
 8001186:	f7ff f933 	bl	80003f0 <OpenKey>
			HAL_Delay(500);
 800118a:	23fa      	movs	r3, #250	@ 0xfa
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fb54 	bl	800183c <HAL_Delay>
			PressButton(200);
 8001194:	20c8      	movs	r0, #200	@ 0xc8
 8001196:	f7ff fb97 	bl	80008c8 <PressButton>
			while(MB_State != 1)
 800119a:	e009      	b.n	80011b0 <ProcessComand+0x184>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 800119c:	23a0      	movs	r3, #160	@ 0xa0
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	2104      	movs	r1, #4
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 f88e 	bl	80022c4 <HAL_GPIO_ReadPin>
 80011a8:	0003      	movs	r3, r0
 80011aa:	001a      	movs	r2, r3
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <ProcessComand+0x1d0>)
 80011ae:	701a      	strb	r2, [r3, #0]
			while(MB_State != 1)
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <ProcessComand+0x1d0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d1f1      	bne.n	800119c <ProcessComand+0x170>
			}
			SetPWROK(LOW);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fb9b 	bl	80008f4 <SetPWROK>
			HAL_Delay(500);
 80011be:	23fa      	movs	r3, #250	@ 0xfa
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 fb3a 	bl	800183c <HAL_Delay>
			Adapter_State = 1;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <ProcessComand+0x1d8>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(7000);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <ProcessComand+0x1dc>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fb33 	bl	800183c <HAL_Delay>
			flag_receive = 0;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <ProcessComand+0x1d4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e008      	b.n	80011f0 <ProcessComand+0x1c4>
		}else {
			HAL_Delay(300);
 80011de:	2396      	movs	r3, #150	@ 0x96
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fb2a 	bl	800183c <HAL_Delay>
			flag_receive = 0;
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <ProcessComand+0x1d4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			return;
 80011ee:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	2000022e 	.word	0x2000022e
 80011fc:	20000230 	.word	0x20000230
 8001200:	2000002c 	.word	0x2000002c
 8001204:	2000022f 	.word	0x2000022f
 8001208:	00001b58 	.word	0x00001b58

0800120c <HAL_I2C_SlaveRxCpltCallback>:



void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	flag_receive = 1;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_I2C_SlaveRxCpltCallback+0x60>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
	Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800121c:	2110      	movs	r1, #16
 800121e:	0018      	movs	r0, r3
 8001220:	f001 f850 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001224:	0003      	movs	r3, r0
 8001226:	001a      	movs	r2, r3
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800122a:	701a      	strb	r2, [r3, #0]
	if(Command_temp == 1)
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10c      	bne.n	800124e <HAL_I2C_SlaveRxCpltCallback+0x42>
	{
		command_i2c = i2c_rx_buffer[0] & 0b11;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001240:	701a      	strb	r2, [r3, #0]
		ProcessComand(command_i2c);
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff fef0 	bl	800102c <ProcessComand>
 800124c:	e004      	b.n	8001258 <HAL_I2C_SlaveRxCpltCallback+0x4c>
	}else
	{
		temperature = i2c_rx_buffer[0];
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25a      	sxtb	r2, r3
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001256:	701a      	strb	r2, [r3, #0]

	}
	HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8001258:	4907      	ldr	r1, [pc, #28]	@ (8001278 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 800125c:	2201      	movs	r2, #1
 800125e:	0018      	movs	r0, r3
 8001260:	f001 f910 	bl	8002484 <HAL_I2C_Slave_Receive_IT>
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000002c 	.word	0x2000002c
 8001270:	50000400 	.word	0x50000400
 8001274:	20000239 	.word	0x20000239
 8001278:	20000238 	.word	0x20000238
 800127c:	20000234 	.word	0x20000234
 8001280:	20000235 	.word	0x20000235
 8001284:	20000084 	.word	0x20000084

08001288 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d105      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		overflow_counter++;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012a4:	801a      	strh	r2, [r3, #0]
			SetPWROK(HIGH);
			Adapter_State = 0;
		}*/

	}
}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	20000232 	.word	0x20000232

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	e7fd      	b.n	80012c0 <Error_Handler+0x8>

080012c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_MspInit+0x4c>)
 80012cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2201      	movs	r2, #1
 80012dc:	4013      	ands	r3, r2
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_MspInit+0x4c>)
 80012e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x4c>)
 80012e8:	2180      	movs	r1, #128	@ 0x80
 80012ea:	0549      	lsls	r1, r1, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	0018      	movs	r0, r3
 8001304:	f000 fabe 	bl	8001884 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b099      	sub	sp, #100	@ 0x64
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	234c      	movs	r3, #76	@ 0x4c
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	0018      	movs	r0, r3
 8001322:	2314      	movs	r3, #20
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f005 fc90 	bl	8006c4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	2418      	movs	r4, #24
 800132e:	193b      	adds	r3, r7, r4
 8001330:	0018      	movs	r0, r3
 8001332:	2334      	movs	r3, #52	@ 0x34
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f005 fc88 	bl	8006c4c <memset>
  if(hi2c->Instance==I2C1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	@ (80014e4 <HAL_I2C_MspInit+0x1d0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d000      	beq.n	8001348 <HAL_I2C_MspInit+0x34>
 8001346:	e091      	b.n	800146c <HAL_I2C_MspInit+0x158>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2220      	movs	r2, #32
 800134c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	193b      	adds	r3, r7, r4
 8001356:	0018      	movs	r0, r3
 8001358:	f004 f92c 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001360:	f7ff ffaa 	bl	80012b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 8001366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001368:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 800136a:	2102      	movs	r1, #2
 800136c:	430a      	orrs	r2, r1
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001370:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 8001372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = FAN_I2C1_SDA_Pin|FAN_I2C1_SCL_Pin;
 800137c:	214c      	movs	r1, #76	@ 0x4c
 800137e:	187b      	adds	r3, r7, r1
 8001380:	22c0      	movs	r2, #192	@ 0xc0
 8001382:	0052      	lsls	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2212      	movs	r2, #18
 800138a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2206      	movs	r2, #6
 800139c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <HAL_I2C_MspInit+0x1d8>)
 80013a2:	0019      	movs	r1, r3
 80013a4:	0010      	movs	r0, r2
 80013a6:	f000 fe29 	bl	8001ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013aa:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ae:	4b4e      	ldr	r3, [pc, #312]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	0389      	lsls	r1, r1, #14
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013b8:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	039b      	lsls	r3, r3, #14
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 80013c6:	4b4a      	ldr	r3, [pc, #296]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013c8:	4a4a      	ldr	r2, [pc, #296]	@ (80014f4 <HAL_I2C_MspInit+0x1e0>)
 80013ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013ce:	220a      	movs	r2, #10
 80013d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d2:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d8:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013de:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e4:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ea:	4b41      	ldr	r3, [pc, #260]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80013f0:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f6:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013fc:	4b3c      	ldr	r3, [pc, #240]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 fb34 	bl	8001a6c <HAL_DMA_Init>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8001408:	f7ff ff56 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a38      	ldr	r2, [pc, #224]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 8001410:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <HAL_I2C_MspInit+0x1dc>)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 800141a:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <HAL_I2C_MspInit+0x1e8>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800141e:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001420:	220b      	movs	r2, #11
 8001422:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001426:	2210      	movs	r2, #16
 8001428:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001450:	0018      	movs	r0, r3
 8001452:	f000 fb0b 	bl	8001a6c <HAL_DMA_Init>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 800145a:	f7ff ff2d 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a25      	ldr	r2, [pc, #148]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001462:	639a      	str	r2, [r3, #56]	@ 0x38
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <HAL_I2C_MspInit+0x1e4>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800146a:	e036      	b.n	80014da <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <HAL_I2C_MspInit+0x1ec>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d131      	bne.n	80014da <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 8001484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001486:	2201      	movs	r2, #1
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3_FAN_I2C2_SCL_Pin|U3_FAN_I2C2_SDA_Pin;
 800148e:	214c      	movs	r1, #76	@ 0x4c
 8001490:	187b      	adds	r3, r7, r1
 8001492:	22c0      	movs	r2, #192	@ 0xc0
 8001494:	0152      	lsls	r2, r2, #5
 8001496:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2212      	movs	r2, #18
 800149c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2206      	movs	r2, #6
 80014ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	187a      	adds	r2, r7, r1
 80014b2:	23a0      	movs	r3, #160	@ 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f000 fd9f 	bl	8001ffc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80014c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	03c9      	lsls	r1, r1, #15
 80014c8:	430a      	orrs	r2, r1
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_I2C_MspInit+0x1d4>)
 80014ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	03db      	lsls	r3, r3, #15
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b019      	add	sp, #100	@ 0x64
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	50000400 	.word	0x50000400
 80014f0:	200000d8 	.word	0x200000d8
 80014f4:	40020008 	.word	0x40020008
 80014f8:	20000134 	.word	0x20000134
 80014fc:	4002001c 	.word	0x4002001c
 8001500:	40005800 	.word	0x40005800

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	429a      	cmp	r2, r3
 8001516:	d10c      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 800151a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001524:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 8001526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001530:	e010      	b.n	8001554 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <HAL_TIM_Base_MspInit+0x5c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d10b      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 800153e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 8001542:	2102      	movs	r1, #2
 8001544:	430a      	orrs	r2, r1
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <HAL_TIM_Base_MspInit+0x58>)
 800154a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
}
 8001554:	46c0      	nop			@ (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40000400 	.word	0x40000400

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	240c      	movs	r4, #12
 800156e:	193b      	adds	r3, r7, r4
 8001570:	0018      	movs	r0, r3
 8001572:	2314      	movs	r3, #20
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f005 fb68 	bl	8006c4c <memset>
  if(htim->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	05db      	lsls	r3, r3, #23
 8001584:	429a      	cmp	r2, r3
 8001586:	d122      	bne.n	80015ce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_TIM_MspPostInit+0x74>)
 800158a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_TIM_MspPostInit+0x74>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_TIM_MspPostInit+0x74>)
 8001596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MB_FAN_TACH_Pin;
 80015a0:	0021      	movs	r1, r4
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2202      	movs	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2202      	movs	r2, #2
 80015ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2202      	movs	r2, #2
 80015be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MB_FAN_TACH_GPIO_Port, &GPIO_InitStruct);
 80015c0:	187a      	adds	r2, r7, r1
 80015c2:	23a0      	movs	r3, #160	@ 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fd17 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b009      	add	sp, #36	@ 0x24
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015f0:	46c0      	nop			@ (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f8fe 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	46c0      	nop			@ (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <DMA1_Channel1_IRQHandler+0x14>)
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fba2 	bl	8001d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	200000d8 	.word	0x200000d8

08001628 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <DMA1_Channel2_3_IRQHandler+0x14>)
 800162e:	0018      	movs	r0, r3
 8001630:	f000 fb96 	bl	8001d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	20000134 	.word	0x20000134

08001640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <TIM2_IRQHandler+0x14>)
 8001646:	0018      	movs	r0, r3
 8001648:	f004 fb6a 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	20000190 	.word	0x20000190

08001658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <TIM3_IRQHandler+0x14>)
 800165e:	0018      	movs	r0, r3
 8001660:	f004 fb5e 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001664:	46c0      	nop			@ (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	200001dc 	.word	0x200001dc

08001670 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <I2C1_IRQHandler+0x2c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	23e0      	movs	r3, #224	@ 0xe0
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4013      	ands	r3, r2
 8001680:	d004      	beq.n	800168c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <I2C1_IRQHandler+0x2c>)
 8001684:	0018      	movs	r0, r3
 8001686:	f001 fb95 	bl	8002db4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800168a:	e003      	b.n	8001694 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <I2C1_IRQHandler+0x2c>)
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fb76 	bl	8002d80 <HAL_I2C_EV_IRQHandler>
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	20000030 	.word	0x20000030

080016a0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <I2C2_IRQHandler+0x2c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	23e0      	movs	r3, #224	@ 0xe0
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4013      	ands	r3, r2
 80016b0:	d004      	beq.n	80016bc <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <I2C2_IRQHandler+0x2c>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fb7d 	bl	8002db4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80016ba:	e003      	b.n	80016c4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80016bc:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <I2C2_IRQHandler+0x2c>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f001 fb5e 	bl	8002d80 <HAL_I2C_EV_IRQHandler>
}
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	20000084 	.word	0x20000084

080016d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	46c0      	nop			@ (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e0:	f7ff fff6 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800170a:	f005 faa7 	bl	8006c5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800170e:	f7ff f96d 	bl	80009ec <main>

08001712 <LoopForever>:

LoopForever:
  b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   r0, =_estack
 8001714:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001720:	08006d68 	.word	0x08006d68
  ldr r2, =_sbss
 8001724:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001728:	20000240 	.word	0x20000240

0800172c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_COMP_IRQHandler>
	...

08001730 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_Init+0x3c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Init+0x3c>)
 8001742:	2180      	movs	r1, #128	@ 0x80
 8001744:	0049      	lsls	r1, r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f810 	bl	8001770 <HAL_InitTick>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d003      	beq.n	800175c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e001      	b.n	8001760 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fdb2 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40022000 	.word	0x40022000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	230f      	movs	r3, #15
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <HAL_InitTick+0x88>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02b      	beq.n	80017e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_InitTick+0x8c>)
 800178a:	681c      	ldr	r4, [r3, #0]
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_InitTick+0x88>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	0019      	movs	r1, r3
 8001792:	23fa      	movs	r3, #250	@ 0xfa
 8001794:	0098      	lsls	r0, r3, #2
 8001796:	f7fe fcb5 	bl	8000104 <__udivsi3>
 800179a:	0003      	movs	r3, r0
 800179c:	0019      	movs	r1, r3
 800179e:	0020      	movs	r0, r4
 80017a0:	f7fe fcb0 	bl	8000104 <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 f953 	bl	8001a52 <HAL_SYSTICK_Config>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d112      	bne.n	80017d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d80a      	bhi.n	80017cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	2301      	movs	r3, #1
 80017ba:	425b      	negs	r3, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f922 	bl	8001a08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_InitTick+0x90>)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00d      	b.n	80017e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	230f      	movs	r3, #15
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e008      	b.n	80017e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e003      	b.n	80017e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b005      	add	sp, #20
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20000004 	.word	0x20000004
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_IncTick+0x1c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	001a      	movs	r2, r3
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_IncTick+0x20>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	18d2      	adds	r2, r2, r3
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_IncTick+0x20>)
 8001816:	601a      	str	r2, [r3, #0]
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	2000000c 	.word	0x2000000c
 8001824:	2000023c 	.word	0x2000023c

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b02      	ldr	r3, [pc, #8]	@ (8001838 <HAL_GetTick+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	2000023c 	.word	0x2000023c

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff fff0 	bl	8001828 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3301      	adds	r3, #1
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	001a      	movs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	189b      	adds	r3, r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	f7ff ffe0 	bl	8001828 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	2000000c 	.word	0x2000000c

08001884 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a06      	ldr	r2, [pc, #24]	@ (80018ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40010000 	.word	0x40010000
 80018ac:	fffff9ff 	.word	0xfffff9ff

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	0002      	movs	r2, r0
 80018b8:	1dfb      	adds	r3, r7, #7
 80018ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018c2:	d809      	bhi.n	80018d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	001a      	movs	r2, r3
 80018ca:	231f      	movs	r3, #31
 80018cc:	401a      	ands	r2, r3
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <__NVIC_EnableIRQ+0x30>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	4091      	lsls	r1, r2
 80018d4:	000a      	movs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	0002      	movs	r2, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f8:	d828      	bhi.n	800194c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018fa:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <__NVIC_SetPriority+0xd4>)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b25b      	sxtb	r3, r3
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	33c0      	adds	r3, #192	@ 0xc0
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	589b      	ldr	r3, [r3, r2]
 800190a:	1dfa      	adds	r2, r7, #7
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	0011      	movs	r1, r2
 8001910:	2203      	movs	r2, #3
 8001912:	400a      	ands	r2, r1
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	21ff      	movs	r1, #255	@ 0xff
 8001918:	4091      	lsls	r1, r2
 800191a:	000a      	movs	r2, r1
 800191c:	43d2      	mvns	r2, r2
 800191e:	401a      	ands	r2, r3
 8001920:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	22ff      	movs	r2, #255	@ 0xff
 8001928:	401a      	ands	r2, r3
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	0018      	movs	r0, r3
 8001930:	2303      	movs	r3, #3
 8001932:	4003      	ands	r3, r0
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001938:	481f      	ldr	r0, [pc, #124]	@ (80019b8 <__NVIC_SetPriority+0xd4>)
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b25b      	sxtb	r3, r3
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	430a      	orrs	r2, r1
 8001944:	33c0      	adds	r3, #192	@ 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800194a:	e031      	b.n	80019b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <__NVIC_SetPriority+0xd8>)
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	0019      	movs	r1, r3
 8001954:	230f      	movs	r3, #15
 8001956:	400b      	ands	r3, r1
 8001958:	3b08      	subs	r3, #8
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3306      	adds	r3, #6
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	18d3      	adds	r3, r2, r3
 8001962:	3304      	adds	r3, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	1dfa      	adds	r2, r7, #7
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	0011      	movs	r1, r2
 800196c:	2203      	movs	r2, #3
 800196e:	400a      	ands	r2, r1
 8001970:	00d2      	lsls	r2, r2, #3
 8001972:	21ff      	movs	r1, #255	@ 0xff
 8001974:	4091      	lsls	r1, r2
 8001976:	000a      	movs	r2, r1
 8001978:	43d2      	mvns	r2, r2
 800197a:	401a      	ands	r2, r3
 800197c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	22ff      	movs	r2, #255	@ 0xff
 8001984:	401a      	ands	r2, r3
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0018      	movs	r0, r3
 800198c:	2303      	movs	r3, #3
 800198e:	4003      	ands	r3, r0
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <__NVIC_SetPriority+0xd8>)
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	001c      	movs	r4, r3
 800199c:	230f      	movs	r3, #15
 800199e:	4023      	ands	r3, r4
 80019a0:	3b08      	subs	r3, #8
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	430a      	orrs	r2, r1
 80019a6:	3306      	adds	r3, #6
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	18c3      	adds	r3, r0, r3
 80019ac:	3304      	adds	r3, #4
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b003      	add	sp, #12
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1e5a      	subs	r2, r3, #1
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	045b      	lsls	r3, r3, #17
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d301      	bcc.n	80019d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d4:	2301      	movs	r3, #1
 80019d6:	e010      	b.n	80019fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <SysTick_Config+0x44>)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	3a01      	subs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e0:	2301      	movs	r3, #1
 80019e2:	425b      	negs	r3, r3
 80019e4:	2103      	movs	r1, #3
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff ff7c 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x44>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x44>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	210f      	movs	r1, #15
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	1c02      	adds	r2, r0, #0
 8001a18:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b004      	add	sp, #16
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	0002      	movs	r2, r0
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff ff33 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ffaf 	bl	80019c0 <SysTick_Config>
 8001a62:	0003      	movs	r3, r0
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e077      	b.n	8001b6e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a3d      	ldr	r2, [pc, #244]	@ (8001b78 <HAL_DMA_Init+0x10c>)
 8001a84:	4694      	mov	ip, r2
 8001a86:	4463      	add	r3, ip
 8001a88:	2114      	movs	r1, #20
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7fe fb3a 	bl	8000104 <__udivsi3>
 8001a90:	0003      	movs	r3, r0
 8001a92:	009a      	lsls	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2225      	movs	r2, #37	@ 0x25
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4934      	ldr	r1, [pc, #208]	@ (8001b7c <HAL_DMA_Init+0x110>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 fa37 	bl	8001f5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	01db      	lsls	r3, r3, #7
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d102      	bne.n	8001b00 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	213f      	movs	r1, #63	@ 0x3f
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b16:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d011      	beq.n	8001b44 <HAL_DMA_Init+0xd8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d80d      	bhi.n	8001b44 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fa42 	bl	8001fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e008      	b.n	8001b56 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2225      	movs	r2, #37	@ 0x25
 8001b60:	2101      	movs	r1, #1
 8001b62:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	bffdfff8 	.word	0xbffdfff8
 8001b7c:	ffff800f 	.word	0xffff800f

08001b80 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2317      	movs	r3, #23
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2224      	movs	r2, #36	@ 0x24
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA_Start_IT+0x24>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e06f      	b.n	8001c84 <HAL_DMA_Start_IT+0x104>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	2101      	movs	r1, #1
 8001baa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2225      	movs	r2, #37	@ 0x25
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d157      	bne.n	8001c68 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2225      	movs	r2, #37	@ 0x25
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f97d 	bl	8001edc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e00f      	b.n	8001c1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2104      	movs	r1, #4
 8001c08:	438a      	bics	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	210a      	movs	r1, #10
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4013      	ands	r3, r2
 8001c28:	d008      	beq.n	8001c3c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	0049      	lsls	r1, r1, #1
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c4e:	2180      	movs	r1, #128	@ 0x80
 8001c50:	0049      	lsls	r1, r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e00a      	b.n	8001c7e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2224      	movs	r2, #36	@ 0x24
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001c76:	2317      	movs	r3, #23
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001c7e:	2317      	movs	r3, #23
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	781b      	ldrb	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b006      	add	sp, #24
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	210f      	movs	r1, #15
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2225      	movs	r2, #37	@ 0x25
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d006      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e049      	b.n	8001d4a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	210e      	movs	r1, #14
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	491d      	ldr	r1, [pc, #116]	@ (8001d58 <HAL_DMA_Abort_IT+0xcc>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_DMA_Abort_IT+0xd0>)
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	221c      	movs	r2, #28
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_DMA_Abort_IT+0xd0>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d18:	490f      	ldr	r1, [pc, #60]	@ (8001d58 <HAL_DMA_Abort_IT+0xcc>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001d26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2225      	movs	r2, #37	@ 0x25
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	@ 0x24
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	0010      	movs	r0, r2
 8001d48:	4798      	blx	r3
    }
  }
  return status;
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b004      	add	sp, #16
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	fffffeff 	.word	0xfffffeff
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001d68:	4b55      	ldr	r3, [pc, #340]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	221c      	movs	r2, #28
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2204      	movs	r2, #4
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	d027      	beq.n	8001dda <HAL_DMA_IRQHandler+0x7a>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d023      	beq.n	8001dda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d107      	bne.n	8001dae <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2104      	movs	r1, #4
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001dae:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	221c      	movs	r2, #28
 8001db8:	4013      	ands	r3, r2
 8001dba:	2204      	movs	r2, #4
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	4b40      	ldr	r3, [pc, #256]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <HAL_DMA_IRQHandler+0x6e>
 8001dcc:	e073      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001dd8:	e06d      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	221c      	movs	r2, #28
 8001de0:	4013      	ands	r3, r2
 8001de2:	2202      	movs	r2, #2
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	d02e      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xec>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d02a      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d10b      	bne.n	8001e1a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2225      	movs	r2, #37	@ 0x25
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	221c      	movs	r2, #28
 8001e24:	4013      	ands	r3, r2
 8001e26:	2202      	movs	r2, #2
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03a      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	0010      	movs	r0, r2
 8001e48:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001e4a:	e034      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	221c      	movs	r2, #28
 8001e52:	4013      	ands	r3, r2
 8001e54:	2208      	movs	r2, #8
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d02b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x158>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4013      	ands	r3, r2
 8001e66:	d027      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	210e      	movs	r1, #14
 8001e74:	438a      	bics	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	221c      	movs	r2, #28
 8001e82:	4013      	ands	r3, r2
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_DMA_IRQHandler+0x160>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2225      	movs	r2, #37	@ 0x25
 8001e98:	2101      	movs	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	@ 0x24
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	0010      	movs	r0, r2
 8001eb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46c0      	nop			@ (mov r8, r8)
}
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2225      	movs	r2, #37	@ 0x25
 8001ed0:	5c9b      	ldrb	r3, [r3, r2]
 8001ed2:	b2db      	uxtb	r3, r3
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}

08001edc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ef2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f04:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <DMA_SetConfig+0x7c>)
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	221c      	movs	r2, #28
 8001f10:	4013      	ands	r3, r2
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <DMA_SetConfig+0x7c>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d108      	bne.n	8001f3e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f3c:	e007      	b.n	8001f4e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	60da      	str	r2, [r3, #12]
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	40020000 	.word	0x40020000

08001f5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001f6c:	4694      	mov	ip, r2
 8001f6e:	4463      	add	r3, ip
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	001a      	movs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	23ff      	movs	r3, #255	@ 0xff
 8001f80:	4013      	ands	r3, r2
 8001f82:	3b08      	subs	r3, #8
 8001f84:	2114      	movs	r1, #20
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe f8bc 	bl	8000104 <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001f94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	221f      	movs	r2, #31
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	10008200 	.word	0x10008200
 8001fb0:	40020880 	.word	0x40020880

08001fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	223f      	movs	r2, #63	@ 0x3f
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001fca:	4694      	mov	ip, r2
 8001fcc:	4463      	add	r3, ip
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	1000823f 	.word	0x1000823f
 8001ff8:	40020940 	.word	0x40020940

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e147      	b.n	800229c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4091      	lsls	r1, r2
 8002016:	000a      	movs	r2, r1
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d100      	bne.n	8002024 <HAL_GPIO_Init+0x28>
 8002022:	e138      	b.n	8002296 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	2b01      	cmp	r3, #1
 800202e:	d005      	beq.n	800203c <HAL_GPIO_Init+0x40>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	2b02      	cmp	r3, #2
 800203a:	d130      	bne.n	800209e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	409a      	lsls	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	43da      	mvns	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002072:	2201      	movs	r2, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	43da      	mvns	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	2201      	movs	r2, #1
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2203      	movs	r2, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d017      	beq.n	80020da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	409a      	lsls	r2, r3
 80020b8:	0013      	movs	r3, r2
 80020ba:	43da      	mvns	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d123      	bne.n	800212e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	58d3      	ldr	r3, [r2, r3]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2107      	movs	r1, #7
 8002112:	400b      	ands	r3, r1
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	43da      	mvns	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	401a      	ands	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	23c0      	movs	r3, #192	@ 0xc0
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4013      	ands	r3, r2
 800216c:	d100      	bne.n	8002170 <HAL_GPIO_Init+0x174>
 800216e:	e092      	b.n	8002296 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002170:	4a50      	ldr	r2, [pc, #320]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3318      	adds	r3, #24
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	589b      	ldr	r3, [r3, r2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	220f      	movs	r2, #15
 8002188:	409a      	lsls	r2, r3
 800218a:	0013      	movs	r3, r2
 800218c:	43da      	mvns	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	23a0      	movs	r3, #160	@ 0xa0
 8002198:	05db      	lsls	r3, r3, #23
 800219a:	429a      	cmp	r2, r3
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x1ca>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a45      	ldr	r2, [pc, #276]	@ (80022b8 <HAL_GPIO_Init+0x2bc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x1c6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a44      	ldr	r2, [pc, #272]	@ (80022bc <HAL_GPIO_Init+0x2c0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x1c2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <HAL_GPIO_Init+0x2c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x1be>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x1cc>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x1cc>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x1cc>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x1cc>
 80021c6:	2300      	movs	r3, #0
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	2103      	movs	r1, #3
 80021cc:	400a      	ands	r2, r1
 80021ce:	00d2      	lsls	r2, r2, #3
 80021d0:	4093      	lsls	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021d8:	4936      	ldr	r1, [pc, #216]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3318      	adds	r3, #24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e6:	4b33      	ldr	r3, [pc, #204]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	035b      	lsls	r3, r3, #13
 80021fe:	4013      	ands	r3, r2
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43da      	mvns	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	039b      	lsls	r3, r3, #14
 8002228:	4013      	ands	r3, r2
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002234:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 800223c:	2384      	movs	r3, #132	@ 0x84
 800223e:	58d3      	ldr	r3, [r2, r3]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43da      	mvns	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	4013      	ands	r3, r2
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002260:	4914      	ldr	r1, [pc, #80]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 8002262:	2284      	movs	r2, #132	@ 0x84
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002268:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	58d3      	ldr	r3, [r2, r3]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43da      	mvns	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	4013      	ands	r3, r2
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228e:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <HAL_GPIO_Init+0x2b8>)
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	40da      	lsrs	r2, r3
 80022a4:	1e13      	subs	r3, r2, #0
 80022a6:	d000      	beq.n	80022aa <HAL_GPIO_Init+0x2ae>
 80022a8:	e6b0      	b.n	800200c <HAL_GPIO_Init+0x10>
  }
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b006      	add	sp, #24
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021800 	.word	0x40021800
 80022b8:	50000400 	.word	0x50000400
 80022bc:	50000800 	.word	0x50000800
 80022c0:	50000c00 	.word	0x50000c00

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	000a      	movs	r2, r1
 80022ce:	1cbb      	adds	r3, r7, #2
 80022d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	1cba      	adds	r2, r7, #2
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	4013      	ands	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022de:	230f      	movs	r3, #15
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e003      	b.n	80022f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e8:	230f      	movs	r3, #15
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022f0:	230f      	movs	r3, #15
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	0008      	movs	r0, r1
 8002308:	0011      	movs	r1, r2
 800230a:	1cbb      	adds	r3, r7, #2
 800230c:	1c02      	adds	r2, r0, #0
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	1c7b      	adds	r3, r7, #1
 8002312:	1c0a      	adds	r2, r1, #0
 8002314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002316:	1c7b      	adds	r3, r7, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231e:	1cbb      	adds	r3, r7, #2
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002326:	e003      	b.n	8002330 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002328:	1cbb      	adds	r3, r7, #2
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e08f      	b.n	800246a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2241      	movs	r2, #65	@ 0x41
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2240      	movs	r2, #64	@ 0x40
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f7fe ffd7 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2241      	movs	r2, #65	@ 0x41
 800236a:	2124      	movs	r1, #36	@ 0x24
 800236c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	438a      	bics	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	493b      	ldr	r1, [pc, #236]	@ (8002474 <HAL_I2C_Init+0x13c>)
 8002388:	400a      	ands	r2, r1
 800238a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4938      	ldr	r1, [pc, #224]	@ (8002478 <HAL_I2C_Init+0x140>)
 8002398:	400a      	ands	r2, r1
 800239a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d108      	bne.n	80023b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2180      	movs	r1, #128	@ 0x80
 80023ae:	0209      	lsls	r1, r1, #8
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e007      	b.n	80023c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2184      	movs	r1, #132	@ 0x84
 80023c0:	0209      	lsls	r1, r1, #8
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d109      	bne.n	80023e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	0109      	lsls	r1, r1, #4
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	e007      	b.n	80023f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4923      	ldr	r1, [pc, #140]	@ (800247c <HAL_I2C_Init+0x144>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4920      	ldr	r1, [pc, #128]	@ (8002480 <HAL_I2C_Init+0x148>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	491a      	ldr	r1, [pc, #104]	@ (8002478 <HAL_I2C_Init+0x140>)
 800240e:	400a      	ands	r2, r1
 8002410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	431a      	orrs	r2, r3
 800241c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69d9      	ldr	r1, [r3, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1a      	ldr	r2, [r3, #32]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2241      	movs	r2, #65	@ 0x41
 8002456:	2120      	movs	r1, #32
 8002458:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2242      	movs	r2, #66	@ 0x42
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	f0ffffff 	.word	0xf0ffffff
 8002478:	ffff7fff 	.word	0xffff7fff
 800247c:	fffff7ff 	.word	0xfffff7ff
 8002480:	02008000 	.word	0x02008000

08002484 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2241      	movs	r2, #65	@ 0x41
 8002496:	5c9b      	ldrb	r3, [r3, r2]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b20      	cmp	r3, #32
 800249c:	d13b      	bne.n	8002516 <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2240      	movs	r2, #64	@ 0x40
 80024a2:	5c9b      	ldrb	r3, [r3, r2]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2C_Slave_Receive_IT+0x28>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e035      	b.n	8002518 <HAL_I2C_Slave_Receive_IT+0x94>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	2101      	movs	r1, #1
 80024b2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2241      	movs	r2, #65	@ 0x41
 80024b8:	2122      	movs	r1, #34	@ 0x22
 80024ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2242      	movs	r2, #66	@ 0x42
 80024c0:	2120      	movs	r1, #32
 80024c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4912      	ldr	r1, [pc, #72]	@ (8002520 <HAL_I2C_Slave_Receive_IT+0x9c>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1dba      	adds	r2, r7, #6
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002524 <HAL_I2C_Slave_Receive_IT+0xa0>)
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_I2C_Slave_Receive_IT+0xa4>)
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2240      	movs	r2, #64	@ 0x40
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002506:	4a09      	ldr	r2, [pc, #36]	@ (800252c <HAL_I2C_Slave_Receive_IT+0xa8>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f002 f9e7 	bl	80048e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}
 8002520:	ffff7fff 	.word	0xffff7fff
 8002524:	ffff0000 	.word	0xffff0000
 8002528:	08003171 	.word	0x08003171
 800252c:	00008002 	.word	0x00008002

08002530 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	0008      	movs	r0, r1
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	0019      	movs	r1, r3
 800253e:	230a      	movs	r3, #10
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	1c02      	adds	r2, r0, #0
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	2308      	movs	r3, #8
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	1c0a      	adds	r2, r1, #0
 800254c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2241      	movs	r2, #65	@ 0x41
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d000      	beq.n	8002560 <HAL_I2C_Master_Transmit_DMA+0x30>
 800255e:	e0ff      	b.n	8002760 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	401a      	ands	r2, r3
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	429a      	cmp	r2, r3
 8002572:	d101      	bne.n	8002578 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
 8002576:	e0f4      	b.n	8002762 <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2240      	movs	r2, #64	@ 0x40
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Master_Transmit_DMA+0x56>
 8002582:	2302      	movs	r3, #2
 8002584:	e0ed      	b.n	8002762 <HAL_I2C_Master_Transmit_DMA+0x232>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2240      	movs	r2, #64	@ 0x40
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2241      	movs	r2, #65	@ 0x41
 8002592:	2121      	movs	r1, #33	@ 0x21
 8002594:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2242      	movs	r2, #66	@ 0x42
 800259a:	2110      	movs	r1, #16
 800259c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2208      	movs	r2, #8
 80025ae:	18ba      	adds	r2, r7, r2
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a6d      	ldr	r2, [pc, #436]	@ (800276c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80025b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002770 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2bff      	cmp	r3, #255	@ 0xff
 80025c8:	d906      	bls.n	80025d8 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	22ff      	movs	r2, #255	@ 0xff
 80025ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	045b      	lsls	r3, r3, #17
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e007      	b.n	80025e8 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	049b      	lsls	r3, r3, #18
 80025e6:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01a      	beq.n	8002626 <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <HAL_I2C_Master_Transmit_DMA+0x100>
 800262e:	e07c      	b.n	800272a <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	2b00      	cmp	r3, #0
 8002636:	d025      	beq.n	8002684 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263c:	4a4d      	ldr	r2, [pc, #308]	@ (8002774 <HAL_I2C_Master_Transmit_DMA+0x244>)
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002644:	4a4c      	ldr	r2, [pc, #304]	@ (8002778 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8002646:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	2200      	movs	r2, #0
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002668:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800266e:	2517      	movs	r5, #23
 8002670:	197c      	adds	r4, r7, r5
 8002672:	f7ff fa85 	bl	8001b80 <HAL_DMA_Start_IT>
 8002676:	0003      	movs	r3, r0
 8002678:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800267a:	197b      	adds	r3, r7, r5
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d13f      	bne.n	8002702 <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8002682:	e013      	b.n	80026ac <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2241      	movs	r2, #65	@ 0x41
 8002688:	2120      	movs	r1, #32
 800268a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2242      	movs	r2, #66	@ 0x42
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e05a      	b.n	8002762 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fc      	ldr	r4, [r7, #28]
 80026b8:	230a      	movs	r3, #10
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	8819      	ldrh	r1, [r3, #0]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	0023      	movs	r3, r4
 80026c6:	f002 f8d1 	bl	800486c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2110      	movs	r1, #16
 80026e8:	0018      	movs	r0, r3
 80026ea:	f002 f8f9 	bl	80048e0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2180      	movs	r1, #128	@ 0x80
 80026fa:	01c9      	lsls	r1, r1, #7
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e02c      	b.n	800275c <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2241      	movs	r2, #65	@ 0x41
 8002706:	2120      	movs	r1, #32
 8002708:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2242      	movs	r2, #66	@ 0x42
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	2210      	movs	r2, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2240      	movs	r2, #64	@ 0x40
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01b      	b.n	8002762 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800272e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	049c      	lsls	r4, r3, #18
 8002738:	230a      	movs	r3, #10
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	8819      	ldrh	r1, [r3, #0]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	0023      	movs	r3, r4
 8002746:	f002 f891 	bl	800486c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2101      	movs	r1, #1
 8002756:	0018      	movs	r0, r3
 8002758:	f002 f8c2 	bl	80048e0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b008      	add	sp, #32
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	ffff0000 	.word	0xffff0000
 8002770:	08003371 	.word	0x08003371
 8002774:	0800441d 	.word	0x0800441d
 8002778:	0800455d 	.word	0x0800455d
 800277c:	80002000 	.word	0x80002000
 8002780:	08002f09 	.word	0x08002f09

08002784 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	000c      	movs	r4, r1
 800278e:	0010      	movs	r0, r2
 8002790:	0019      	movs	r1, r3
 8002792:	230a      	movs	r3, #10
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	1c22      	adds	r2, r4, #0
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	2308      	movs	r3, #8
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	1c02      	adds	r2, r0, #0
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	1dbb      	adds	r3, r7, #6
 80027a4:	1c0a      	adds	r2, r1, #0
 80027a6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2241      	movs	r2, #65	@ 0x41
 80027ac:	5c9b      	ldrb	r3, [r3, r2]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d000      	beq.n	80027b6 <HAL_I2C_Mem_Write_DMA+0x32>
 80027b4:	e0d8      	b.n	8002968 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_I2C_Mem_Write_DMA+0x42>
 80027bc:	232c      	movs	r3, #44	@ 0x2c
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0cb      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	401a      	ands	r2, r3
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0bf      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Mem_Write_DMA+0x74>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0b8      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	@ 0x40
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2241      	movs	r2, #65	@ 0x41
 8002804:	2121      	movs	r1, #33	@ 0x21
 8002806:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2242      	movs	r2, #66	@ 0x42
 800280c:	2140      	movs	r1, #64	@ 0x40
 800280e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	222c      	movs	r2, #44	@ 0x2c
 8002820:	18ba      	adds	r2, r7, r2
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a52      	ldr	r2, [pc, #328]	@ (8002978 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002832:	230a      	movs	r3, #10
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2bff      	cmp	r3, #255	@ 0xff
 8002844:	d903      	bls.n	800284e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	@ 0xff
 800284a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800284c:	e004      	b.n	8002858 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10b      	bne.n	8002878 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002860:	2308      	movs	r3, #8
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	4252      	negs	r2, r2
 8002874:	651a      	str	r2, [r3, #80]	@ 0x50
 8002876:	e00e      	b.n	8002896 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002878:	2108      	movs	r1, #8
 800287a:	187b      	adds	r3, r7, r1
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800288a:	187b      	adds	r3, r7, r1
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	001a      	movs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	4a36      	ldr	r2, [pc, #216]	@ (800297c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028aa:	4a35      	ldr	r2, [pc, #212]	@ (8002980 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80028ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	2200      	movs	r2, #0
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80028c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3328      	adds	r3, #40	@ 0x28
 80028ca:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80028d0:	2517      	movs	r5, #23
 80028d2:	197c      	adds	r4, r7, r5
 80028d4:	f7ff f954 	bl	8001b80 <HAL_DMA_Start_IT>
 80028d8:	0003      	movs	r3, r0
 80028da:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80028dc:	197b      	adds	r3, r7, r5
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12d      	bne.n	8002940 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80028e4:	e013      	b.n	800290e <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2241      	movs	r2, #65	@ 0x41
 80028ea:	2120      	movs	r1, #32
 80028ec:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2242      	movs	r2, #66	@ 0x42
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2240      	movs	r2, #64	@ 0x40
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e02d      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	045c      	lsls	r4, r3, #17
 8002918:	230a      	movs	r3, #10
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	8819      	ldrh	r1, [r3, #0]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_I2C_Mem_Write_DMA+0x200>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	0023      	movs	r3, r4
 8002926:	f001 ffa1 	bl	800486c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2240      	movs	r2, #64	@ 0x40
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2101      	movs	r1, #1
 8002936:	0018      	movs	r0, r3
 8002938:	f001 ffd2 	bl	80048e0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e014      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2241      	movs	r2, #65	@ 0x41
 8002944:	2120      	movs	r1, #32
 8002946:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2242      	movs	r2, #66	@ 0x42
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	2210      	movs	r2, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bdb0      	pop	{r4, r5, r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	ffff0000 	.word	0xffff0000
 8002978:	08003569 	.word	0x08003569
 800297c:	0800441d 	.word	0x0800441d
 8002980:	0800455d 	.word	0x0800455d
 8002984:	80002000 	.word	0x80002000

08002988 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	000c      	movs	r4, r1
 8002992:	0010      	movs	r0, r2
 8002994:	0019      	movs	r1, r3
 8002996:	230a      	movs	r3, #10
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	1c22      	adds	r2, r4, #0
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	2308      	movs	r3, #8
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	1c02      	adds	r2, r0, #0
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	1dbb      	adds	r3, r7, #6
 80029a8:	1c0a      	adds	r2, r1, #0
 80029aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2241      	movs	r2, #65	@ 0x41
 80029b0:	5c9b      	ldrb	r3, [r3, r2]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d000      	beq.n	80029ba <HAL_I2C_Mem_Read_DMA+0x32>
 80029b8:	e0d6      	b.n	8002b68 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_I2C_Mem_Read_DMA+0x42>
 80029c0:	232c      	movs	r3, #44	@ 0x2c
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0c9      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	401a      	ands	r2, r3
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d101      	bne.n	80029ee <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
 80029ec:	e0bd      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2240      	movs	r2, #64	@ 0x40
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_I2C_Mem_Read_DMA+0x74>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e0b6      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	2101      	movs	r1, #1
 8002a02:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2241      	movs	r2, #65	@ 0x41
 8002a08:	2122      	movs	r1, #34	@ 0x22
 8002a0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2242      	movs	r2, #66	@ 0x42
 8002a10:	2140      	movs	r1, #64	@ 0x40
 8002a12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	222c      	movs	r2, #44	@ 0x2c
 8002a24:	18ba      	adds	r2, r7, r2
 8002a26:	8812      	ldrh	r2, [r2, #0]
 8002a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	@ (8002b74 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002a36:	230a      	movs	r3, #10
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2bff      	cmp	r3, #255	@ 0xff
 8002a48:	d903      	bls.n	8002a52 <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	22ff      	movs	r2, #255	@ 0xff
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a50:	e004      	b.n	8002a5c <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10b      	bne.n	8002a7c <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	2308      	movs	r3, #8
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	4252      	negs	r2, r2
 8002a78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a7a:	e00e      	b.n	8002a9a <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7c:	2108      	movs	r1, #8
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	001a      	movs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d023      	beq.n	8002aea <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	4a34      	ldr	r2, [pc, #208]	@ (8002b80 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	2200      	movs	r2, #0
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3324      	adds	r3, #36	@ 0x24
 8002acc:	0019      	movs	r1, r3
 8002ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002ad4:	2517      	movs	r5, #23
 8002ad6:	197c      	adds	r4, r7, r5
 8002ad8:	f7ff f852 	bl	8001b80 <HAL_DMA_Start_IT>
 8002adc:	0003      	movs	r3, r0
 8002ade:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12b      	bne.n	8002b40 <HAL_I2C_Mem_Read_DMA+0x1b8>
 8002ae8:	e013      	b.n	8002b12 <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2241      	movs	r2, #65	@ 0x41
 8002aee:	2120      	movs	r1, #32
 8002af0:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2242      	movs	r2, #66	@ 0x42
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2240      	movs	r2, #64	@ 0x40
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e02b      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b12:	1dbb      	adds	r3, r7, #6
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	230a      	movs	r3, #10
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	8819      	ldrh	r1, [r3, #0]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	f001 fea1 	bl	800486c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2240      	movs	r2, #64	@ 0x40
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2101      	movs	r1, #1
 8002b36:	0018      	movs	r0, r3
 8002b38:	f001 fed2 	bl	80048e0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e014      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2241      	movs	r2, #65	@ 0x41
 8002b44:	2120      	movs	r1, #32
 8002b46:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2242      	movs	r2, #66	@ 0x42
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	2210      	movs	r2, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2240      	movs	r2, #64	@ 0x40
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b006      	add	sp, #24
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	ffff0000 	.word	0xffff0000
 8002b78:	08003569 	.word	0x08003569
 8002b7c:	080044bd 	.word	0x080044bd
 8002b80:	0800455d 	.word	0x0800455d
 8002b84:	80002000 	.word	0x80002000

08002b88 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	@ 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	230a      	movs	r3, #10
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	1c0a      	adds	r2, r1, #0
 8002b9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2241      	movs	r2, #65	@ 0x41
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d000      	beq.n	8002bae <HAL_I2C_IsDeviceReady+0x26>
 8002bac:	e0df      	b.n	8002d6e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	401a      	ands	r2, r3
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0d4      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2240      	movs	r2, #64	@ 0x40
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_IsDeviceReady+0x4c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0cd      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	@ 0x40
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2241      	movs	r2, #65	@ 0x41
 8002be0:	2124      	movs	r1, #36	@ 0x24
 8002be2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_IsDeviceReady+0x7a>
 8002bf2:	230a      	movs	r3, #10
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	059b      	lsls	r3, r3, #22
 8002bfa:	0d9b      	lsrs	r3, r3, #22
 8002bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d78 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	e006      	b.n	8002c10 <HAL_I2C_IsDeviceReady+0x88>
 8002c02:	230a      	movs	r3, #10
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	059b      	lsls	r3, r3, #22
 8002c0a:	0d9b      	lsrs	r3, r3, #22
 8002c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8002d7c <HAL_I2C_IsDeviceReady+0x1f4>)
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fe07 	bl	8001828 <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	3b20      	subs	r3, #32
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	4153      	adcs	r3, r2
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	231f      	movs	r3, #31
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	3b10      	subs	r3, #16
 8002c42:	425a      	negs	r2, r3
 8002c44:	4153      	adcs	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	231e      	movs	r3, #30
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c4e:	e035      	b.n	8002cbc <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	d01a      	beq.n	8002c8c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe fde7 	bl	8001828 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <HAL_I2C_IsDeviceReady+0xe4>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2241      	movs	r2, #65	@ 0x41
 8002c70:	2120      	movs	r1, #32
 8002c72:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c78:	2220      	movs	r2, #32
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	@ 0x40
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e071      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2220      	movs	r2, #32
 8002c94:	4013      	ands	r3, r2
 8002c96:	3b20      	subs	r3, #32
 8002c98:	425a      	negs	r2, r3
 8002c9a:	4153      	adcs	r3, r2
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2210      	movs	r2, #16
 8002cac:	4013      	ands	r3, r2
 8002cae:	3b10      	subs	r3, #16
 8002cb0:	425a      	negs	r2, r3
 8002cb2:	4153      	adcs	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	231e      	movs	r3, #30
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cbc:	231f      	movs	r3, #31
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_I2C_IsDeviceReady+0x148>
 8002cc6:	231e      	movs	r3, #30
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0bf      	beq.n	8002c50 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d01a      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2120      	movs	r1, #32
 8002cec:	f001 fc6e 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e03b      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2241      	movs	r2, #65	@ 0x41
 8002d04:	2120      	movs	r1, #32
 8002d06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	@ 0x40
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e02d      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2120      	movs	r1, #32
 8002d22:	f001 fc53 	bl	80045cc <I2C_WaitOnFlagUntilTimeout>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d900      	bls.n	8002d4e <HAL_I2C_IsDeviceReady+0x1c6>
 8002d4c:	e74d      	b.n	8002bea <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2241      	movs	r2, #65	@ 0x41
 8002d52:	2120      	movs	r1, #32
 8002d54:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2240      	movs	r2, #64	@ 0x40
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b008      	add	sp, #32
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	02002000 	.word	0x02002000
 8002d7c:	02002800 	.word	0x02002800

08002d80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
  }
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2280      	movs	r2, #128	@ 0x80
 8002dda:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ddc:	d00a      	beq.n	8002df4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	2201      	movs	r2, #1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	0052      	lsls	r2, r2, #1
 8002df2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2280      	movs	r2, #128	@ 0x80
 8002e02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e04:	d00a      	beq.n	8002e1c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e2c:	d00a      	beq.n	8002e44 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	2202      	movs	r2, #2
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	220b      	movs	r2, #11
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d005      	beq.n	8002e5e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0011      	movs	r1, r2
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f001 f991 	bl	8004180 <I2C_ITError>
  }
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b006      	add	sp, #24
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b002      	add	sp, #8
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	0008      	movs	r0, r1
 8002ea0:	0011      	movs	r1, r2
 8002ea2:	1cfb      	adds	r3, r7, #3
 8002ea4:	1c02      	adds	r2, r0, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	1c0a      	adds	r2, r1, #0
 8002eac:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2240      	movs	r2, #64	@ 0x40
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <I2C_Master_ISR_IT+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e11d      	b.n	8003162 <I2C_Master_ISR_IT+0x25a>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2240      	movs	r2, #64	@ 0x40
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2210      	movs	r2, #16
 8002f32:	4013      	ands	r3, r2
 8002f34:	d012      	beq.n	8002f5c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f3c:	d00e      	beq.n	8002f5c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2210      	movs	r2, #16
 8002f44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 fa3e 	bl	80043d6 <I2C_Flush_TXDR>
 8002f5a:	e0ef      	b.n	800313c <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	4013      	ands	r3, r2
 8002f62:	d021      	beq.n	8002fa8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2204      	movs	r2, #4
 8002f68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f6a:	d01d      	beq.n	8002fa8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4393      	bics	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa6:	e0c9      	b.n	800313c <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2240      	movs	r2, #64	@ 0x40
 8002fac:	4013      	ands	r3, r2
 8002fae:	d126      	bne.n	8002ffe <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002fb6:	d022      	beq.n	8002ffe <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fbe:	d01e      	beq.n	8002ffe <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d100      	bne.n	8002fcc <I2C_Master_ISR_IT+0xc4>
 8002fca:	e0b7      	b.n	800313c <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8002ffc:	e09e      	b.n	800313c <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	4013      	ands	r3, r2
 8003004:	d100      	bne.n	8003008 <I2C_Master_ISR_IT+0x100>
 8003006:	e069      	b.n	80030dc <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2240      	movs	r2, #64	@ 0x40
 800300c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800300e:	d065      	beq.n	80030dc <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04a      	beq.n	80030b0 <I2C_Master_ISR_IT+0x1a8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d146      	bne.n	80030b0 <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b29a      	uxth	r2, r3
 800302a:	2112      	movs	r1, #18
 800302c:	187b      	adds	r3, r7, r1
 800302e:	0592      	lsls	r2, r2, #22
 8003030:	0d92      	lsrs	r2, r2, #22
 8003032:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2bff      	cmp	r3, #255	@ 0xff
 800303c:	d910      	bls.n	8003060 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	22ff      	movs	r2, #255	@ 0xff
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	b2da      	uxtb	r2, r3
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	045c      	lsls	r4, r3, #17
 800304e:	187b      	adds	r3, r7, r1
 8003050:	8819      	ldrh	r1, [r3, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0023      	movs	r3, r4
 800305a:	f001 fc07 	bl	800486c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	e03c      	b.n	80030da <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <I2C_Master_ISR_IT+0x264>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800307e:	2312      	movs	r3, #18
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	8819      	ldrh	r1, [r3, #0]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	0023      	movs	r3, r4
 800308c:	f001 fbee 	bl	800486c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003090:	e023      	b.n	80030da <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003096:	b2da      	uxtb	r2, r3
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	049c      	lsls	r4, r3, #18
 800309c:	2312      	movs	r3, #18
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	8819      	ldrh	r1, [r3, #0]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	2300      	movs	r3, #0
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	0023      	movs	r3, r4
 80030aa:	f001 fbdf 	bl	800486c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ae:	e014      	b.n	80030da <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	049b      	lsls	r3, r3, #18
 80030ba:	401a      	ands	r2, r3
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	049b      	lsls	r3, r3, #18
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d004      	beq.n	80030ce <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fd06 	bl	8003ad8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030cc:	e036      	b.n	800313c <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2140      	movs	r1, #64	@ 0x40
 80030d2:	0018      	movs	r0, r3
 80030d4:	f001 f854 	bl	8004180 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030d8:	e030      	b.n	800313c <I2C_Master_ISR_IT+0x234>
 80030da:	e02f      	b.n	800313c <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2240      	movs	r2, #64	@ 0x40
 80030e0:	4013      	ands	r3, r2
 80030e2:	d02b      	beq.n	800313c <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80030ea:	d027      	beq.n	800313c <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	049b      	lsls	r3, r3, #18
 8003100:	401a      	ands	r2, r3
 8003102:	2380      	movs	r3, #128	@ 0x80
 8003104:	049b      	lsls	r3, r3, #18
 8003106:	429a      	cmp	r2, r3
 8003108:	d018      	beq.n	800313c <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	4a17      	ldr	r2, [pc, #92]	@ (800316c <I2C_Master_ISR_IT+0x264>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d109      	bne.n	8003128 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2180      	movs	r1, #128	@ 0x80
 8003120:	01c9      	lsls	r1, r1, #7
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e009      	b.n	800313c <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	0018      	movs	r0, r3
 800312c:	f000 fcd4 	bl	8003ad8 <I2C_ITMasterSeqCplt>
 8003130:	e004      	b.n	800313c <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2140      	movs	r1, #64	@ 0x40
 8003136:	0018      	movs	r0, r3
 8003138:	f001 f822 	bl	8004180 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800314a:	d005      	beq.n	8003158 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fd66 	bl	8003c24 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2240      	movs	r2, #64	@ 0x40
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b007      	add	sp, #28
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	ffff0000 	.word	0xffff0000

08003170 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2240      	movs	r2, #64	@ 0x40
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <I2C_Slave_ISR_IT+0x24>
 8003190:	2302      	movs	r3, #2
 8003192:	e0e7      	b.n	8003364 <I2C_Slave_ISR_IT+0x1f4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00a      	beq.n	80031ba <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031aa:	d006      	beq.n	80031ba <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 fe04 	bl	8003dc0 <I2C_ITSlaveCplt>
 80031b8:	e0cf      	b.n	800335a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d052      	beq.n	8003268 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2210      	movs	r2, #16
 80031c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031c8:	d04e      	beq.n	8003268 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d12d      	bne.n	8003230 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2241      	movs	r2, #65	@ 0x41
 80031d8:	5c9b      	ldrb	r3, [r3, r2]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b28      	cmp	r3, #40	@ 0x28
 80031de:	d10b      	bne.n	80031f8 <I2C_Slave_ISR_IT+0x88>
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	049b      	lsls	r3, r3, #18
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d106      	bne.n	80031f8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0011      	movs	r1, r2
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 ff6d 	bl	80040d0 <I2C_ITListenCplt>
 80031f6:	e036      	b.n	8003266 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2241      	movs	r2, #65	@ 0x41
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b29      	cmp	r3, #41	@ 0x29
 8003202:	d110      	bne.n	8003226 <I2C_Slave_ISR_IT+0xb6>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4a59      	ldr	r2, [pc, #356]	@ (800336c <I2C_Slave_ISR_IT+0x1fc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00c      	beq.n	8003226 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2210      	movs	r2, #16
 8003212:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0018      	movs	r0, r3
 8003218:	f001 f8dd 	bl	80043d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 fc9c 	bl	8003b5c <I2C_ITSlaveSeqCplt>
 8003224:	e01f      	b.n	8003266 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2210      	movs	r2, #16
 800322c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800322e:	e091      	b.n	8003354 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2210      	movs	r2, #16
 8003236:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	2204      	movs	r2, #4
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <I2C_Slave_ISR_IT+0xe6>
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	045b      	lsls	r3, r3, #17
 8003250:	429a      	cmp	r2, r3
 8003252:	d000      	beq.n	8003256 <I2C_Slave_ISR_IT+0xe6>
 8003254:	e07e      	b.n	8003354 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 ff8e 	bl	8004180 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003264:	e076      	b.n	8003354 <I2C_Slave_ISR_IT+0x1e4>
 8003266:	e075      	b.n	8003354 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2204      	movs	r2, #4
 800326c:	4013      	ands	r3, r2
 800326e:	d02f      	beq.n	80032d0 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2204      	movs	r2, #4
 8003274:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003276:	d02b      	beq.n	80032d0 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d14c      	bne.n	8003358 <I2C_Slave_ISR_IT+0x1e8>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <I2C_Slave_ISR_IT+0x1fc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d048      	beq.n	8003358 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fc47 	bl	8003b5c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032ce:	e043      	b.n	8003358 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2208      	movs	r2, #8
 80032d4:	4013      	ands	r3, r2
 80032d6:	d00a      	beq.n	80032ee <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2208      	movs	r2, #8
 80032dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032de:	d006      	beq.n	80032ee <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0011      	movs	r1, r2
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fb52 	bl	8003990 <I2C_ITAddrCplt>
 80032ec:	e035      	b.n	800335a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2202      	movs	r2, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d031      	beq.n	800335a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032fc:	d02d      	beq.n	800335a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d018      	beq.n	800333a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003338:	e00f      	b.n	800335a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	045b      	lsls	r3, r3, #17
 8003340:	429a      	cmp	r2, r3
 8003342:	d002      	beq.n	800334a <I2C_Slave_ISR_IT+0x1da>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 fc05 	bl	8003b5c <I2C_ITSlaveSeqCplt>
 8003352:	e002      	b.n	800335a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	e000      	b.n	800335a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003358:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2240      	movs	r2, #64	@ 0x40
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b006      	add	sp, #24
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ffff0000 	.word	0xffff0000

08003370 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b089      	sub	sp, #36	@ 0x24
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	@ 0x40
 8003380:	5c9b      	ldrb	r3, [r3, r2]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <I2C_Master_ISR_DMA+0x1a>
 8003386:	2302      	movs	r3, #2
 8003388:	e0e7      	b.n	800355a <I2C_Master_ISR_DMA+0x1ea>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2240      	movs	r2, #64	@ 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2210      	movs	r2, #16
 8003396:	4013      	ands	r3, r2
 8003398:	d017      	beq.n	80033ca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2210      	movs	r2, #16
 800339e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033a0:	d013      	beq.n	80033ca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2210      	movs	r2, #16
 80033a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	2204      	movs	r2, #4
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2120      	movs	r1, #32
 80033ba:	0018      	movs	r0, r3
 80033bc:	f001 fa90 	bl	80048e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f001 f807 	bl	80043d6 <I2C_Flush_TXDR>
 80033c8:	e0c2      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2280      	movs	r2, #128	@ 0x80
 80033ce:	4013      	ands	r3, r2
 80033d0:	d100      	bne.n	80033d4 <I2C_Master_ISR_DMA+0x64>
 80033d2:	e07c      	b.n	80034ce <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	@ 0x40
 80033d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033da:	d100      	bne.n	80033de <I2C_Master_ISR_DMA+0x6e>
 80033dc:	e077      	b.n	80034ce <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2140      	movs	r1, #64	@ 0x40
 80033ea:	438a      	bics	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d055      	beq.n	80034a4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	2312      	movs	r3, #18
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	0592      	lsls	r2, r2, #22
 8003406:	0d92      	lsrs	r2, r2, #22
 8003408:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2bff      	cmp	r3, #255	@ 0xff
 8003412:	d906      	bls.n	8003422 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	22ff      	movs	r2, #255	@ 0xff
 8003418:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	045b      	lsls	r3, r3, #17
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e010      	b.n	8003444 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	4a4c      	ldr	r2, [pc, #304]	@ (8003564 <I2C_Master_ISR_DMA+0x1f4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e002      	b.n	8003444 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	049b      	lsls	r3, r3, #18
 8003442:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	b2da      	uxtb	r2, r3
 800344a:	697c      	ldr	r4, [r7, #20]
 800344c:	2312      	movs	r3, #18
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	8819      	ldrh	r1, [r3, #0]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	2300      	movs	r3, #0
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	0023      	movs	r3, r4
 800345a:	f001 fa07 	bl	800486c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2241      	movs	r2, #65	@ 0x41
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b22      	cmp	r3, #34	@ 0x22
 800347a:	d109      	bne.n	8003490 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2180      	movs	r1, #128	@ 0x80
 8003488:	0209      	lsls	r1, r1, #8
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800348e:	e05f      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2180      	movs	r1, #128	@ 0x80
 800349c:	01c9      	lsls	r1, r1, #7
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034a2:	e055      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	049b      	lsls	r3, r3, #18
 80034ae:	401a      	ands	r2, r3
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	049b      	lsls	r3, r3, #18
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d004      	beq.n	80034c2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fb0c 	bl	8003ad8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80034c0:	e046      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2140      	movs	r1, #64	@ 0x40
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fe5a 	bl	8004180 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80034cc:	e040      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2240      	movs	r2, #64	@ 0x40
 80034d2:	4013      	ands	r3, r2
 80034d4:	d02c      	beq.n	8003530 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2240      	movs	r2, #64	@ 0x40
 80034da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034dc:	d028      	beq.n	8003530 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11d      	bne.n	8003524 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	049b      	lsls	r3, r3, #18
 80034f2:	401a      	ands	r2, r3
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	049b      	lsls	r3, r3, #18
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d028      	beq.n	800354e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <I2C_Master_ISR_DMA+0x1f4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d109      	bne.n	800351a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	01c9      	lsls	r1, r1, #7
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003518:	e019      	b.n	800354e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fadb 	bl	8003ad8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003522:	e014      	b.n	800354e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2140      	movs	r1, #64	@ 0x40
 8003528:	0018      	movs	r0, r3
 800352a:	f000 fe29 	bl	8004180 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800352e:	e00e      	b.n	800354e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2220      	movs	r2, #32
 8003534:	4013      	ands	r3, r2
 8003536:	d00b      	beq.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800353e:	d007      	beq.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fb6c 	bl	8003c24 <I2C_ITMasterCplt>
 800354c:	e000      	b.n	8003550 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800354e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b007      	add	sp, #28
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	ffff0000 	.word	0xffff0000

08003568 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b089      	sub	sp, #36	@ 0x24
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003574:	4b90      	ldr	r3, [pc, #576]	@ (80037b8 <I2C_Mem_ISR_DMA+0x250>)
 8003576:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2240      	movs	r2, #64	@ 0x40
 800357c:	5c9b      	ldrb	r3, [r3, r2]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <I2C_Mem_ISR_DMA+0x1e>
 8003582:	2302      	movs	r3, #2
 8003584:	e113      	b.n	80037ae <I2C_Mem_ISR_DMA+0x246>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2240      	movs	r2, #64	@ 0x40
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2210      	movs	r2, #16
 8003592:	4013      	ands	r3, r2
 8003594:	d017      	beq.n	80035c6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2210      	movs	r2, #16
 800359a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800359c:	d013      	beq.n	80035c6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	2204      	movs	r2, #4
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2120      	movs	r1, #32
 80035b6:	0018      	movs	r0, r3
 80035b8:	f001 f992 	bl	80048e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 ff09 	bl	80043d6 <I2C_Flush_TXDR>
 80035c4:	e0ee      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2202      	movs	r2, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00d      	beq.n	80035ea <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035d4:	d009      	beq.n	80035ea <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4252      	negs	r2, r2
 80035e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80035e8:	e0dc      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	4013      	ands	r3, r2
 80035f0:	d063      	beq.n	80036ba <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2240      	movs	r2, #64	@ 0x40
 80035f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035f8:	d05f      	beq.n	80036ba <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2101      	movs	r1, #1
 80035fe:	0018      	movs	r0, r3
 8003600:	f001 f9f8 	bl	80049f4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2110      	movs	r1, #16
 8003608:	0018      	movs	r0, r3
 800360a:	f001 f969 	bl	80048e0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d04a      	beq.n	80036ae <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2bff      	cmp	r3, #255	@ 0xff
 8003620:	d910      	bls.n	8003644 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22ff      	movs	r2, #255	@ 0xff
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	b299      	uxth	r1, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	045b      	lsls	r3, r3, #17
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	2400      	movs	r4, #0
 800363c:	9400      	str	r4, [sp, #0]
 800363e:	f001 f915 	bl	800486c <I2C_TransferConfig>
 8003642:	e011      	b.n	8003668 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	b299      	uxth	r1, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	b2da      	uxtb	r2, r3
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	049b      	lsls	r3, r3, #18
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	2400      	movs	r4, #0
 8003662:	9400      	str	r4, [sp, #0]
 8003664:	f001 f902 	bl	800486c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2241      	movs	r2, #65	@ 0x41
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b22      	cmp	r3, #34	@ 0x22
 8003684:	d109      	bne.n	800369a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	0209      	lsls	r1, r1, #8
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003698:	e084      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	01c9      	lsls	r1, r1, #7
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80036ac:	e07a      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2140      	movs	r1, #64	@ 0x40
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fd64 	bl	8004180 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80036b8:	e074      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2240      	movs	r2, #64	@ 0x40
 80036be:	4013      	ands	r3, r2
 80036c0:	d062      	beq.n	8003788 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2240      	movs	r2, #64	@ 0x40
 80036c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80036c8:	d05e      	beq.n	8003788 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2101      	movs	r1, #1
 80036ce:	0018      	movs	r0, r3
 80036d0:	f001 f990 	bl	80049f4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2110      	movs	r1, #16
 80036d8:	0018      	movs	r0, r3
 80036da:	f001 f901 	bl	80048e0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2241      	movs	r2, #65	@ 0x41
 80036e2:	5c9b      	ldrb	r3, [r3, r2]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b22      	cmp	r3, #34	@ 0x22
 80036e8:	d101      	bne.n	80036ee <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80036ea:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <I2C_Mem_ISR_DMA+0x254>)
 80036ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2bff      	cmp	r3, #255	@ 0xff
 80036f6:	d911      	bls.n	800371c <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	22ff      	movs	r2, #255	@ 0xff
 80036fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	b299      	uxth	r1, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	045c      	lsls	r4, r3, #17
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	0023      	movs	r3, r4
 8003716:	f001 f8a9 	bl	800486c <I2C_TransferConfig>
 800371a:	e012      	b.n	8003742 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	b299      	uxth	r1, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	b2da      	uxtb	r2, r3
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	049c      	lsls	r4, r3, #18
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	0023      	movs	r3, r4
 800373e:	f001 f895 	bl	800486c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2241      	movs	r2, #65	@ 0x41
 8003758:	5c9b      	ldrb	r3, [r3, r2]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b22      	cmp	r3, #34	@ 0x22
 800375e:	d109      	bne.n	8003774 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2180      	movs	r1, #128	@ 0x80
 800376c:	0209      	lsls	r1, r1, #8
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003772:	e017      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	01c9      	lsls	r1, r1, #7
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003786:	e00d      	b.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003796:	d005      	beq.n	80037a4 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa40 	bl	8003c24 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b007      	add	sp, #28
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	80002000 	.word	0x80002000
 80037bc:	80002400 	.word	0x80002400

080037c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <I2C_Slave_ISR_DMA+0x24>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0ce      	b.n	8003982 <I2C_Slave_ISR_DMA+0x1c2>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2220      	movs	r2, #32
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00a      	beq.n	800380a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037fa:	d006      	beq.n	800380a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fadc 	bl	8003dc0 <I2C_ITSlaveCplt>
 8003808:	e0b6      	b.n	8003978 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2210      	movs	r2, #16
 800380e:	4013      	ands	r3, r2
 8003810:	d100      	bne.n	8003814 <I2C_Slave_ISR_DMA+0x54>
 8003812:	e0a3      	b.n	800395c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2210      	movs	r2, #16
 8003818:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800381a:	d100      	bne.n	800381e <I2C_Slave_ISR_DMA+0x5e>
 800381c:	e09e      	b.n	800395c <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	01db      	lsls	r3, r3, #7
 8003824:	4013      	ands	r3, r2
 8003826:	d105      	bne.n	8003834 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003830:	d100      	bne.n	8003834 <I2C_Slave_ISR_DMA+0x74>
 8003832:	e08c      	b.n	800394e <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00c      	beq.n	8003856 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	4013      	ands	r3, r2
 8003844:	d007      	beq.n	8003856 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	01db      	lsls	r3, r3, #7
 8003864:	4013      	ands	r3, r2
 8003866:	d007      	beq.n	8003878 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003874:	2301      	movs	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d12d      	bne.n	80038da <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2241      	movs	r2, #65	@ 0x41
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b28      	cmp	r3, #40	@ 0x28
 8003888:	d10b      	bne.n	80038a2 <I2C_Slave_ISR_DMA+0xe2>
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	049b      	lsls	r3, r3, #18
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	0011      	movs	r1, r2
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fc18 	bl	80040d0 <I2C_ITListenCplt>
 80038a0:	e054      	b.n	800394c <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2241      	movs	r2, #65	@ 0x41
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b29      	cmp	r3, #41	@ 0x29
 80038ac:	d110      	bne.n	80038d0 <I2C_Slave_ISR_DMA+0x110>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4a36      	ldr	r2, [pc, #216]	@ (800398c <I2C_Slave_ISR_DMA+0x1cc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00c      	beq.n	80038d0 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 fd88 	bl	80043d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f947 	bl	8003b5c <I2C_ITSlaveSeqCplt>
 80038ce:	e03d      	b.n	800394c <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80038d8:	e03e      	b.n	8003958 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	2204      	movs	r2, #4
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80038ee:	2317      	movs	r3, #23
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	2141      	movs	r1, #65	@ 0x41
 80038f6:	5c52      	ldrb	r2, [r2, r1]
 80038f8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <I2C_Slave_ISR_DMA+0x14a>
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	045b      	lsls	r3, r3, #17
 8003906:	429a      	cmp	r2, r3
 8003908:	d126      	bne.n	8003958 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390a:	2217      	movs	r2, #23
 800390c:	18bb      	adds	r3, r7, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b21      	cmp	r3, #33	@ 0x21
 8003912:	d003      	beq.n	800391c <I2C_Slave_ISR_DMA+0x15c>
 8003914:	18bb      	adds	r3, r7, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b29      	cmp	r3, #41	@ 0x29
 800391a:	d103      	bne.n	8003924 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2221      	movs	r2, #33	@ 0x21
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
 8003922:	e00b      	b.n	800393c <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003924:	2217      	movs	r2, #23
 8003926:	18bb      	adds	r3, r7, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b22      	cmp	r3, #34	@ 0x22
 800392c:	d003      	beq.n	8003936 <I2C_Slave_ISR_DMA+0x176>
 800392e:	18bb      	adds	r3, r7, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b2a      	cmp	r3, #42	@ 0x2a
 8003934:	d102      	bne.n	800393c <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2222      	movs	r2, #34	@ 0x22
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	0011      	movs	r1, r2
 8003944:	0018      	movs	r0, r3
 8003946:	f000 fc1b 	bl	8004180 <I2C_ITError>
      if (treatdmanack == 1U)
 800394a:	e005      	b.n	8003958 <I2C_Slave_ISR_DMA+0x198>
 800394c:	e004      	b.n	8003958 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2210      	movs	r2, #16
 8003954:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003956:	e00f      	b.n	8003978 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8003958:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800395a:	e00d      	b.n	8003978 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2208      	movs	r2, #8
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2208      	movs	r2, #8
 8003968:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800396a:	d005      	beq.n	8003978 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	0011      	movs	r1, r2
 8003972:	0018      	movs	r0, r3
 8003974:	f000 f80c 	bl	8003990 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b008      	add	sp, #32
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	ffff0000 	.word	0xffff0000

08003990 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2241      	movs	r2, #65	@ 0x41
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	001a      	movs	r2, r3
 80039a4:	2328      	movs	r3, #40	@ 0x28
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b28      	cmp	r3, #40	@ 0x28
 80039aa:	d000      	beq.n	80039ae <I2C_ITAddrCplt+0x1e>
 80039ac:	e088      	b.n	8003ac0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	250f      	movs	r5, #15
 80039ba:	197b      	adds	r3, r7, r5
 80039bc:	2101      	movs	r1, #1
 80039be:	400a      	ands	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	200c      	movs	r0, #12
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	21fe      	movs	r1, #254	@ 0xfe
 80039d2:	400a      	ands	r2, r1
 80039d4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	240a      	movs	r4, #10
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	0592      	lsls	r2, r2, #22
 80039e4:	0d92      	lsrs	r2, r2, #22
 80039e6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	2308      	movs	r3, #8
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	21fe      	movs	r1, #254	@ 0xfe
 80039f6:	400a      	ands	r2, r1
 80039f8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d148      	bne.n	8003a94 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a02:	0021      	movs	r1, r4
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	09db      	lsrs	r3, r3, #7
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	4053      	eors	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	001a      	movs	r2, r3
 8003a16:	2306      	movs	r3, #6
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d120      	bne.n	8003a5e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003a1c:	183b      	adds	r3, r7, r0
 8003a1e:	187a      	adds	r2, r7, r1
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d14c      	bne.n	8003ad0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2208      	movs	r2, #8
 8003a42:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	881a      	ldrh	r2, [r3, #0]
 8003a50:	197b      	adds	r3, r7, r5
 8003a52:	7819      	ldrb	r1, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff fa1d 	bl	8002e96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a5c:	e038      	b.n	8003ad0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003a5e:	240c      	movs	r4, #12
 8003a60:	193b      	adds	r3, r7, r4
 8003a62:	2208      	movs	r2, #8
 8003a64:	18ba      	adds	r2, r7, r2
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 ffbe 	bl	80049f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	@ 0x40
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	230f      	movs	r3, #15
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	7819      	ldrb	r1, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff fa02 	bl	8002e96 <HAL_I2C_AddrCallback>
}
 8003a92:	e01d      	b.n	8003ad0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 ffa9 	bl	80049f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2240      	movs	r2, #64	@ 0x40
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003aaa:	230c      	movs	r3, #12
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	7819      	ldrb	r1, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff f9ec 	bl	8002e96 <HAL_I2C_AddrCallback>
}
 8003abe:	e007      	b.n	8003ad0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2240      	movs	r2, #64	@ 0x40
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b004      	add	sp, #16
 8003ad6:	bdb0      	pop	{r4, r5, r7, pc}

08003ad8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2242      	movs	r2, #66	@ 0x42
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2241      	movs	r2, #65	@ 0x41
 8003aec:	5c9b      	ldrb	r3, [r3, r2]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b21      	cmp	r3, #33	@ 0x21
 8003af2:	d117      	bne.n	8003b24 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2241      	movs	r2, #65	@ 0x41
 8003af8:	2120      	movs	r1, #32
 8003afa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2211      	movs	r2, #17
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 ff71 	bl	80049f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2240      	movs	r2, #64	@ 0x40
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff f9a2 	bl	8002e66 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b22:	e016      	b.n	8003b52 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2241      	movs	r2, #65	@ 0x41
 8003b28:	2120      	movs	r1, #32
 8003b2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2212      	movs	r2, #18
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 ff59 	bl	80049f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2240      	movs	r2, #64	@ 0x40
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff f992 	bl	8002e76 <HAL_I2C_MasterRxCpltCallback>
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b002      	add	sp, #8
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2242      	movs	r2, #66	@ 0x42
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d008      	beq.n	8003b90 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4924      	ldr	r1, [pc, #144]	@ (8003c1c <I2C_ITSlaveSeqCplt+0xc0>)
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e00c      	b.n	8003baa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	4013      	ands	r3, r2
 8003b98:	d007      	beq.n	8003baa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	491e      	ldr	r1, [pc, #120]	@ (8003c20 <I2C_ITSlaveSeqCplt+0xc4>)
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2241      	movs	r2, #65	@ 0x41
 8003bae:	5c9b      	ldrb	r3, [r3, r2]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b29      	cmp	r3, #41	@ 0x29
 8003bb4:	d114      	bne.n	8003be0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2241      	movs	r2, #65	@ 0x41
 8003bba:	2128      	movs	r1, #40	@ 0x28
 8003bbc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2221      	movs	r2, #33	@ 0x21
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 ff13 	bl	80049f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2240      	movs	r2, #64	@ 0x40
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff f954 	bl	8002e86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bde:	e019      	b.n	8003c14 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2241      	movs	r2, #65	@ 0x41
 8003be4:	5c9b      	ldrb	r3, [r3, r2]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bea:	d113      	bne.n	8003c14 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2241      	movs	r2, #65	@ 0x41
 8003bf0:	2128      	movs	r1, #40	@ 0x28
 8003bf2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2222      	movs	r2, #34	@ 0x22
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 fef8 	bl	80049f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2240      	movs	r2, #64	@ 0x40
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7fd fafc 	bl	800120c <HAL_I2C_SlaveRxCpltCallback>
}
 8003c14:	46c0      	nop			@ (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b004      	add	sp, #16
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	ffffbfff 	.word	0xffffbfff
 8003c20:	ffff7fff 	.word	0xffff7fff

08003c24 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2220      	movs	r2, #32
 8003c38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2241      	movs	r2, #65	@ 0x41
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b21      	cmp	r3, #33	@ 0x21
 8003c44:	d108      	bne.n	8003c58 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 fed2 	bl	80049f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2211      	movs	r2, #17
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c56:	e00d      	b.n	8003c74 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2241      	movs	r2, #65	@ 0x41
 8003c5c:	5c9b      	ldrb	r3, [r3, r2]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b22      	cmp	r3, #34	@ 0x22
 8003c62:	d107      	bne.n	8003c74 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2102      	movs	r1, #2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 fec3 	bl	80049f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2212      	movs	r2, #18
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	494e      	ldr	r1, [pc, #312]	@ (8003db8 <I2C_ITMasterCplt+0x194>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003dbc <I2C_ITMasterCplt+0x198>)
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2210      	movs	r2, #16
 8003c94:	4013      	ands	r3, r2
 8003c96:	d009      	beq.n	8003cac <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2241      	movs	r2, #65	@ 0x41
 8003cb0:	5c9b      	ldrb	r3, [r3, r2]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b60      	cmp	r3, #96	@ 0x60
 8003cb6:	d109      	bne.n	8003ccc <I2C_ITMasterCplt+0xa8>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d005      	beq.n	8003ccc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003cca:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 fb81 	bl	80043d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2241      	movs	r2, #65	@ 0x41
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b60      	cmp	r3, #96	@ 0x60
 8003ce4:	d002      	beq.n	8003cec <I2C_ITMasterCplt+0xc8>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fa43 	bl	8004180 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cfa:	e058      	b.n	8003dae <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2241      	movs	r2, #65	@ 0x41
 8003d00:	5c9b      	ldrb	r3, [r3, r2]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b21      	cmp	r3, #33	@ 0x21
 8003d06:	d126      	bne.n	8003d56 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2241      	movs	r2, #65	@ 0x41
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2242      	movs	r2, #66	@ 0x42
 8003d1a:	5c9b      	ldrb	r3, [r3, r2]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d10c      	bne.n	8003d3c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2242      	movs	r2, #66	@ 0x42
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2240      	movs	r2, #64	@ 0x40
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff f8c6 	bl	8002ec6 <HAL_I2C_MemTxCpltCallback>
}
 8003d3a:	e038      	b.n	8003dae <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2242      	movs	r2, #66	@ 0x42
 8003d40:	2100      	movs	r1, #0
 8003d42:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2240      	movs	r2, #64	@ 0x40
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff f889 	bl	8002e66 <HAL_I2C_MasterTxCpltCallback>
}
 8003d54:	e02b      	b.n	8003dae <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2241      	movs	r2, #65	@ 0x41
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b22      	cmp	r3, #34	@ 0x22
 8003d60:	d125      	bne.n	8003dae <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2241      	movs	r2, #65	@ 0x41
 8003d66:	2120      	movs	r1, #32
 8003d68:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2242      	movs	r2, #66	@ 0x42
 8003d74:	5c9b      	ldrb	r3, [r3, r2]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d10c      	bne.n	8003d96 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2242      	movs	r2, #66	@ 0x42
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff f8a1 	bl	8002ed6 <HAL_I2C_MemRxCpltCallback>
}
 8003d94:	e00b      	b.n	8003dae <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2242      	movs	r2, #66	@ 0x42
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2240      	movs	r2, #64	@ 0x40
 8003da2:	2100      	movs	r1, #0
 8003da4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff f864 	bl	8002e76 <HAL_I2C_MasterRxCpltCallback>
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	fe00e800 	.word	0xfe00e800
 8003dbc:	ffff0000 	.word	0xffff0000

08003dc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ddc:	200b      	movs	r0, #11
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	2141      	movs	r1, #65	@ 0x41
 8003de4:	5c52      	ldrb	r2, [r2, r1]
 8003de6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2220      	movs	r2, #32
 8003dee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003df0:	183b      	adds	r3, r7, r0
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b21      	cmp	r3, #33	@ 0x21
 8003df6:	d003      	beq.n	8003e00 <I2C_ITSlaveCplt+0x40>
 8003df8:	183b      	adds	r3, r7, r0
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b29      	cmp	r3, #41	@ 0x29
 8003dfe:	d109      	bne.n	8003e14 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e00:	4aac      	ldr	r2, [pc, #688]	@ (80040b4 <I2C_ITSlaveCplt+0x2f4>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 fdf4 	bl	80049f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2221      	movs	r2, #33	@ 0x21
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e12:	e020      	b.n	8003e56 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e14:	220b      	movs	r2, #11
 8003e16:	18bb      	adds	r3, r7, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b22      	cmp	r3, #34	@ 0x22
 8003e1c:	d003      	beq.n	8003e26 <I2C_ITSlaveCplt+0x66>
 8003e1e:	18bb      	adds	r3, r7, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e24:	d109      	bne.n	8003e3a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e26:	4aa4      	ldr	r2, [pc, #656]	@ (80040b8 <I2C_ITSlaveCplt+0x2f8>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 fde1 	bl	80049f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2222      	movs	r2, #34	@ 0x22
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e38:	e00d      	b.n	8003e56 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003e3a:	230b      	movs	r3, #11
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b28      	cmp	r3, #40	@ 0x28
 8003e42:	d108      	bne.n	8003e56 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e44:	4a9d      	ldr	r2, [pc, #628]	@ (80040bc <I2C_ITSlaveCplt+0x2fc>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 fdd2 	bl	80049f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2180      	movs	r1, #128	@ 0x80
 8003e62:	0209      	lsls	r1, r1, #8
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4993      	ldr	r1, [pc, #588]	@ (80040c0 <I2C_ITSlaveCplt+0x300>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 faab 	bl	80043d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	01db      	lsls	r3, r3, #7
 8003e86:	4013      	ands	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	498b      	ldr	r1, [pc, #556]	@ (80040c4 <I2C_ITSlaveCplt+0x304>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01f      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb0:	e017      	b.n	8003ee2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d012      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4980      	ldr	r1, [pc, #512]	@ (80040c8 <I2C_ITSlaveCplt+0x308>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d020      	beq.n	8003f2c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2204      	movs	r2, #4
 8003eee:	4393      	bics	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	d04f      	beq.n	8003fea <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f50:	d04b      	beq.n	8003fea <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d12d      	bne.n	8003fb8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2241      	movs	r2, #65	@ 0x41
 8003f60:	5c9b      	ldrb	r3, [r3, r2]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b28      	cmp	r3, #40	@ 0x28
 8003f66:	d10b      	bne.n	8003f80 <I2C_ITSlaveCplt+0x1c0>
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	049b      	lsls	r3, r3, #18
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d106      	bne.n	8003f80 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 f8a9 	bl	80040d0 <I2C_ITListenCplt>
 8003f7e:	e034      	b.n	8003fea <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2241      	movs	r2, #65	@ 0x41
 8003f84:	5c9b      	ldrb	r3, [r3, r2]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b29      	cmp	r3, #41	@ 0x29
 8003f8a:	d110      	bne.n	8003fae <I2C_ITSlaveCplt+0x1ee>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a4f      	ldr	r2, [pc, #316]	@ (80040cc <I2C_ITSlaveCplt+0x30c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00c      	beq.n	8003fae <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 fa19 	bl	80043d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fdd8 	bl	8003b5c <I2C_ITSlaveSeqCplt>
 8003fac:	e01d      	b.n	8003fea <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	61da      	str	r2, [r3, #28]
 8003fb6:	e018      	b.n	8003fea <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <I2C_ITSlaveCplt+0x21c>
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	045b      	lsls	r3, r3, #17
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d106      	bne.n	8003fea <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f8cb 	bl	8004180 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2242      	movs	r2, #66	@ 0x42
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0011      	movs	r1, r2
 8004008:	0018      	movs	r0, r3
 800400a:	f000 f8b9 	bl	8004180 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2241      	movs	r2, #65	@ 0x41
 8004012:	5c9b      	ldrb	r3, [r3, r2]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b28      	cmp	r3, #40	@ 0x28
 8004018:	d147      	bne.n	80040aa <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0011      	movs	r1, r2
 8004020:	0018      	movs	r0, r3
 8004022:	f000 f855 	bl	80040d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004026:	e040      	b.n	80040aa <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	4a27      	ldr	r2, [pc, #156]	@ (80040cc <I2C_ITSlaveCplt+0x30c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d016      	beq.n	8004060 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f7ff fd91 	bl	8003b5c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a23      	ldr	r2, [pc, #140]	@ (80040cc <I2C_ITSlaveCplt+0x30c>)
 800403e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2241      	movs	r2, #65	@ 0x41
 8004044:	2120      	movs	r1, #32
 8004046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	2100      	movs	r1, #0
 8004054:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7fe ff2c 	bl	8002eb6 <HAL_I2C_ListenCpltCallback>
}
 800405e:	e024      	b.n	80040aa <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2241      	movs	r2, #65	@ 0x41
 8004064:	5c9b      	ldrb	r3, [r3, r2]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b22      	cmp	r3, #34	@ 0x22
 800406a:	d10f      	bne.n	800408c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2241      	movs	r2, #65	@ 0x41
 8004070:	2120      	movs	r1, #32
 8004072:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f7fd f8c1 	bl	800120c <HAL_I2C_SlaveRxCpltCallback>
}
 800408a:	e00e      	b.n	80040aa <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2241      	movs	r2, #65	@ 0x41
 8004090:	2120      	movs	r1, #32
 8004092:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2240      	movs	r2, #64	@ 0x40
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fe feee 	bl	8002e86 <HAL_I2C_SlaveTxCpltCallback>
}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b006      	add	sp, #24
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	00008001 	.word	0x00008001
 80040b8:	00008002 	.word	0x00008002
 80040bc:	00008003 	.word	0x00008003
 80040c0:	fe00e800 	.word	0xfe00e800
 80040c4:	ffffbfff 	.word	0xffffbfff
 80040c8:	ffff7fff 	.word	0xffff7fff
 80040cc:	ffff0000 	.word	0xffff0000

080040d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <I2C_ITListenCplt+0xa8>)
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2241      	movs	r2, #65	@ 0x41
 80040ea:	2120      	movs	r1, #32
 80040ec:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2242      	movs	r2, #66	@ 0x42
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	d022      	beq.n	800414a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	2204      	movs	r2, #4
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800414a:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <I2C_ITListenCplt+0xac>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fc4f 	bl	80049f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2240      	movs	r2, #64	@ 0x40
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	0018      	movs	r0, r3
 800416a:	f7fe fea4 	bl	8002eb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b002      	add	sp, #8
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	ffff0000 	.word	0xffff0000
 800417c:	00008003 	.word	0x00008003

08004180 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800418a:	200f      	movs	r0, #15
 800418c:	183b      	adds	r3, r7, r0
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	2141      	movs	r1, #65	@ 0x41
 8004192:	5c52      	ldrb	r2, [r2, r1]
 8004194:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2242      	movs	r2, #66	@ 0x42
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a72      	ldr	r2, [pc, #456]	@ (800436c <I2C_ITError+0x1ec>)
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041b6:	183b      	adds	r3, r7, r0
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b28      	cmp	r3, #40	@ 0x28
 80041bc:	d007      	beq.n	80041ce <I2C_ITError+0x4e>
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b29      	cmp	r3, #41	@ 0x29
 80041c4:	d003      	beq.n	80041ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80041cc:	d10c      	bne.n	80041e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2103      	movs	r1, #3
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fc0e 	bl	80049f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2241      	movs	r2, #65	@ 0x41
 80041dc:	2128      	movs	r1, #40	@ 0x28
 80041de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a63      	ldr	r2, [pc, #396]	@ (8004370 <I2C_ITError+0x1f0>)
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80041e6:	e032      	b.n	800424e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041e8:	4a62      	ldr	r2, [pc, #392]	@ (8004374 <I2C_ITError+0x1f4>)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 fc00 	bl	80049f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f8ed 	bl	80043d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2241      	movs	r2, #65	@ 0x41
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d01f      	beq.n	8004248 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2241      	movs	r2, #65	@ 0x41
 800420c:	2120      	movs	r1, #32
 800420e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2220      	movs	r2, #32
 8004218:	4013      	ands	r3, r2
 800421a:	2b20      	cmp	r3, #32
 800421c:	d114      	bne.n	8004248 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2210      	movs	r2, #16
 8004226:	4013      	ands	r3, r2
 8004228:	2b10      	cmp	r3, #16
 800422a:	d109      	bne.n	8004240 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2210      	movs	r2, #16
 8004232:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004238:	2204      	movs	r2, #4
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2220      	movs	r2, #32
 8004246:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03b      	beq.n	80042d4 <I2C_ITError+0x154>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b11      	cmp	r3, #17
 8004260:	d002      	beq.n	8004268 <I2C_ITError+0xe8>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b21      	cmp	r3, #33	@ 0x21
 8004266:	d135      	bne.n	80042d4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	01db      	lsls	r3, r3, #7
 8004272:	401a      	ands	r2, r3
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	493c      	ldr	r1, [pc, #240]	@ (8004378 <I2C_ITError+0x1f8>)
 8004288:	400a      	ands	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	0018      	movs	r0, r3
 8004292:	f7fd fe17 	bl	8001ec4 <HAL_DMA_GetState>
 8004296:	0003      	movs	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d016      	beq.n	80042ca <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	4a36      	ldr	r2, [pc, #216]	@ (800437c <I2C_ITError+0x1fc>)
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fd fceb 	bl	8001c8c <HAL_DMA_Abort_IT>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d051      	beq.n	800435e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	0018      	movs	r0, r3
 80042c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042c8:	e049      	b.n	800435e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f859 	bl	8004384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d2:	e044      	b.n	800435e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d03b      	beq.n	8004354 <I2C_ITError+0x1d4>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b12      	cmp	r3, #18
 80042e0:	d002      	beq.n	80042e8 <I2C_ITError+0x168>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b22      	cmp	r3, #34	@ 0x22
 80042e6:	d135      	bne.n	8004354 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	401a      	ands	r2, r3
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	491e      	ldr	r1, [pc, #120]	@ (8004380 <I2C_ITError+0x200>)
 8004308:	400a      	ands	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	0018      	movs	r0, r3
 8004312:	f7fd fdd7 	bl	8001ec4 <HAL_DMA_GetState>
 8004316:	0003      	movs	r3, r0
 8004318:	2b01      	cmp	r3, #1
 800431a:	d016      	beq.n	800434a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <I2C_ITError+0x1fc>)
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2240      	movs	r2, #64	@ 0x40
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	0018      	movs	r0, r3
 8004332:	f7fd fcab 	bl	8001c8c <HAL_DMA_Abort_IT>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d013      	beq.n	8004362 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	0018      	movs	r0, r3
 8004346:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004348:	e00b      	b.n	8004362 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f819 	bl	8004384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004352:	e006      	b.n	8004362 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	0018      	movs	r0, r3
 8004358:	f000 f814 	bl	8004384 <I2C_TreatErrorCallback>
  }
}
 800435c:	e002      	b.n	8004364 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	e000      	b.n	8004364 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004362:	46c0      	nop			@ (mov r8, r8)
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	ffff0000 	.word	0xffff0000
 8004370:	08003171 	.word	0x08003171
 8004374:	00008003 	.word	0x00008003
 8004378:	ffffbfff 	.word	0xffffbfff
 800437c:	0800458f 	.word	0x0800458f
 8004380:	ffff7fff 	.word	0xffff7fff

08004384 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2241      	movs	r2, #65	@ 0x41
 8004390:	5c9b      	ldrb	r3, [r3, r2]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b60      	cmp	r3, #96	@ 0x60
 8004396:	d10f      	bne.n	80043b8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2241      	movs	r2, #65	@ 0x41
 800439c:	2120      	movs	r1, #32
 800439e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2240      	movs	r2, #64	@ 0x40
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fe fda0 	bl	8002ef6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043b6:	e00a      	b.n	80043ce <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2240      	movs	r2, #64	@ 0x40
 80043c2:	2100      	movs	r1, #0
 80043c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7fe fd8c 	bl	8002ee6 <HAL_I2C_ErrorCallback>
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b002      	add	sp, #8
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d103      	bne.n	80043f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2201      	movs	r2, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d007      	beq.n	8004412 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	619a      	str	r2, [r3, #24]
  }
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4920      	ldr	r1, [pc, #128]	@ (80044b8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8004436:	400a      	ands	r2, r1
 8004438:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2120      	movs	r1, #32
 8004448:	0018      	movs	r0, r3
 800444a:	f000 fa49 	bl	80048e0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800444e:	e02e      	b.n	80044ae <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004458:	189a      	adds	r2, r3, r2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2bff      	cmp	r3, #255	@ 0xff
 8004466:	d903      	bls.n	8004470 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	22ff      	movs	r2, #255	@ 0xff
 800446c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800446e:	e004      	b.n	800447a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	0019      	movs	r1, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3328      	adds	r3, #40	@ 0x28
 800448a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004490:	f7fd fb76 	bl	8001b80 <HAL_DMA_Start_IT>
 8004494:	1e03      	subs	r3, r0, #0
 8004496:	d005      	beq.n	80044a4 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2110      	movs	r1, #16
 800449c:	0018      	movs	r0, r3
 800449e:	f7ff fe6f 	bl	8004180 <I2C_ITError>
}
 80044a2:	e004      	b.n	80044ae <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2140      	movs	r1, #64	@ 0x40
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fa19 	bl	80048e0 <I2C_Enable_IRQ>
}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	ffffbfff 	.word	0xffffbfff

080044bc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4920      	ldr	r1, [pc, #128]	@ (8004558 <I2C_DMAMasterReceiveCplt+0x9c>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2120      	movs	r1, #32
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 f9f9 	bl	80048e0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80044ee:	e02e      	b.n	800454e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80044f8:	189a      	adds	r2, r3, r2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2bff      	cmp	r3, #255	@ 0xff
 8004506:	d903      	bls.n	8004510 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	22ff      	movs	r2, #255	@ 0xff
 800450c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800450e:	e004      	b.n	800451a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3324      	adds	r3, #36	@ 0x24
 8004524:	0019      	movs	r1, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004530:	f7fd fb26 	bl	8001b80 <HAL_DMA_Start_IT>
 8004534:	1e03      	subs	r3, r0, #0
 8004536:	d005      	beq.n	8004544 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2110      	movs	r1, #16
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fe1f 	bl	8004180 <I2C_ITError>
}
 8004542:	e004      	b.n	800454e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2140      	movs	r1, #64	@ 0x40
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f9c9 	bl	80048e0 <I2C_Enable_IRQ>
}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b004      	add	sp, #16
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	ffff7fff 	.word	0xffff7fff

0800455c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2180      	movs	r1, #128	@ 0x80
 8004576:	0209      	lsls	r1, r1, #8
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2110      	movs	r1, #16
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff fdfd 	bl	8004180 <I2C_ITError>
}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	b004      	add	sp, #16
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff fee0 	bl	8004384 <I2C_TreatErrorCallback>
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045dc:	e03a      	b.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 f849 	bl	800467c <I2C_IsErrorOccurred>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e040      	b.n	8004674 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d02d      	beq.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f8:	f7fd f916 	bl	8001828 <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d122      	bne.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	425a      	negs	r2, r3
 800461e:	4153      	adcs	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	001a      	movs	r2, r3
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d113      	bne.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	2220      	movs	r2, #32
 8004632:	431a      	orrs	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2241      	movs	r2, #65	@ 0x41
 800463c:	2120      	movs	r1, #32
 800463e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2242      	movs	r2, #66	@ 0x42
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2240      	movs	r2, #64	@ 0x40
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e00f      	b.n	8004674 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	425a      	negs	r2, r3
 8004664:	4153      	adcs	r3, r2
 8004666:	b2db      	uxtb	r3, r3
 8004668:	001a      	movs	r2, r3
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d0b5      	beq.n	80045de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b004      	add	sp, #16
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2327      	movs	r3, #39	@ 0x27
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2210      	movs	r2, #16
 80046a4:	4013      	ands	r3, r2
 80046a6:	d100      	bne.n	80046aa <I2C_IsErrorOccurred+0x2e>
 80046a8:	e079      	b.n	800479e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b2:	e057      	b.n	8004764 <I2C_IsErrorOccurred+0xe8>
 80046b4:	2227      	movs	r2, #39	@ 0x27
 80046b6:	18bb      	adds	r3, r7, r2
 80046b8:	18ba      	adds	r2, r7, r2
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3301      	adds	r3, #1
 80046c2:	d04f      	beq.n	8004764 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046c4:	f7fd f8b0 	bl	8001828 <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d302      	bcc.n	80046da <I2C_IsErrorOccurred+0x5e>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d144      	bne.n	8004764 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	2380      	movs	r3, #128	@ 0x80
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4013      	ands	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046e8:	2013      	movs	r0, #19
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	2142      	movs	r1, #66	@ 0x42
 80046f0:	5c52      	ldrb	r2, [r2, r1]
 80046f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	401a      	ands	r2, r3
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	429a      	cmp	r2, r3
 8004706:	d126      	bne.n	8004756 <I2C_IsErrorOccurred+0xda>
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	2380      	movs	r3, #128	@ 0x80
 800470c:	01db      	lsls	r3, r3, #7
 800470e:	429a      	cmp	r2, r3
 8004710:	d021      	beq.n	8004756 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004712:	183b      	adds	r3, r7, r0
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b20      	cmp	r3, #32
 8004718:	d01d      	beq.n	8004756 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2180      	movs	r1, #128	@ 0x80
 8004726:	01c9      	lsls	r1, r1, #7
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800472c:	f7fd f87c 	bl	8001828 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004734:	e00f      	b.n	8004756 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004736:	f7fd f877 	bl	8001828 <HAL_GetTick>
 800473a:	0002      	movs	r2, r0
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b19      	cmp	r3, #25
 8004742:	d908      	bls.n	8004756 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2220      	movs	r2, #32
 8004748:	4313      	orrs	r3, r2
 800474a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800474c:	2327      	movs	r3, #39	@ 0x27
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]

              break;
 8004754:	e006      	b.n	8004764 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2220      	movs	r2, #32
 800475e:	4013      	ands	r3, r2
 8004760:	2b20      	cmp	r3, #32
 8004762:	d1e8      	bne.n	8004736 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2220      	movs	r2, #32
 800476c:	4013      	ands	r3, r2
 800476e:	2b20      	cmp	r3, #32
 8004770:	d004      	beq.n	800477c <I2C_IsErrorOccurred+0x100>
 8004772:	2327      	movs	r3, #39	@ 0x27
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d09b      	beq.n	80046b4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800477c:	2327      	movs	r3, #39	@ 0x27
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2220      	movs	r2, #32
 800478c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2204      	movs	r2, #4
 8004792:	4313      	orrs	r3, r2
 8004794:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004796:	2327      	movs	r3, #39	@ 0x27
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	2380      	movs	r3, #128	@ 0x80
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d00c      	beq.n	80047ca <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2280      	movs	r2, #128	@ 0x80
 80047be:	0052      	lsls	r2, r2, #1
 80047c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c2:	2327      	movs	r3, #39	@ 0x27
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4013      	ands	r3, r2
 80047d2:	d00c      	beq.n	80047ee <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2208      	movs	r2, #8
 80047d8:	4313      	orrs	r3, r2
 80047da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	00d2      	lsls	r2, r2, #3
 80047e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047e6:	2327      	movs	r3, #39	@ 0x27
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	d00c      	beq.n	8004812 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2202      	movs	r2, #2
 80047fc:	4313      	orrs	r3, r2
 80047fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2280      	movs	r2, #128	@ 0x80
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800480a:	2327      	movs	r3, #39	@ 0x27
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004812:	2327      	movs	r3, #39	@ 0x27
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01d      	beq.n	8004858 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0018      	movs	r0, r3
 8004820:	f7ff fdd9 	bl	80043d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	490e      	ldr	r1, [pc, #56]	@ (8004868 <I2C_IsErrorOccurred+0x1ec>)
 8004830:	400a      	ands	r2, r1
 8004832:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	431a      	orrs	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2241      	movs	r2, #65	@ 0x41
 8004844:	2120      	movs	r1, #32
 8004846:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2242      	movs	r2, #66	@ 0x42
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2240      	movs	r2, #64	@ 0x40
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004858:	2327      	movs	r3, #39	@ 0x27
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	781b      	ldrb	r3, [r3, #0]
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b00a      	add	sp, #40	@ 0x28
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	fe00e800 	.word	0xfe00e800

0800486c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	0008      	movs	r0, r1
 8004876:	0011      	movs	r1, r2
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	240a      	movs	r4, #10
 800487c:	193b      	adds	r3, r7, r4
 800487e:	1c02      	adds	r2, r0, #0
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	2009      	movs	r0, #9
 8004884:	183b      	adds	r3, r7, r0
 8004886:	1c0a      	adds	r2, r1, #0
 8004888:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800488a:	193b      	adds	r3, r7, r4
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	059b      	lsls	r3, r3, #22
 8004890:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004892:	183b      	adds	r3, r7, r0
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	0419      	lsls	r1, r3, #16
 8004898:	23ff      	movs	r3, #255	@ 0xff
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800489e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	4313      	orrs	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b6:	0d51      	lsrs	r1, r2, #21
 80048b8:	2280      	movs	r2, #128	@ 0x80
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	400a      	ands	r2, r1
 80048be:	4907      	ldr	r1, [pc, #28]	@ (80048dc <I2C_TransferConfig+0x70>)
 80048c0:	430a      	orrs	r2, r1
 80048c2:	43d2      	mvns	r2, r2
 80048c4:	401a      	ands	r2, r3
 80048c6:	0011      	movs	r1, r2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b007      	add	sp, #28
 80048d8:	bd90      	pop	{r4, r7, pc}
 80048da:	46c0      	nop			@ (mov r8, r8)
 80048dc:	03ff63ff 	.word	0x03ff63ff

080048e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	000a      	movs	r2, r1
 80048ea:	1cbb      	adds	r3, r7, #2
 80048ec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048f6:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <I2C_Enable_IRQ+0x108>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d035      	beq.n	8004968 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004900:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <I2C_Enable_IRQ+0x10c>)
 8004902:	429a      	cmp	r2, r3
 8004904:	d030      	beq.n	8004968 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <I2C_Enable_IRQ+0x110>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d02b      	beq.n	8004968 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004910:	1cbb      	adds	r3, r7, #2
 8004912:	2200      	movs	r2, #0
 8004914:	5e9b      	ldrsh	r3, [r3, r2]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da03      	bge.n	8004922 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	22b8      	movs	r2, #184	@ 0xb8
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004922:	1cbb      	adds	r3, r7, #2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	4013      	ands	r3, r2
 800492a:	d003      	beq.n	8004934 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22f2      	movs	r2, #242	@ 0xf2
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004934:	1cbb      	adds	r3, r7, #2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	2202      	movs	r2, #2
 800493a:	4013      	ands	r3, r2
 800493c:	d003      	beq.n	8004946 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	22f4      	movs	r2, #244	@ 0xf4
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004946:	1cbb      	adds	r3, r7, #2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	2b10      	cmp	r3, #16
 800494c:	d103      	bne.n	8004956 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2290      	movs	r2, #144	@ 0x90
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004956:	1cbb      	adds	r3, r7, #2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d137      	bne.n	80049ce <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004966:	e032      	b.n	80049ce <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004968:	1cbb      	adds	r3, r7, #2
 800496a:	2200      	movs	r2, #0
 800496c:	5e9b      	ldrsh	r3, [r3, r2]
 800496e:	2b00      	cmp	r3, #0
 8004970:	da03      	bge.n	800497a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22b8      	movs	r2, #184	@ 0xb8
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2201      	movs	r2, #1
 8004980:	4013      	ands	r3, r2
 8004982:	d003      	beq.n	800498c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	22f2      	movs	r2, #242	@ 0xf2
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800498c:	1cbb      	adds	r3, r7, #2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	2202      	movs	r2, #2
 8004992:	4013      	ands	r3, r2
 8004994:	d003      	beq.n	800499e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22f4      	movs	r2, #244	@ 0xf4
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800499e:	1cbb      	adds	r3, r7, #2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d103      	bne.n	80049ae <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2290      	movs	r2, #144	@ 0x90
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049ae:	1cbb      	adds	r3, r7, #2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d103      	bne.n	80049be <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2260      	movs	r2, #96	@ 0x60
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049be:	1cbb      	adds	r3, r7, #2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d103      	bne.n	80049ce <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2240      	movs	r2, #64	@ 0x40
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b004      	add	sp, #16
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	08003371 	.word	0x08003371
 80049ec:	080037c1 	.word	0x080037c1
 80049f0:	08003569 	.word	0x08003569

080049f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	000a      	movs	r2, r1
 80049fe:	1cbb      	adds	r3, r7, #2
 8004a00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a06:	1cbb      	adds	r3, r7, #2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d010      	beq.n	8004a32 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2242      	movs	r2, #66	@ 0x42
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2241      	movs	r2, #65	@ 0x41
 8004a1c:	5c9b      	ldrb	r3, [r3, r2]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	001a      	movs	r2, r3
 8004a22:	2328      	movs	r3, #40	@ 0x28
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b28      	cmp	r3, #40	@ 0x28
 8004a28:	d003      	beq.n	8004a32 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22b0      	movs	r2, #176	@ 0xb0
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a32:	1cbb      	adds	r3, r7, #2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d010      	beq.n	8004a5e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2244      	movs	r2, #68	@ 0x44
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2241      	movs	r2, #65	@ 0x41
 8004a48:	5c9b      	ldrb	r3, [r3, r2]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	2328      	movs	r3, #40	@ 0x28
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b28      	cmp	r3, #40	@ 0x28
 8004a54:	d003      	beq.n	8004a5e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	22b0      	movs	r2, #176	@ 0xb0
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a5e:	1cbb      	adds	r3, r7, #2
 8004a60:	2200      	movs	r2, #0
 8004a62:	5e9b      	ldrsh	r3, [r3, r2]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da03      	bge.n	8004a70 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	22b8      	movs	r2, #184	@ 0xb8
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a70:	1cbb      	adds	r3, r7, #2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d103      	bne.n	8004a80 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2290      	movs	r2, #144	@ 0x90
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a80:	1cbb      	adds	r3, r7, #2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d103      	bne.n	8004a90 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a90:	1cbb      	adds	r3, r7, #2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d103      	bne.n	8004aa0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	@ 0x40
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	43d9      	mvns	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	400a      	ands	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2241      	movs	r2, #65	@ 0x41
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d138      	bne.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2240      	movs	r2, #64	@ 0x40
 8004ad6:	5c9b      	ldrb	r3, [r3, r2]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e032      	b.n	8004b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2240      	movs	r2, #64	@ 0x40
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2241      	movs	r2, #65	@ 0x41
 8004aec:	2124      	movs	r1, #36	@ 0x24
 8004aee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2101      	movs	r1, #1
 8004afc:	438a      	bics	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4911      	ldr	r1, [pc, #68]	@ (8004b50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2241      	movs	r2, #65	@ 0x41
 8004b34:	2120      	movs	r1, #32
 8004b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2240      	movs	r2, #64	@ 0x40
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	ffffefff 	.word	0xffffefff

08004b54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2241      	movs	r2, #65	@ 0x41
 8004b62:	5c9b      	ldrb	r3, [r3, r2]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d139      	bne.n	8004bde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e033      	b.n	8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2241      	movs	r2, #65	@ 0x41
 8004b84:	2124      	movs	r1, #36	@ 0x24
 8004b86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	438a      	bics	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a11      	ldr	r2, [pc, #68]	@ (8004be8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2241      	movs	r2, #65	@ 0x41
 8004bce:	2120      	movs	r1, #32
 8004bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b004      	add	sp, #16
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	fffff0ff 	.word	0xfffff0ff

08004bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d11f      	bne.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004c10:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	0013      	movs	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	189b      	adds	r3, r3, r2
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4912      	ldr	r1, [pc, #72]	@ (8004c68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fb fa70 	bl	8000104 <__udivsi3>
 8004c24:	0003      	movs	r3, r0
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2a:	e008      	b.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e001      	b.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e009      	b.n	8004c52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	401a      	ands	r2, r3
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d0ed      	beq.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	fffff9ff 	.word	0xfffff9ff
 8004c64:	20000004 	.word	0x20000004
 8004c68:	000f4240 	.word	0x000f4240

08004c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e2fe      	b.n	800527c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2201      	movs	r2, #1
 8004c84:	4013      	ands	r3, r2
 8004c86:	d100      	bne.n	8004c8a <HAL_RCC_OscConfig+0x1e>
 8004c88:	e07c      	b.n	8004d84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8a:	4bc3      	ldr	r3, [pc, #780]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2238      	movs	r2, #56	@ 0x38
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c94:	4bc0      	ldr	r3, [pc, #768]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d102      	bne.n	8004caa <HAL_RCC_OscConfig+0x3e>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2380      	movs	r3, #128	@ 0x80
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d062      	beq.n	8004d82 <HAL_RCC_OscConfig+0x116>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d15e      	bne.n	8004d82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e2d9      	b.n	800527c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	025b      	lsls	r3, r3, #9
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x78>
 8004cd4:	4bb0      	ldr	r3, [pc, #704]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4baf      	ldr	r3, [pc, #700]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004cda:	2180      	movs	r1, #128	@ 0x80
 8004cdc:	0249      	lsls	r1, r1, #9
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e020      	b.n	8004d26 <HAL_RCC_OscConfig+0xba>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	23a0      	movs	r3, #160	@ 0xa0
 8004cea:	02db      	lsls	r3, r3, #11
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10e      	bne.n	8004d0e <HAL_RCC_OscConfig+0xa2>
 8004cf0:	4ba9      	ldr	r3, [pc, #676]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4ba8      	ldr	r3, [pc, #672]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004cf6:	2180      	movs	r1, #128	@ 0x80
 8004cf8:	02c9      	lsls	r1, r1, #11
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4ba5      	ldr	r3, [pc, #660]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d04:	2180      	movs	r1, #128	@ 0x80
 8004d06:	0249      	lsls	r1, r1, #9
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e00b      	b.n	8004d26 <HAL_RCC_OscConfig+0xba>
 8004d0e:	4ba2      	ldr	r3, [pc, #648]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4ba1      	ldr	r3, [pc, #644]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d14:	49a1      	ldr	r1, [pc, #644]	@ (8004f9c <HAL_RCC_OscConfig+0x330>)
 8004d16:	400a      	ands	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d20:	499f      	ldr	r1, [pc, #636]	@ (8004fa0 <HAL_RCC_OscConfig+0x334>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d014      	beq.n	8004d58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fc fd7b 	bl	8001828 <HAL_GetTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fc fd76 	bl	8001828 <HAL_GetTick>
 8004d3c:	0002      	movs	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e298      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4a:	4b93      	ldr	r3, [pc, #588]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	2380      	movs	r3, #128	@ 0x80
 8004d50:	029b      	lsls	r3, r3, #10
 8004d52:	4013      	ands	r3, r2
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0xcc>
 8004d56:	e015      	b.n	8004d84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fc fd66 	bl	8001828 <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d62:	f7fc fd61 	bl	8001828 <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e283      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d74:	4b88      	ldr	r3, [pc, #544]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0xf6>
 8004d80:	e000      	b.n	8004d84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d100      	bne.n	8004d90 <HAL_RCC_OscConfig+0x124>
 8004d8e:	e099      	b.n	8004ec4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d90:	4b81      	ldr	r3, [pc, #516]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2238      	movs	r2, #56	@ 0x38
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	4013      	ands	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d102      	bne.n	8004db0 <HAL_RCC_OscConfig+0x144>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d002      	beq.n	8004db6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d135      	bne.n	8004e22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db6:	4b78      	ldr	r3, [pc, #480]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x162>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e256      	b.n	800527c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b72      	ldr	r3, [pc, #456]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a74      	ldr	r2, [pc, #464]	@ (8004fa4 <HAL_RCC_OscConfig+0x338>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	021a      	lsls	r2, r3, #8
 8004dde:	4b6e      	ldr	r3, [pc, #440]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d112      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dea:	4b6b      	ldr	r3, [pc, #428]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa8 <HAL_RCC_OscConfig+0x33c>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b67      	ldr	r3, [pc, #412]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004dfe:	4b66      	ldr	r3, [pc, #408]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0adb      	lsrs	r3, r3, #11
 8004e04:	2207      	movs	r2, #7
 8004e06:	4013      	ands	r3, r2
 8004e08:	4a68      	ldr	r2, [pc, #416]	@ (8004fac <HAL_RCC_OscConfig+0x340>)
 8004e0a:	40da      	lsrs	r2, r3
 8004e0c:	4b68      	ldr	r3, [pc, #416]	@ (8004fb0 <HAL_RCC_OscConfig+0x344>)
 8004e0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e10:	4b68      	ldr	r3, [pc, #416]	@ (8004fb4 <HAL_RCC_OscConfig+0x348>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fc fcab 	bl	8001770 <HAL_InitTick>
 8004e1a:	1e03      	subs	r3, r0, #0
 8004e1c:	d051      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e22c      	b.n	800527c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d030      	beq.n	8004e8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa8 <HAL_RCC_OscConfig+0x33c>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	4b57      	ldr	r3, [pc, #348]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004e3e:	4b56      	ldr	r3, [pc, #344]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b55      	ldr	r3, [pc, #340]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e44:	2180      	movs	r1, #128	@ 0x80
 8004e46:	0049      	lsls	r1, r1, #1
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fc fcec 	bl	8001828 <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e56:	f7fc fce7 	bl	8001828 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e209      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e68:	4b4b      	ldr	r3, [pc, #300]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4013      	ands	r3, r2
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e74:	4b48      	ldr	r3, [pc, #288]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa4 <HAL_RCC_OscConfig+0x338>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	021a      	lsls	r2, r3, #8
 8004e84:	4b44      	ldr	r3, [pc, #272]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e01b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e8c:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b41      	ldr	r3, [pc, #260]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004e92:	4949      	ldr	r1, [pc, #292]	@ (8004fb8 <HAL_RCC_OscConfig+0x34c>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fcc6 	bl	8001828 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fc fcc1 	bl	8001828 <HAL_GetTick>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e1e3      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eb4:	4b38      	ldr	r3, [pc, #224]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x236>
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d047      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ece:	4b32      	ldr	r3, [pc, #200]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2238      	movs	r2, #56	@ 0x38
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b18      	cmp	r3, #24
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004eda:	4b2f      	ldr	r3, [pc, #188]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ede:	2202      	movs	r2, #2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d03c      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2f2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d138      	bne.n	8004f5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e1c5      	b.n	800527c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ef8:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004efc:	4b26      	ldr	r3, [pc, #152]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004efe:	2101      	movs	r1, #1
 8004f00:	430a      	orrs	r2, r1
 8004f02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fc fc90 	bl	8001828 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fc fc8b 	bl	8001828 <HAL_GetTick>
 8004f12:	0002      	movs	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1ad      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d0f1      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2a2>
 8004f2a:	e018      	b.n	8004f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f30:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f32:	2101      	movs	r1, #1
 8004f34:	438a      	bics	r2, r1
 8004f36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fc76 	bl	8001828 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fc fc71 	bl	8001828 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e193      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f54:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	2202      	movs	r2, #2
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d1f1      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	4013      	ands	r3, r2
 8004f66:	d100      	bne.n	8004f6a <HAL_RCC_OscConfig+0x2fe>
 8004f68:	e0c6      	b.n	80050f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f6a:	231f      	movs	r3, #31
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f72:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2238      	movs	r2, #56	@ 0x38
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d11e      	bne.n	8004fbc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_OscConfig+0x32c>)
 8004f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f82:	2202      	movs	r2, #2
 8004f84:	4013      	ands	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_RCC_OscConfig+0x31e>
 8004f88:	e0b6      	b.n	80050f8 <HAL_RCC_OscConfig+0x48c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d000      	beq.n	8004f94 <HAL_RCC_OscConfig+0x328>
 8004f92:	e0b1      	b.n	80050f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e171      	b.n	800527c <HAL_RCC_OscConfig+0x610>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	fffeffff 	.word	0xfffeffff
 8004fa0:	fffbffff 	.word	0xfffbffff
 8004fa4:	ffff80ff 	.word	0xffff80ff
 8004fa8:	ffffc7ff 	.word	0xffffc7ff
 8004fac:	00f42400 	.word	0x00f42400
 8004fb0:	20000004 	.word	0x20000004
 8004fb4:	20000008 	.word	0x20000008
 8004fb8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fbc:	4bb1      	ldr	r3, [pc, #708]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc0:	2380      	movs	r3, #128	@ 0x80
 8004fc2:	055b      	lsls	r3, r3, #21
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_OscConfig+0x360>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x362>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4bac      	ldr	r3, [pc, #688]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8004fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd6:	4bab      	ldr	r3, [pc, #684]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	0549      	lsls	r1, r1, #21
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8004fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	055b      	lsls	r3, r3, #21
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004fee:	231f      	movs	r3, #31
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff6:	4ba4      	ldr	r3, [pc, #656]	@ (8005288 <HAL_RCC_OscConfig+0x61c>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	d11a      	bne.n	8005038 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005002:	4ba1      	ldr	r3, [pc, #644]	@ (8005288 <HAL_RCC_OscConfig+0x61c>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4ba0      	ldr	r3, [pc, #640]	@ (8005288 <HAL_RCC_OscConfig+0x61c>)
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	0049      	lsls	r1, r1, #1
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005010:	f7fc fc0a 	bl	8001828 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fc fc05 	bl	8001828 <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e127      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502c:	4b96      	ldr	r3, [pc, #600]	@ (8005288 <HAL_RCC_OscConfig+0x61c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4013      	ands	r3, r2
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x3e2>
 8005040:	4b90      	ldr	r3, [pc, #576]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005044:	4b8f      	ldr	r3, [pc, #572]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005046:	2101      	movs	r1, #1
 8005048:	430a      	orrs	r2, r1
 800504a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800504c:	e01c      	b.n	8005088 <HAL_RCC_OscConfig+0x41c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b05      	cmp	r3, #5
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x404>
 8005056:	4b8b      	ldr	r3, [pc, #556]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800505a:	4b8a      	ldr	r3, [pc, #552]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800505c:	2104      	movs	r1, #4
 800505e:	430a      	orrs	r2, r1
 8005060:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005062:	4b88      	ldr	r3, [pc, #544]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005066:	4b87      	ldr	r3, [pc, #540]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005068:	2101      	movs	r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0x41c>
 8005070:	4b84      	ldr	r3, [pc, #528]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005072:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005074:	4b83      	ldr	r3, [pc, #524]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005076:	2101      	movs	r1, #1
 8005078:	438a      	bics	r2, r1
 800507a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800507c:	4b81      	ldr	r3, [pc, #516]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800507e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005080:	4b80      	ldr	r3, [pc, #512]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005082:	2104      	movs	r1, #4
 8005084:	438a      	bics	r2, r1
 8005086:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d014      	beq.n	80050ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc fbca 	bl	8001828 <HAL_GetTick>
 8005094:	0003      	movs	r3, r0
 8005096:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005098:	e009      	b.n	80050ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc fbc5 	bl	8001828 <HAL_GetTick>
 800509e:	0002      	movs	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	4a79      	ldr	r2, [pc, #484]	@ (800528c <HAL_RCC_OscConfig+0x620>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0e6      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	4b75      	ldr	r3, [pc, #468]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80050b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x42e>
 80050b8:	e013      	b.n	80050e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc fbb5 	bl	8001828 <HAL_GetTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c2:	e009      	b.n	80050d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fc fbb0 	bl	8001828 <HAL_GetTick>
 80050c8:	0002      	movs	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	4a6f      	ldr	r2, [pc, #444]	@ (800528c <HAL_RCC_OscConfig+0x620>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0d1      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80050da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050dc:	2202      	movs	r2, #2
 80050de:	4013      	ands	r3, r2
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80050e2:	231f      	movs	r3, #31
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d105      	bne.n	80050f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80050ec:	4b65      	ldr	r3, [pc, #404]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80050ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f0:	4b64      	ldr	r3, [pc, #400]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80050f2:	4967      	ldr	r1, [pc, #412]	@ (8005290 <HAL_RCC_OscConfig+0x624>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d100      	bne.n	8005102 <HAL_RCC_OscConfig+0x496>
 8005100:	e0bb      	b.n	800527a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005102:	4b60      	ldr	r3, [pc, #384]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2238      	movs	r2, #56	@ 0x38
 8005108:	4013      	ands	r3, r2
 800510a:	2b10      	cmp	r3, #16
 800510c:	d100      	bne.n	8005110 <HAL_RCC_OscConfig+0x4a4>
 800510e:	e07b      	b.n	8005208 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d156      	bne.n	80051c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b5a      	ldr	r3, [pc, #360]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b59      	ldr	r3, [pc, #356]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800511e:	495d      	ldr	r1, [pc, #372]	@ (8005294 <HAL_RCC_OscConfig+0x628>)
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fc fb80 	bl	8001828 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512e:	f7fc fb7b 	bl	8001828 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e09d      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	4b50      	ldr	r3, [pc, #320]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	049b      	lsls	r3, r3, #18
 8005148:	4013      	ands	r3, r2
 800514a:	d1f0      	bne.n	800512e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b4d      	ldr	r3, [pc, #308]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4a51      	ldr	r2, [pc, #324]	@ (8005298 <HAL_RCC_OscConfig+0x62c>)
 8005152:	4013      	ands	r3, r2
 8005154:	0019      	movs	r1, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005178:	431a      	orrs	r2, r3
 800517a:	4b42      	ldr	r3, [pc, #264]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 800517c:	430a      	orrs	r2, r1
 800517e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005180:	4b40      	ldr	r3, [pc, #256]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b3f      	ldr	r3, [pc, #252]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	0449      	lsls	r1, r1, #17
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800518e:	4b3d      	ldr	r3, [pc, #244]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	4b3c      	ldr	r3, [pc, #240]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005194:	2180      	movs	r1, #128	@ 0x80
 8005196:	0549      	lsls	r1, r1, #21
 8005198:	430a      	orrs	r2, r1
 800519a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fc fb44 	bl	8001828 <HAL_GetTick>
 80051a0:	0003      	movs	r3, r0
 80051a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fc fb3f 	bl	8001828 <HAL_GetTick>
 80051aa:	0002      	movs	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e061      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b8:	4b32      	ldr	r3, [pc, #200]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	049b      	lsls	r3, r3, #18
 80051c0:	4013      	ands	r3, r2
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x53a>
 80051c4:	e059      	b.n	800527a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80051cc:	4931      	ldr	r1, [pc, #196]	@ (8005294 <HAL_RCC_OscConfig+0x628>)
 80051ce:	400a      	ands	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fc fb29 	bl	8001828 <HAL_GetTick>
 80051d6:	0003      	movs	r3, r0
 80051d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc fb24 	bl	8001828 <HAL_GetTick>
 80051e0:	0002      	movs	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e046      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ee:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	2380      	movs	r3, #128	@ 0x80
 80051f4:	049b      	lsls	r3, r3, #18
 80051f6:	4013      	ands	r3, r2
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80051fa:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	4b21      	ldr	r3, [pc, #132]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005200:	4926      	ldr	r1, [pc, #152]	@ (800529c <HAL_RCC_OscConfig+0x630>)
 8005202:	400a      	ands	r2, r1
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e038      	b.n	800527a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e033      	b.n	800527c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x618>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2203      	movs	r2, #3
 800521e:	401a      	ands	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	429a      	cmp	r2, r3
 8005226:	d126      	bne.n	8005276 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2270      	movs	r2, #112	@ 0x70
 800522c:	401a      	ands	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d11f      	bne.n	8005276 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	23fe      	movs	r3, #254	@ 0xfe
 800523a:	01db      	lsls	r3, r3, #7
 800523c:	401a      	ands	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d116      	bne.n	8005276 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	23f8      	movs	r3, #248	@ 0xf8
 800524c:	039b      	lsls	r3, r3, #14
 800524e:	401a      	ands	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d10e      	bne.n	8005276 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	23e0      	movs	r3, #224	@ 0xe0
 800525c:	051b      	lsls	r3, r3, #20
 800525e:	401a      	ands	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	0f5b      	lsrs	r3, r3, #29
 800526c:	075a      	lsls	r2, r3, #29
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d001      	beq.n	800527a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b008      	add	sp, #32
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	40007000 	.word	0x40007000
 800528c:	00001388 	.word	0x00001388
 8005290:	efffffff 	.word	0xefffffff
 8005294:	feffffff 	.word	0xfeffffff
 8005298:	11c1808c 	.word	0x11c1808c
 800529c:	eefefffc 	.word	0xeefefffc

080052a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0e9      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b4:	4b76      	ldr	r3, [pc, #472]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2207      	movs	r2, #7
 80052ba:	4013      	ands	r3, r2
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d91e      	bls.n	8005300 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b73      	ldr	r3, [pc, #460]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2207      	movs	r2, #7
 80052c8:	4393      	bics	r3, r2
 80052ca:	0019      	movs	r1, r3
 80052cc:	4b70      	ldr	r3, [pc, #448]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052d4:	f7fc faa8 	bl	8001828 <HAL_GetTick>
 80052d8:	0003      	movs	r3, r0
 80052da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052dc:	e009      	b.n	80052f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052de:	f7fc faa3 	bl	8001828 <HAL_GetTick>
 80052e2:	0002      	movs	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005494 <HAL_RCC_ClockConfig+0x1f4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e0ca      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052f2:	4b67      	ldr	r3, [pc, #412]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2207      	movs	r2, #7
 80052f8:	4013      	ands	r3, r2
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1ee      	bne.n	80052de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	4013      	ands	r3, r2
 8005308:	d015      	beq.n	8005336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2204      	movs	r2, #4
 8005310:	4013      	ands	r3, r2
 8005312:	d006      	beq.n	8005322 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005314:	4b60      	ldr	r3, [pc, #384]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b5f      	ldr	r3, [pc, #380]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 800531a:	21e0      	movs	r1, #224	@ 0xe0
 800531c:	01c9      	lsls	r1, r1, #7
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005322:	4b5d      	ldr	r3, [pc, #372]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4a5d      	ldr	r2, [pc, #372]	@ (800549c <HAL_RCC_ClockConfig+0x1fc>)
 8005328:	4013      	ands	r3, r2
 800532a:	0019      	movs	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	4b59      	ldr	r3, [pc, #356]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	4013      	ands	r3, r2
 800533e:	d057      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005348:	4b53      	ldr	r3, [pc, #332]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	029b      	lsls	r3, r3, #10
 8005350:	4013      	ands	r3, r2
 8005352:	d12b      	bne.n	80053ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e097      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d107      	bne.n	8005370 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005360:	4b4d      	ldr	r3, [pc, #308]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	049b      	lsls	r3, r3, #18
 8005368:	4013      	ands	r3, r2
 800536a:	d11f      	bne.n	80053ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e08b      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005378:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4013      	ands	r3, r2
 8005382:	d113      	bne.n	80053ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e07f      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d106      	bne.n	800539e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005390:	4b41      	ldr	r3, [pc, #260]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005394:	2202      	movs	r2, #2
 8005396:	4013      	ands	r3, r2
 8005398:	d108      	bne.n	80053ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e074      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	4b3e      	ldr	r3, [pc, #248]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 80053a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a2:	2202      	movs	r2, #2
 80053a4:	4013      	ands	r3, r2
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e06d      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2207      	movs	r2, #7
 80053b2:	4393      	bics	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c0:	f7fc fa32 	bl	8001828 <HAL_GetTick>
 80053c4:	0003      	movs	r3, r0
 80053c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c8:	e009      	b.n	80053de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ca:	f7fc fa2d 	bl	8001828 <HAL_GetTick>
 80053ce:	0002      	movs	r2, r0
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <HAL_RCC_ClockConfig+0x1f4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e054      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	4b2e      	ldr	r3, [pc, #184]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2238      	movs	r2, #56	@ 0x38
 80053e4:	401a      	ands	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1ec      	bne.n	80053ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f0:	4b27      	ldr	r3, [pc, #156]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2207      	movs	r2, #7
 80053f6:	4013      	ands	r3, r2
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d21e      	bcs.n	800543c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b24      	ldr	r3, [pc, #144]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2207      	movs	r2, #7
 8005404:	4393      	bics	r3, r2
 8005406:	0019      	movs	r1, r3
 8005408:	4b21      	ldr	r3, [pc, #132]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005410:	f7fc fa0a 	bl	8001828 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005418:	e009      	b.n	800542e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541a:	f7fc fa05 	bl	8001828 <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <HAL_RCC_ClockConfig+0x1f4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e02c      	b.n	8005488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800542e:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <HAL_RCC_ClockConfig+0x1f0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2207      	movs	r2, #7
 8005434:	4013      	ands	r3, r2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d1ee      	bne.n	800541a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2204      	movs	r2, #4
 8005442:	4013      	ands	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005446:	4b14      	ldr	r3, [pc, #80]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <HAL_RCC_ClockConfig+0x200>)
 800544c:	4013      	ands	r3, r2
 800544e:	0019      	movs	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800545a:	f000 f829 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 800545e:	0001      	movs	r1, r0
 8005460:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <HAL_RCC_ClockConfig+0x1f8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	220f      	movs	r2, #15
 8005468:	401a      	ands	r2, r3
 800546a:	4b0e      	ldr	r3, [pc, #56]	@ (80054a4 <HAL_RCC_ClockConfig+0x204>)
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	58d3      	ldr	r3, [r2, r3]
 8005470:	221f      	movs	r2, #31
 8005472:	4013      	ands	r3, r2
 8005474:	000a      	movs	r2, r1
 8005476:	40da      	lsrs	r2, r3
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_ClockConfig+0x208>)
 800547a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCC_ClockConfig+0x20c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	0018      	movs	r0, r3
 8005482:	f7fc f975 	bl	8001770 <HAL_InitTick>
 8005486:	0003      	movs	r3, r0
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40022000 	.word	0x40022000
 8005494:	00001388 	.word	0x00001388
 8005498:	40021000 	.word	0x40021000
 800549c:	fffff0ff 	.word	0xfffff0ff
 80054a0:	ffff8fff 	.word	0xffff8fff
 80054a4:	08006ccc 	.word	0x08006ccc
 80054a8:	20000004 	.word	0x20000004
 80054ac:	20000008 	.word	0x20000008

080054b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054b6:	4b3c      	ldr	r3, [pc, #240]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2238      	movs	r2, #56	@ 0x38
 80054bc:	4013      	ands	r3, r2
 80054be:	d10f      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054c0:	4b39      	ldr	r3, [pc, #228]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0adb      	lsrs	r3, r3, #11
 80054c6:	2207      	movs	r2, #7
 80054c8:	4013      	ands	r3, r2
 80054ca:	2201      	movs	r2, #1
 80054cc:	409a      	lsls	r2, r3
 80054ce:	0013      	movs	r3, r2
 80054d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	4835      	ldr	r0, [pc, #212]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80054d6:	f7fa fe15 	bl	8000104 <__udivsi3>
 80054da:	0003      	movs	r3, r0
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e05d      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e0:	4b31      	ldr	r3, [pc, #196]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2238      	movs	r2, #56	@ 0x38
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d102      	bne.n	80054f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054ec:	4b30      	ldr	r3, [pc, #192]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e054      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054f2:	4b2d      	ldr	r3, [pc, #180]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2238      	movs	r2, #56	@ 0x38
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d138      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054fe:	4b2a      	ldr	r3, [pc, #168]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2203      	movs	r2, #3
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005508:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	2207      	movs	r2, #7
 8005510:	4013      	ands	r3, r2
 8005512:	3301      	adds	r3, #1
 8005514:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d10d      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4824      	ldr	r0, [pc, #144]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005520:	f7fa fdf0 	bl	8000104 <__udivsi3>
 8005524:	0003      	movs	r3, r0
 8005526:	0019      	movs	r1, r3
 8005528:	4b1f      	ldr	r3, [pc, #124]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	227f      	movs	r2, #127	@ 0x7f
 8005530:	4013      	ands	r3, r2
 8005532:	434b      	muls	r3, r1
 8005534:	617b      	str	r3, [r7, #20]
        break;
 8005536:	e00d      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	481c      	ldr	r0, [pc, #112]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800553c:	f7fa fde2 	bl	8000104 <__udivsi3>
 8005540:	0003      	movs	r3, r0
 8005542:	0019      	movs	r1, r3
 8005544:	4b18      	ldr	r3, [pc, #96]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	227f      	movs	r2, #127	@ 0x7f
 800554c:	4013      	ands	r3, r2
 800554e:	434b      	muls	r3, r1
 8005550:	617b      	str	r3, [r7, #20]
        break;
 8005552:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005554:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0f5b      	lsrs	r3, r3, #29
 800555a:	2207      	movs	r2, #7
 800555c:	4013      	ands	r3, r2
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f7fa fdcd 	bl	8000104 <__udivsi3>
 800556a:	0003      	movs	r3, r0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e015      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005570:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2238      	movs	r2, #56	@ 0x38
 8005576:	4013      	ands	r3, r2
 8005578:	2b20      	cmp	r3, #32
 800557a:	d103      	bne.n	8005584 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e00b      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005584:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2238      	movs	r2, #56	@ 0x38
 800558a:	4013      	ands	r3, r2
 800558c:	2b18      	cmp	r3, #24
 800558e:	d103      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005590:	23fa      	movs	r3, #250	@ 0xfa
 8005592:	01db      	lsls	r3, r3, #7
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e001      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800559c:	693b      	ldr	r3, [r7, #16]
}
 800559e:	0018      	movs	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b006      	add	sp, #24
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	40021000 	.word	0x40021000
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	007a1200 	.word	0x007a1200

080055b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80055bc:	2313      	movs	r3, #19
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c4:	2312      	movs	r3, #18
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	4013      	ands	r3, r2
 80055d6:	d100      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80055d8:	e0a3      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055da:	2011      	movs	r0, #17
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e2:	4bc3      	ldr	r3, [pc, #780]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	055b      	lsls	r3, r3, #21
 80055ea:	4013      	ands	r3, r2
 80055ec:	d110      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	4bc0      	ldr	r3, [pc, #768]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055f2:	4bbf      	ldr	r3, [pc, #764]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f4:	2180      	movs	r1, #128	@ 0x80
 80055f6:	0549      	lsls	r1, r1, #21
 80055f8:	430a      	orrs	r2, r1
 80055fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055fc:	4bbc      	ldr	r3, [pc, #752]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	055b      	lsls	r3, r3, #21
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560a:	183b      	adds	r3, r7, r0
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005610:	4bb8      	ldr	r3, [pc, #736]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4bb7      	ldr	r3, [pc, #732]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005616:	2180      	movs	r1, #128	@ 0x80
 8005618:	0049      	lsls	r1, r1, #1
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800561e:	f7fc f903 	bl	8001828 <HAL_GetTick>
 8005622:	0003      	movs	r3, r0
 8005624:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005626:	e00b      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005628:	f7fc f8fe 	bl	8001828 <HAL_GetTick>
 800562c:	0002      	movs	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d904      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005636:	2313      	movs	r3, #19
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	2203      	movs	r2, #3
 800563c:	701a      	strb	r2, [r3, #0]
        break;
 800563e:	e005      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005640:	4bac      	ldr	r3, [pc, #688]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4013      	ands	r3, r2
 800564a:	d0ed      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800564c:	2313      	movs	r3, #19
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d154      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005656:	4ba6      	ldr	r3, [pc, #664]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800565a:	23c0      	movs	r3, #192	@ 0xc0
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4013      	ands	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d019      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	429a      	cmp	r2, r3
 8005670:	d014      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005672:	4b9f      	ldr	r3, [pc, #636]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005676:	4aa0      	ldr	r2, [pc, #640]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005678:	4013      	ands	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800567c:	4b9c      	ldr	r3, [pc, #624]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800567e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005680:	4b9b      	ldr	r3, [pc, #620]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005682:	2180      	movs	r1, #128	@ 0x80
 8005684:	0249      	lsls	r1, r1, #9
 8005686:	430a      	orrs	r2, r1
 8005688:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800568a:	4b99      	ldr	r3, [pc, #612]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800568e:	4b98      	ldr	r3, [pc, #608]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005690:	499a      	ldr	r1, [pc, #616]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005692:	400a      	ands	r2, r1
 8005694:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005696:	4b96      	ldr	r3, [pc, #600]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2201      	movs	r2, #1
 80056a0:	4013      	ands	r3, r2
 80056a2:	d016      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fc f8c0 	bl	8001828 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ac:	e00c      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fc f8bb 	bl	8001828 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	4a91      	ldr	r2, [pc, #580]	@ (8005900 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d904      	bls.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80056be:	2313      	movs	r3, #19
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2203      	movs	r2, #3
 80056c4:	701a      	strb	r2, [r3, #0]
            break;
 80056c6:	e004      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c8:	4b89      	ldr	r3, [pc, #548]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	2202      	movs	r2, #2
 80056ce:	4013      	ands	r3, r2
 80056d0:	d0ed      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80056d2:	2313      	movs	r3, #19
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056dc:	4b84      	ldr	r3, [pc, #528]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e0:	4a85      	ldr	r2, [pc, #532]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ea:	4b81      	ldr	r3, [pc, #516]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ec:	430a      	orrs	r2, r1
 80056ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056f0:	e00c      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056f2:	2312      	movs	r3, #18
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	2213      	movs	r2, #19
 80056f8:	18ba      	adds	r2, r7, r2
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e005      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	2312      	movs	r3, #18
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	2213      	movs	r2, #19
 8005706:	18ba      	adds	r2, r7, r2
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800570c:	2311      	movs	r3, #17
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005716:	4b76      	ldr	r3, [pc, #472]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800571a:	4b75      	ldr	r3, [pc, #468]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800571c:	4979      	ldr	r1, [pc, #484]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800571e:	400a      	ands	r2, r1
 8005720:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	4013      	ands	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800572c:	4b70      	ldr	r3, [pc, #448]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800572e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005730:	2203      	movs	r2, #3
 8005732:	4393      	bics	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4b6d      	ldr	r3, [pc, #436]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800573c:	430a      	orrs	r2, r1
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2202      	movs	r2, #2
 8005746:	4013      	ands	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800574a:	4b69      	ldr	r3, [pc, #420]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	220c      	movs	r2, #12
 8005750:	4393      	bics	r3, r2
 8005752:	0019      	movs	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	4b65      	ldr	r3, [pc, #404]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800575a:	430a      	orrs	r2, r1
 800575c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2210      	movs	r2, #16
 8005764:	4013      	ands	r3, r2
 8005766:	d009      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005768:	4b61      	ldr	r3, [pc, #388]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	4a66      	ldr	r2, [pc, #408]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	4b5e      	ldr	r3, [pc, #376]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005778:	430a      	orrs	r2, r1
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4013      	ands	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005788:	4b59      	ldr	r3, [pc, #356]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800578a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578c:	4a5f      	ldr	r2, [pc, #380]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800578e:	4013      	ands	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	4b56      	ldr	r3, [pc, #344]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005798:	430a      	orrs	r2, r1
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	2380      	movs	r3, #128	@ 0x80
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4013      	ands	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057a8:	4b51      	ldr	r3, [pc, #324]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	4a58      	ldr	r2, [pc, #352]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	4b4e      	ldr	r3, [pc, #312]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	4013      	ands	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c6:	4b4a      	ldr	r3, [pc, #296]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	4a52      	ldr	r2, [pc, #328]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	0019      	movs	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	4b46      	ldr	r3, [pc, #280]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4013      	ands	r3, r2
 80057e4:	d015      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e6:	4b42      	ldr	r3, [pc, #264]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	0899      	lsrs	r1, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	4b3f      	ldr	r3, [pc, #252]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	05db      	lsls	r3, r3, #23
 8005800:	429a      	cmp	r2, r3
 8005802:	d106      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005804:	4b3a      	ldr	r3, [pc, #232]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	4b39      	ldr	r3, [pc, #228]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800580a:	2180      	movs	r1, #128	@ 0x80
 800580c:	0249      	lsls	r1, r1, #9
 800580e:	430a      	orrs	r2, r1
 8005810:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	2380      	movs	r3, #128	@ 0x80
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	4013      	ands	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800581e:	4b34      	ldr	r3, [pc, #208]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005822:	2240      	movs	r2, #64	@ 0x40
 8005824:	4393      	bics	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582c:	4b30      	ldr	r3, [pc, #192]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800582e:	430a      	orrs	r2, r1
 8005830:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	@ 0x80
 8005838:	039b      	lsls	r3, r3, #14
 800583a:	4013      	ands	r3, r2
 800583c:	d016      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800583e:	4b2c      	ldr	r3, [pc, #176]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	4a35      	ldr	r2, [pc, #212]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005844:	4013      	ands	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800584c:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800584e:	430a      	orrs	r2, r1
 8005850:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	03db      	lsls	r3, r3, #15
 800585a:	429a      	cmp	r2, r3
 800585c:	d106      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800585e:	4b24      	ldr	r3, [pc, #144]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	4b23      	ldr	r3, [pc, #140]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005864:	2180      	movs	r1, #128	@ 0x80
 8005866:	0449      	lsls	r1, r1, #17
 8005868:	430a      	orrs	r2, r1
 800586a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	03db      	lsls	r3, r3, #15
 8005874:	4013      	ands	r3, r2
 8005876:	d016      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005878:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800587a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587c:	4a27      	ldr	r2, [pc, #156]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005886:	4b1a      	ldr	r3, [pc, #104]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005888:	430a      	orrs	r2, r1
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	045b      	lsls	r3, r3, #17
 8005894:	429a      	cmp	r2, r3
 8005896:	d106      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005898:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800589e:	2180      	movs	r1, #128	@ 0x80
 80058a0:	0449      	lsls	r1, r1, #17
 80058a2:	430a      	orrs	r2, r1
 80058a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	2380      	movs	r3, #128	@ 0x80
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	4013      	ands	r3, r2
 80058b0:	d016      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80058b2:	4b0f      	ldr	r3, [pc, #60]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058c2:	430a      	orrs	r2, r1
 80058c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	2380      	movs	r3, #128	@ 0x80
 80058cc:	01db      	lsls	r3, r3, #7
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d106      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d8:	2180      	movs	r1, #128	@ 0x80
 80058da:	0249      	lsls	r1, r1, #9
 80058dc:	430a      	orrs	r2, r1
 80058de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058e0:	2312      	movs	r3, #18
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	781b      	ldrb	r3, [r3, #0]
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b006      	add	sp, #24
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40007000 	.word	0x40007000
 80058f8:	fffffcff 	.word	0xfffffcff
 80058fc:	fffeffff 	.word	0xfffeffff
 8005900:	00001388 	.word	0x00001388
 8005904:	efffffff 	.word	0xefffffff
 8005908:	fffff3ff 	.word	0xfffff3ff
 800590c:	fff3ffff 	.word	0xfff3ffff
 8005910:	ffcfffff 	.word	0xffcfffff
 8005914:	ffffcfff 	.word	0xffffcfff
 8005918:	ffbfffff 	.word	0xffbfffff
 800591c:	feffffff 	.word	0xfeffffff
 8005920:	ffff3fff 	.word	0xffff3fff

08005924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e04a      	b.n	80059cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223d      	movs	r2, #61	@ 0x3d
 800593a:	5c9b      	ldrb	r3, [r3, r2]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	223c      	movs	r2, #60	@ 0x3c
 8005946:	2100      	movs	r1, #0
 8005948:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0018      	movs	r0, r3
 800594e:	f7fb fdd9 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	223d      	movs	r2, #61	@ 0x3d
 8005956:	2102      	movs	r1, #2
 8005958:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	0019      	movs	r1, r3
 8005964:	0010      	movs	r0, r2
 8005966:	f000 fcd9 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2248      	movs	r2, #72	@ 0x48
 800596e:	2101      	movs	r1, #1
 8005970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	223e      	movs	r2, #62	@ 0x3e
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	223f      	movs	r2, #63	@ 0x3f
 800597e:	2101      	movs	r1, #1
 8005980:	5499      	strb	r1, [r3, r2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2240      	movs	r2, #64	@ 0x40
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2241      	movs	r2, #65	@ 0x41
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2242      	movs	r2, #66	@ 0x42
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2243      	movs	r2, #67	@ 0x43
 800599e:	2101      	movs	r1, #1
 80059a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2244      	movs	r2, #68	@ 0x44
 80059a6:	2101      	movs	r1, #1
 80059a8:	5499      	strb	r1, [r3, r2]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2245      	movs	r2, #69	@ 0x45
 80059ae:	2101      	movs	r1, #1
 80059b0:	5499      	strb	r1, [r3, r2]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2246      	movs	r2, #70	@ 0x46
 80059b6:	2101      	movs	r1, #1
 80059b8:	5499      	strb	r1, [r3, r2]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2247      	movs	r2, #71	@ 0x47
 80059be:	2101      	movs	r1, #1
 80059c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	223d      	movs	r2, #61	@ 0x3d
 80059c6:	2101      	movs	r1, #1
 80059c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223d      	movs	r2, #61	@ 0x3d
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e042      	b.n	8005a72 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	223d      	movs	r2, #61	@ 0x3d
 80059f0:	2102      	movs	r1, #2
 80059f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2101      	movs	r1, #1
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <HAL_TIM_Base_Start_IT+0xa8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0x5a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	2380      	movs	r3, #128	@ 0x80
 8005a14:	05db      	lsls	r3, r3, #23
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0x5a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_TIM_Base_Start_IT+0xac>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0x5a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d116      	bne.n	8005a5c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d016      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x9a>
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	2380      	movs	r3, #128	@ 0x80
 8005a44:	025b      	lsls	r3, r3, #9
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d011      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	00010007 	.word	0x00010007

08005a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e04a      	b.n	8005b34 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223d      	movs	r2, #61	@ 0x3d
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	223c      	movs	r2, #60	@ 0x3c
 8005aae:	2100      	movs	r1, #0
 8005ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 f841 	bl	8005b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	223d      	movs	r2, #61	@ 0x3d
 8005abe:	2102      	movs	r1, #2
 8005ac0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	0019      	movs	r1, r3
 8005acc:	0010      	movs	r0, r2
 8005ace:	f000 fc25 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2248      	movs	r2, #72	@ 0x48
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	223e      	movs	r2, #62	@ 0x3e
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	223f      	movs	r2, #63	@ 0x3f
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2240      	movs	r2, #64	@ 0x40
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2241      	movs	r2, #65	@ 0x41
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2242      	movs	r2, #66	@ 0x42
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2243      	movs	r2, #67	@ 0x43
 8005b06:	2101      	movs	r1, #1
 8005b08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2244      	movs	r2, #68	@ 0x44
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2245      	movs	r2, #69	@ 0x45
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2246      	movs	r2, #70	@ 0x46
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2247      	movs	r2, #71	@ 0x47
 8005b26:	2101      	movs	r1, #1
 8005b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	223d      	movs	r2, #61	@ 0x3d
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b44:	46c0      	nop			@ (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x22>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223e      	movs	r2, #62	@ 0x3e
 8005b60:	5c9b      	ldrb	r3, [r3, r2]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	4193      	sbcs	r3, r2
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e037      	b.n	8005bde <HAL_TIM_PWM_Start+0x92>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d108      	bne.n	8005b86 <HAL_TIM_PWM_Start+0x3a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	223f      	movs	r2, #63	@ 0x3f
 8005b78:	5c9b      	ldrb	r3, [r3, r2]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	1e5a      	subs	r2, r3, #1
 8005b80:	4193      	sbcs	r3, r2
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e02b      	b.n	8005bde <HAL_TIM_PWM_Start+0x92>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d108      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x52>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2240      	movs	r2, #64	@ 0x40
 8005b90:	5c9b      	ldrb	r3, [r3, r2]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	4193      	sbcs	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e01f      	b.n	8005bde <HAL_TIM_PWM_Start+0x92>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	d108      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x6a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2241      	movs	r2, #65	@ 0x41
 8005ba8:	5c9b      	ldrb	r3, [r3, r2]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	4193      	sbcs	r3, r2
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e013      	b.n	8005bde <HAL_TIM_PWM_Start+0x92>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d108      	bne.n	8005bce <HAL_TIM_PWM_Start+0x82>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2242      	movs	r2, #66	@ 0x42
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	4193      	sbcs	r3, r2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	e007      	b.n	8005bde <HAL_TIM_PWM_Start+0x92>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2243      	movs	r2, #67	@ 0x43
 8005bd2:	5c9b      	ldrb	r3, [r3, r2]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	1e5a      	subs	r2, r3, #1
 8005bda:	4193      	sbcs	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e08b      	b.n	8005cfe <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0xaa>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	223e      	movs	r2, #62	@ 0x3e
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	5499      	strb	r1, [r3, r2]
 8005bf4:	e023      	b.n	8005c3e <HAL_TIM_PWM_Start+0xf2>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0xba>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	223f      	movs	r2, #63	@ 0x3f
 8005c00:	2102      	movs	r1, #2
 8005c02:	5499      	strb	r1, [r3, r2]
 8005c04:	e01b      	b.n	8005c3e <HAL_TIM_PWM_Start+0xf2>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0xca>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	@ 0x40
 8005c10:	2102      	movs	r1, #2
 8005c12:	5499      	strb	r1, [r3, r2]
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_PWM_Start+0xf2>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xda>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2241      	movs	r2, #65	@ 0x41
 8005c20:	2102      	movs	r1, #2
 8005c22:	5499      	strb	r1, [r3, r2]
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_PWM_Start+0xf2>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0xea>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2242      	movs	r2, #66	@ 0x42
 8005c30:	2102      	movs	r1, #2
 8005c32:	5499      	strb	r1, [r3, r2]
 8005c34:	e003      	b.n	8005c3e <HAL_TIM_PWM_Start+0xf2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2243      	movs	r2, #67	@ 0x43
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 ff56 	bl	8006af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <HAL_TIM_PWM_Start+0x1bc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x128>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <HAL_TIM_PWM_Start+0x1c0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x128>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <HAL_TIM_PWM_Start+0x1c4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x128>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <HAL_TIM_PWM_Start+0x1c8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d101      	bne.n	8005c78 <HAL_TIM_PWM_Start+0x12c>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_PWM_Start+0x12e>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2180      	movs	r1, #128	@ 0x80
 8005c8a:	0209      	lsls	r1, r1, #8
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <HAL_TIM_PWM_Start+0x1bc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <HAL_TIM_PWM_Start+0x16e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	05db      	lsls	r3, r3, #23
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d009      	beq.n	8005cba <HAL_TIM_PWM_Start+0x16e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d18 <HAL_TIM_PWM_Start+0x1cc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_PWM_Start+0x16e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a15      	ldr	r2, [pc, #84]	@ (8005d0c <HAL_TIM_PWM_Start+0x1c0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d116      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <HAL_TIM_PWM_Start+0x1d0>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d016      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1ae>
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d011      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	e008      	b.n	8005cfa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e000      	b.n	8005cfc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	0018      	movs	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b004      	add	sp, #16
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	00010007 	.word	0x00010007

08005d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d021      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2202      	movs	r2, #2
 8005d44:	4013      	ands	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4252      	negs	r2, r2
 8005d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4013      	ands	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 fac0 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e007      	b.n	8005d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 fab3 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fabf 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2204      	movs	r2, #4
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d01e      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2205      	movs	r2, #5
 8005d9a:	4252      	negs	r2, r2
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	23c0      	movs	r3, #192	@ 0xc0
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 fa99 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f000 fa8c 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 fa98 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d021      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4013      	ands	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2209      	movs	r2, #9
 8005de8:	4252      	negs	r2, r2
 8005dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 fa73 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005e06:	e007      	b.n	8005e18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 fa66 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 fa72 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2210      	movs	r2, #16
 8005e22:	4013      	ands	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d01e      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2211      	movs	r2, #17
 8005e34:	4252      	negs	r2, r2
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	23c0      	movs	r3, #192	@ 0xc0
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 fa4c 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fa3f 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 fa4b 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4013      	ands	r3, r2
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d008      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4252      	negs	r2, r2
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fb f9fd 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	4013      	ands	r3, r2
 8005e94:	d104      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	2380      	movs	r3, #128	@ 0x80
 8005e9a:	019b      	lsls	r3, r3, #6
 8005e9c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2280      	movs	r2, #128	@ 0x80
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1e      	ldr	r2, [pc, #120]	@ (8005f28 <HAL_TIM_IRQHandler+0x208>)
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 feba 	bl	8006c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2280      	movs	r2, #128	@ 0x80
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d007      	beq.n	8005eda <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <HAL_TIM_IRQHandler+0x20c>)
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 feb1 	bl	8006c3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2240      	movs	r2, #64	@ 0x40
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d00c      	beq.n	8005efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2240      	movs	r2, #64	@ 0x40
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d008      	beq.n	8005efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2241      	movs	r2, #65	@ 0x41
 8005ef0:	4252      	negs	r2, r2
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f000 fa08 	bl	800630c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2220      	movs	r2, #32
 8005f00:	4013      	ands	r3, r2
 8005f02:	d00c      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d008      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2221      	movs	r2, #33	@ 0x21
 8005f12:	4252      	negs	r2, r2
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 fe7f 	bl	8006c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b004      	add	sp, #16
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	ffffdf7f 	.word	0xffffdf7f
 8005f2c:	fffffeff 	.word	0xfffffeff

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2317      	movs	r3, #23
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	223c      	movs	r2, #60	@ 0x3c
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0e5      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	223c      	movs	r2, #60	@ 0x3c
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b14      	cmp	r3, #20
 8005f5e:	d900      	bls.n	8005f62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005f60:	e0d1      	b.n	8006106 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	009a      	lsls	r2, r3, #2
 8005f66:	4b70      	ldr	r3, [pc, #448]	@ (8006128 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0011      	movs	r1, r2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 fa5e 	bl	8006438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2108      	movs	r1, #8
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2104      	movs	r1, #4
 8005f98:	438a      	bics	r2, r1
 8005f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6999      	ldr	r1, [r3, #24]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	619a      	str	r2, [r3, #24]
      break;
 8005fae:	e0af      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 fac7 	bl	800654c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2180      	movs	r1, #128	@ 0x80
 8005fca:	0109      	lsls	r1, r1, #4
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4954      	ldr	r1, [pc, #336]	@ (800612c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	021a      	lsls	r2, r3, #8
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]
      break;
 8005ff4:	e08c      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	0018      	movs	r0, r3
 8006000:	f000 fb28 	bl	8006654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2108      	movs	r1, #8
 8006010:	430a      	orrs	r2, r1
 8006012:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2104      	movs	r1, #4
 8006020:	438a      	bics	r2, r1
 8006022:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69d9      	ldr	r1, [r3, #28]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	61da      	str	r2, [r3, #28]
      break;
 8006036:	e06b      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f000 fb8f 	bl	8006764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2180      	movs	r1, #128	@ 0x80
 8006052:	0109      	lsls	r1, r1, #4
 8006054:	430a      	orrs	r2, r1
 8006056:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4932      	ldr	r1, [pc, #200]	@ (800612c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006064:	400a      	ands	r2, r1
 8006066:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69d9      	ldr	r1, [r3, #28]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	021a      	lsls	r2, r3, #8
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	61da      	str	r2, [r3, #28]
      break;
 800607c:	e048      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	0011      	movs	r1, r2
 8006086:	0018      	movs	r0, r3
 8006088:	f000 fbd6 	bl	8006838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2108      	movs	r1, #8
 8006098:	430a      	orrs	r2, r1
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2104      	movs	r1, #4
 80060a8:	438a      	bics	r2, r1
 80060aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060be:	e027      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f000 fc15 	bl	80068f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2180      	movs	r1, #128	@ 0x80
 80060da:	0109      	lsls	r1, r1, #4
 80060dc:	430a      	orrs	r2, r1
 80060de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4910      	ldr	r1, [pc, #64]	@ (800612c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80060ec:	400a      	ands	r2, r1
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006104:	e004      	b.n	8006110 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006106:	2317      	movs	r3, #23
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
      break;
 800610e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	223c      	movs	r2, #60	@ 0x3c
 8006114:	2100      	movs	r1, #0
 8006116:	5499      	strb	r1, [r3, r2]

  return status;
 8006118:	2317      	movs	r3, #23
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	781b      	ldrb	r3, [r3, #0]
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b006      	add	sp, #24
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	08006d0c 	.word	0x08006d0c
 800612c:	fffffbff 	.word	0xfffffbff

08006130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	230f      	movs	r3, #15
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	223c      	movs	r2, #60	@ 0x3c
 8006146:	5c9b      	ldrb	r3, [r3, r2]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIM_ConfigClockSource+0x20>
 800614c:	2302      	movs	r3, #2
 800614e:	e0bc      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x19a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	223c      	movs	r2, #60	@ 0x3c
 8006154:	2101      	movs	r1, #1
 8006156:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	223d      	movs	r2, #61	@ 0x3d
 800615c:	2102      	movs	r1, #2
 800615e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4a5a      	ldr	r2, [pc, #360]	@ (80062d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4a59      	ldr	r2, [pc, #356]	@ (80062d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006174:	4013      	ands	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2280      	movs	r2, #128	@ 0x80
 8006186:	0192      	lsls	r2, r2, #6
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_TIM_ConfigClockSource+0xde>
 800618c:	2280      	movs	r2, #128	@ 0x80
 800618e:	0192      	lsls	r2, r2, #6
 8006190:	4293      	cmp	r3, r2
 8006192:	d900      	bls.n	8006196 <HAL_TIM_ConfigClockSource+0x66>
 8006194:	e088      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 8006196:	2280      	movs	r2, #128	@ 0x80
 8006198:	0152      	lsls	r2, r2, #5
 800619a:	4293      	cmp	r3, r2
 800619c:	d100      	bne.n	80061a0 <HAL_TIM_ConfigClockSource+0x70>
 800619e:	e088      	b.n	80062b2 <HAL_TIM_ConfigClockSource+0x182>
 80061a0:	2280      	movs	r2, #128	@ 0x80
 80061a2:	0152      	lsls	r2, r2, #5
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d900      	bls.n	80061aa <HAL_TIM_ConfigClockSource+0x7a>
 80061a8:	e07e      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061aa:	2b70      	cmp	r3, #112	@ 0x70
 80061ac:	d018      	beq.n	80061e0 <HAL_TIM_ConfigClockSource+0xb0>
 80061ae:	d900      	bls.n	80061b2 <HAL_TIM_ConfigClockSource+0x82>
 80061b0:	e07a      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061b2:	2b60      	cmp	r3, #96	@ 0x60
 80061b4:	d04f      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x126>
 80061b6:	d900      	bls.n	80061ba <HAL_TIM_ConfigClockSource+0x8a>
 80061b8:	e076      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061ba:	2b50      	cmp	r3, #80	@ 0x50
 80061bc:	d03b      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x106>
 80061be:	d900      	bls.n	80061c2 <HAL_TIM_ConfigClockSource+0x92>
 80061c0:	e072      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d057      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x146>
 80061c6:	d900      	bls.n	80061ca <HAL_TIM_ConfigClockSource+0x9a>
 80061c8:	e06e      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061ca:	2b30      	cmp	r3, #48	@ 0x30
 80061cc:	d063      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x166>
 80061ce:	d86b      	bhi.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d060      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x166>
 80061d4:	d868      	bhi.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d05d      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x166>
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d05b      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x166>
 80061de:	e063      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f0:	f000 fc62 	bl	8006ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2277      	movs	r2, #119	@ 0x77
 8006200:	4313      	orrs	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]
      break;
 800620c:	e052      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800621e:	f000 fc4b 	bl	8006ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2180      	movs	r1, #128	@ 0x80
 800622e:	01c9      	lsls	r1, r1, #7
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]
      break;
 8006234:	e03e      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	001a      	movs	r2, r3
 8006244:	f000 fbbc 	bl	80069c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2150      	movs	r1, #80	@ 0x50
 800624e:	0018      	movs	r0, r3
 8006250:	f000 fc16 	bl	8006a80 <TIM_ITRx_SetConfig>
      break;
 8006254:	e02e      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006262:	001a      	movs	r2, r3
 8006264:	f000 fbda 	bl	8006a1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2160      	movs	r1, #96	@ 0x60
 800626e:	0018      	movs	r0, r3
 8006270:	f000 fc06 	bl	8006a80 <TIM_ITRx_SetConfig>
      break;
 8006274:	e01e      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006282:	001a      	movs	r2, r3
 8006284:	f000 fb9c 	bl	80069c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2140      	movs	r1, #64	@ 0x40
 800628e:	0018      	movs	r0, r3
 8006290:	f000 fbf6 	bl	8006a80 <TIM_ITRx_SetConfig>
      break;
 8006294:	e00e      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	0019      	movs	r1, r3
 80062a0:	0010      	movs	r0, r2
 80062a2:	f000 fbed 	bl	8006a80 <TIM_ITRx_SetConfig>
      break;
 80062a6:	e005      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80062a8:	230f      	movs	r3, #15
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
      break;
 80062b0:	e000      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80062b2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	223d      	movs	r2, #61	@ 0x3d
 80062b8:	2101      	movs	r1, #1
 80062ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	223c      	movs	r2, #60	@ 0x3c
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]

  return status;
 80062c4:	230f      	movs	r3, #15
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	781b      	ldrb	r3, [r3, #0]
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	ffceff88 	.word	0xffceff88
 80062d8:	ffff00ff 	.word	0xffff00ff

080062dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e4:	46c0      	nop			@ (mov r8, r8)
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b002      	add	sp, #8
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b002      	add	sp, #8
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006304:	46c0      	nop			@ (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006314:	46c0      	nop			@ (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a3b      	ldr	r2, [pc, #236]	@ (800641c <TIM_Base_SetConfig+0x100>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d008      	beq.n	8006346 <TIM_Base_SetConfig+0x2a>
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	2380      	movs	r3, #128	@ 0x80
 8006338:	05db      	lsls	r3, r3, #23
 800633a:	429a      	cmp	r2, r3
 800633c:	d003      	beq.n	8006346 <TIM_Base_SetConfig+0x2a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a37      	ldr	r2, [pc, #220]	@ (8006420 <TIM_Base_SetConfig+0x104>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d108      	bne.n	8006358 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2270      	movs	r2, #112	@ 0x70
 800634a:	4393      	bics	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a30      	ldr	r2, [pc, #192]	@ (800641c <TIM_Base_SetConfig+0x100>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d018      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	2380      	movs	r3, #128	@ 0x80
 8006364:	05db      	lsls	r3, r3, #23
 8006366:	429a      	cmp	r2, r3
 8006368:	d013      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <TIM_Base_SetConfig+0x104>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2b      	ldr	r2, [pc, #172]	@ (8006424 <TIM_Base_SetConfig+0x108>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2a      	ldr	r2, [pc, #168]	@ (8006428 <TIM_Base_SetConfig+0x10c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a29      	ldr	r2, [pc, #164]	@ (800642c <TIM_Base_SetConfig+0x110>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x76>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <TIM_Base_SetConfig+0x114>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a27      	ldr	r2, [pc, #156]	@ (8006434 <TIM_Base_SetConfig+0x118>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2280      	movs	r2, #128	@ 0x80
 80063a8:	4393      	bics	r3, r2
 80063aa:	001a      	movs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a13      	ldr	r2, [pc, #76]	@ (800641c <TIM_Base_SetConfig+0x100>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_Base_SetConfig+0xce>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <TIM_Base_SetConfig+0x10c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_Base_SetConfig+0xce>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a13      	ldr	r2, [pc, #76]	@ (800642c <TIM_Base_SetConfig+0x110>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_Base_SetConfig+0xce>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a12      	ldr	r2, [pc, #72]	@ (8006430 <TIM_Base_SetConfig+0x114>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d103      	bne.n	80063f2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2201      	movs	r2, #1
 80063fe:	4013      	ands	r3, r2
 8006400:	2b01      	cmp	r3, #1
 8006402:	d106      	bne.n	8006412 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2201      	movs	r2, #1
 800640a:	4393      	bics	r3, r2
 800640c:	001a      	movs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]
  }
}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	46bd      	mov	sp, r7
 8006416:	b004      	add	sp, #16
 8006418:	bd80      	pop	{r7, pc}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40002000 	.word	0x40002000
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	fffffcff 	.word	0xfffffcff

08006438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	2201      	movs	r2, #1
 800644e:	4393      	bics	r3, r2
 8006450:	001a      	movs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a32      	ldr	r2, [pc, #200]	@ (8006530 <TIM_OC1_SetConfig+0xf8>)
 8006466:	4013      	ands	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2203      	movs	r2, #3
 800646e:	4393      	bics	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2202      	movs	r2, #2
 8006480:	4393      	bics	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a28      	ldr	r2, [pc, #160]	@ (8006534 <TIM_OC1_SetConfig+0xfc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00b      	beq.n	80064ae <TIM_OC1_SetConfig+0x76>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a27      	ldr	r2, [pc, #156]	@ (8006538 <TIM_OC1_SetConfig+0x100>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_OC1_SetConfig+0x76>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a26      	ldr	r2, [pc, #152]	@ (800653c <TIM_OC1_SetConfig+0x104>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC1_SetConfig+0x76>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a25      	ldr	r2, [pc, #148]	@ (8006540 <TIM_OC1_SetConfig+0x108>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10c      	bne.n	80064c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2208      	movs	r2, #8
 80064b2:	4393      	bics	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2204      	movs	r2, #4
 80064c4:	4393      	bics	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006534 <TIM_OC1_SetConfig+0xfc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <TIM_OC1_SetConfig+0xb0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a19      	ldr	r2, [pc, #100]	@ (8006538 <TIM_OC1_SetConfig+0x100>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_OC1_SetConfig+0xb0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <TIM_OC1_SetConfig+0x104>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC1_SetConfig+0xb0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a17      	ldr	r2, [pc, #92]	@ (8006540 <TIM_OC1_SetConfig+0x108>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d111      	bne.n	800650c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4a16      	ldr	r2, [pc, #88]	@ (8006544 <TIM_OC1_SetConfig+0x10c>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <TIM_OC1_SetConfig+0x110>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	46bd      	mov	sp, r7
 800652a:	b006      	add	sp, #24
 800652c:	bd80      	pop	{r7, pc}
 800652e:	46c0      	nop			@ (mov r8, r8)
 8006530:	fffeff8f 	.word	0xfffeff8f
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800
 8006544:	fffffeff 	.word	0xfffffeff
 8006548:	fffffdff 	.word	0xfffffdff

0800654c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	2210      	movs	r2, #16
 8006562:	4393      	bics	r3, r2
 8006564:	001a      	movs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a2e      	ldr	r2, [pc, #184]	@ (8006634 <TIM_OC2_SetConfig+0xe8>)
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a2d      	ldr	r2, [pc, #180]	@ (8006638 <TIM_OC2_SetConfig+0xec>)
 8006582:	4013      	ands	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2220      	movs	r2, #32
 8006596:	4393      	bics	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	@ (800663c <TIM_OC2_SetConfig+0xf0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d10d      	bne.n	80065ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2280      	movs	r2, #128	@ 0x80
 80065b2:	4393      	bics	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2240      	movs	r2, #64	@ 0x40
 80065c6:	4393      	bics	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <TIM_OC2_SetConfig+0xf0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_OC2_SetConfig+0x9e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <TIM_OC2_SetConfig+0xf4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_OC2_SetConfig+0x9e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <TIM_OC2_SetConfig+0xf8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC2_SetConfig+0x9e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a18      	ldr	r2, [pc, #96]	@ (8006648 <TIM_OC2_SetConfig+0xfc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d113      	bne.n	8006612 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4a17      	ldr	r2, [pc, #92]	@ (800664c <TIM_OC2_SetConfig+0x100>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4a16      	ldr	r2, [pc, #88]	@ (8006650 <TIM_OC2_SetConfig+0x104>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	46c0      	nop			@ (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b006      	add	sp, #24
 8006632:	bd80      	pop	{r7, pc}
 8006634:	feff8fff 	.word	0xfeff8fff
 8006638:	fffffcff 	.word	0xfffffcff
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800
 800664c:	fffffbff 	.word	0xfffffbff
 8006650:	fffff7ff 	.word	0xfffff7ff

08006654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4a33      	ldr	r2, [pc, #204]	@ (8006738 <TIM_OC3_SetConfig+0xe4>)
 800666a:	401a      	ands	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a2f      	ldr	r2, [pc, #188]	@ (800673c <TIM_OC3_SetConfig+0xe8>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2203      	movs	r2, #3
 8006688:	4393      	bics	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <TIM_OC3_SetConfig+0xec>)
 800669a:	4013      	ands	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a25      	ldr	r2, [pc, #148]	@ (8006744 <TIM_OC3_SetConfig+0xf0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10d      	bne.n	80066ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <TIM_OC3_SetConfig+0xf4>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4a20      	ldr	r2, [pc, #128]	@ (800674c <TIM_OC3_SetConfig+0xf8>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006744 <TIM_OC3_SetConfig+0xf0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00b      	beq.n	80066ee <TIM_OC3_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <TIM_OC3_SetConfig+0xfc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d007      	beq.n	80066ee <TIM_OC3_SetConfig+0x9a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <TIM_OC3_SetConfig+0x100>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_OC3_SetConfig+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <TIM_OC3_SetConfig+0x104>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d113      	bne.n	8006716 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	@ (800675c <TIM_OC3_SetConfig+0x108>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <TIM_OC3_SetConfig+0x10c>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	46c0      	nop			@ (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	b006      	add	sp, #24
 8006736:	bd80      	pop	{r7, pc}
 8006738:	fffffeff 	.word	0xfffffeff
 800673c:	fffeff8f 	.word	0xfffeff8f
 8006740:	fffffdff 	.word	0xfffffdff
 8006744:	40012c00 	.word	0x40012c00
 8006748:	fffff7ff 	.word	0xfffff7ff
 800674c:	fffffbff 	.word	0xfffffbff
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800
 800675c:	ffffefff 	.word	0xffffefff
 8006760:	ffffdfff 	.word	0xffffdfff

08006764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <TIM_OC4_SetConfig+0xb0>)
 800677a:	401a      	ands	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a22      	ldr	r2, [pc, #136]	@ (8006818 <TIM_OC4_SetConfig+0xb4>)
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a21      	ldr	r2, [pc, #132]	@ (800681c <TIM_OC4_SetConfig+0xb8>)
 8006798:	4013      	ands	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <TIM_OC4_SetConfig+0xbc>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	@ (8006824 <TIM_OC4_SetConfig+0xc0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_OC4_SetConfig+0x78>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	@ (8006828 <TIM_OC4_SetConfig+0xc4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_OC4_SetConfig+0x78>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	@ (800682c <TIM_OC4_SetConfig+0xc8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC4_SetConfig+0x78>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <TIM_OC4_SetConfig+0xcc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d109      	bne.n	80067f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <TIM_OC4_SetConfig+0xd0>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b006      	add	sp, #24
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	ffffefff 	.word	0xffffefff
 8006818:	feff8fff 	.word	0xfeff8fff
 800681c:	fffffcff 	.word	0xfffffcff
 8006820:	ffffdfff 	.word	0xffffdfff
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800
 8006834:	ffffbfff 	.word	0xffffbfff

08006838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	4a23      	ldr	r2, [pc, #140]	@ (80068dc <TIM_OC5_SetConfig+0xa4>)
 800684e:	401a      	ands	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <TIM_OC5_SetConfig+0xa8>)
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4a1b      	ldr	r2, [pc, #108]	@ (80068e4 <TIM_OC5_SetConfig+0xac>)
 8006876:	4013      	ands	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a17      	ldr	r2, [pc, #92]	@ (80068e8 <TIM_OC5_SetConfig+0xb0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_OC5_SetConfig+0x6e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a16      	ldr	r2, [pc, #88]	@ (80068ec <TIM_OC5_SetConfig+0xb4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_OC5_SetConfig+0x6e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <TIM_OC5_SetConfig+0xb8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC5_SetConfig+0x6e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a14      	ldr	r2, [pc, #80]	@ (80068f4 <TIM_OC5_SetConfig+0xbc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d109      	bne.n	80068ba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4a0c      	ldr	r2, [pc, #48]	@ (80068dc <TIM_OC5_SetConfig+0xa4>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	46c0      	nop			@ (mov r8, r8)
 80068d6:	46bd      	mov	sp, r7
 80068d8:	b006      	add	sp, #24
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	fffeffff 	.word	0xfffeffff
 80068e0:	fffeff8f 	.word	0xfffeff8f
 80068e4:	fffdffff 	.word	0xfffdffff
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800

080068f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <TIM_OC6_SetConfig+0xa8>)
 800690e:	401a      	ands	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a20      	ldr	r2, [pc, #128]	@ (80069a4 <TIM_OC6_SetConfig+0xac>)
 8006924:	4013      	ands	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4a1c      	ldr	r2, [pc, #112]	@ (80069a8 <TIM_OC6_SetConfig+0xb0>)
 8006938:	4013      	ands	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a18      	ldr	r2, [pc, #96]	@ (80069ac <TIM_OC6_SetConfig+0xb4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00b      	beq.n	8006968 <TIM_OC6_SetConfig+0x70>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a17      	ldr	r2, [pc, #92]	@ (80069b0 <TIM_OC6_SetConfig+0xb8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <TIM_OC6_SetConfig+0x70>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a16      	ldr	r2, [pc, #88]	@ (80069b4 <TIM_OC6_SetConfig+0xbc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_OC6_SetConfig+0x70>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a15      	ldr	r2, [pc, #84]	@ (80069b8 <TIM_OC6_SetConfig+0xc0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d109      	bne.n	800697c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4a14      	ldr	r2, [pc, #80]	@ (80069bc <TIM_OC6_SetConfig+0xc4>)
 800696c:	4013      	ands	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	029b      	lsls	r3, r3, #10
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	b006      	add	sp, #24
 800699c:	bd80      	pop	{r7, pc}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	ffefffff 	.word	0xffefffff
 80069a4:	feff8fff 	.word	0xfeff8fff
 80069a8:	ffdfffff 	.word	0xffdfffff
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800
 80069bc:	fffbffff 	.word	0xfffbffff

080069c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	2201      	movs	r2, #1
 80069d8:	4393      	bics	r3, r2
 80069da:	001a      	movs	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	22f0      	movs	r2, #240	@ 0xf0
 80069ea:	4393      	bics	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	220a      	movs	r2, #10
 80069fc:	4393      	bics	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	46c0      	nop			@ (mov r8, r8)
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b006      	add	sp, #24
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	2210      	movs	r2, #16
 8006a34:	4393      	bics	r3, r2
 8006a36:	001a      	movs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4a0d      	ldr	r2, [pc, #52]	@ (8006a7c <TIM_TI2_ConfigInputStage+0x60>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	031b      	lsls	r3, r3, #12
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	22a0      	movs	r2, #160	@ 0xa0
 8006a58:	4393      	bics	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b006      	add	sp, #24
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	ffff0fff 	.word	0xffff0fff

08006a80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a08      	ldr	r2, [pc, #32]	@ (8006ab4 <TIM_ITRx_SetConfig+0x34>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b004      	add	sp, #16
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	ffcfff8f 	.word	0xffcfff8f

08006ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4a09      	ldr	r2, [pc, #36]	@ (8006af4 <TIM_ETR_SetConfig+0x3c>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	46c0      	nop			@ (mov r8, r8)
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b006      	add	sp, #24
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	ffff00ff 	.word	0xffff00ff

08006af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	221f      	movs	r2, #31
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	0013      	movs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	43d2      	mvns	r2, r2
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	211f      	movs	r1, #31
 8006b28:	400b      	ands	r3, r1
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4099      	lsls	r1, r3
 8006b2e:	000b      	movs	r3, r1
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b006      	add	sp, #24
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	223c      	movs	r2, #60	@ 0x3c
 8006b4e:	5c9b      	ldrb	r3, [r3, r2]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e055      	b.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	223c      	movs	r2, #60	@ 0x3c
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	223d      	movs	r2, #61	@ 0x3d
 8006b64:	2102      	movs	r1, #2
 8006b66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a23      	ldr	r2, [pc, #140]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d108      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4a22      	ldr	r2, [pc, #136]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2270      	movs	r2, #112	@ 0x70
 8006b98:	4393      	bics	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00f      	beq.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	2380      	movs	r3, #128	@ 0x80
 8006bbe:	05db      	lsls	r3, r3, #23
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d009      	beq.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a12      	ldr	r2, [pc, #72]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a11      	ldr	r2, [pc, #68]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d10c      	bne.n	8006bf2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2280      	movs	r2, #128	@ 0x80
 8006bdc:	4393      	bics	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	223d      	movs	r2, #61	@ 0x3d
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	223c      	movs	r2, #60	@ 0x3c
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	0018      	movs	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b004      	add	sp, #16
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	ff0fffff 	.word	0xff0fffff
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40014000 	.word	0x40014000

08006c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c24:	46c0      	nop			@ (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	b002      	add	sp, #8
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c34:	46c0      	nop			@ (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c44:	46c0      	nop			@ (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <memset>:
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	1882      	adds	r2, r0, r2
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	7019      	strb	r1, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	2600      	movs	r6, #0
 8006c60:	4c0c      	ldr	r4, [pc, #48]	@ (8006c94 <__libc_init_array+0x38>)
 8006c62:	4d0d      	ldr	r5, [pc, #52]	@ (8006c98 <__libc_init_array+0x3c>)
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	f000 f819 	bl	8006ca4 <_init>
 8006c72:	4c0a      	ldr	r4, [pc, #40]	@ (8006c9c <__libc_init_array+0x40>)
 8006c74:	4d0a      	ldr	r5, [pc, #40]	@ (8006ca0 <__libc_init_array+0x44>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	00b3      	lsls	r3, r6, #2
 8006c82:	58eb      	ldr	r3, [r5, r3]
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	00b3      	lsls	r3, r6, #2
 8006c8c:	58eb      	ldr	r3, [r5, r3]
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	08006d60 	.word	0x08006d60
 8006c98:	08006d60 	.word	0x08006d60
 8006c9c:	08006d64 	.word	0x08006d64
 8006ca0:	08006d60 	.word	0x08006d60

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	46c0      	nop			@ (mov r8, r8)
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
