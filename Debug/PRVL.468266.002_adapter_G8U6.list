
PRVL.468266.002_adapter_G8U6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006710  08006710  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006710  08006710  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006710  08006710  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006718  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08006728  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08006728  00008188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6e5  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002356  00000000  00000000  0001671d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00018a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be0  00000000  00000000  000199a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e40  00000000  00000000  0001a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e98  00000000  00000000  000323c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009affb  00000000  00000000  00044258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  000df298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e29c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006654 	.word	0x08006654

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08006654 	.word	0x08006654

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <OpenKey>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
void OpenKey()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_RESET);
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <OpenKey+0x24>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	@ 0x40
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fc95 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <OpenKey+0x24>)
 8000402:	2200      	movs	r2, #0
 8000404:	2108      	movs	r1, #8
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fc8f 	bl	8001d2a <HAL_GPIO_WritePin>

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	50000400 	.word	0x50000400

08000418 <CloseKey>:

void CloseKey()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_SET);
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <CloseKey+0x24>)
 800041e:	2201      	movs	r2, #1
 8000420:	2140      	movs	r1, #64	@ 0x40
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fc81 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_SET);
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <CloseKey+0x24>)
 800042a:	2201      	movs	r2, #1
 800042c:	2108      	movs	r1, #8
 800042e:	0018      	movs	r0, r3
 8000430:	f001 fc7b 	bl	8001d2a <HAL_GPIO_WritePin>

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	50000400 	.word	0x50000400

08000440 <ResetFan>:
uint16_t minRPM = 0;
uint8_t statusFAN1 = 0;
uint8_t statusFAN2 = 0;

void ResetFan()
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b089      	sub	sp, #36	@ 0x24
 8000444:	af04      	add	r7, sp, #16
	while (HAL_I2C_IsDeviceReady(&hi2c1, (0x51 << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	2301      	movs	r3, #1
 800044a:	425b      	negs	r3, r3
 800044c:	4837      	ldr	r0, [pc, #220]	@ (800052c <ResetFan+0xec>)
 800044e:	220a      	movs	r2, #10
 8000450:	21a2      	movs	r1, #162	@ 0xa2
 8000452:	f002 f90f 	bl	8002674 <HAL_I2C_IsDeviceReady>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d1f6      	bne.n	8000448 <ResetFan+0x8>
	{}
	uint8_t pData[1] = {0x40};
 800045a:	210c      	movs	r1, #12
 800045c:	187b      	adds	r3, r7, r1
 800045e:	4a34      	ldr	r2, [pc, #208]	@ (8000530 <ResetFan+0xf0>)
 8000460:	7812      	ldrb	r2, [r2, #0]
 8000462:	701a      	strb	r2, [r3, #0]
	uint8_t pData_2[1] = {0x02};
 8000464:	2408      	movs	r4, #8
 8000466:	193b      	adds	r3, r7, r4
 8000468:	4a32      	ldr	r2, [pc, #200]	@ (8000534 <ResetFan+0xf4>)
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	701a      	strb	r2, [r3, #0]
	uint8_t pData_3[1] = {0xFF};
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4a31      	ldr	r2, [pc, #196]	@ (8000538 <ResetFan+0xf8>)
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x51 << 1), MAX31760_CR1_REG, 1, pData, 1, 100);
 8000476:	482d      	ldr	r0, [pc, #180]	@ (800052c <ResetFan+0xec>)
 8000478:	2364      	movs	r3, #100	@ 0x64
 800047a:	9302      	str	r3, [sp, #8]
 800047c:	2301      	movs	r3, #1
 800047e:	9301      	str	r3, [sp, #4]
 8000480:	187b      	adds	r3, r7, r1
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	2301      	movs	r3, #1
 8000486:	2200      	movs	r2, #0
 8000488:	21a2      	movs	r1, #162	@ 0xa2
 800048a:	f001 fe91 	bl	80021b0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 800048e:	20c8      	movs	r0, #200	@ 0xc8
 8000490:	f001 f93c 	bl	800170c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, (0x51 << 1), 0x02, 1, pData_2, 1, 100);
 8000494:	4825      	ldr	r0, [pc, #148]	@ (800052c <ResetFan+0xec>)
 8000496:	2364      	movs	r3, #100	@ 0x64
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	2301      	movs	r3, #1
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	2202      	movs	r2, #2
 80004a6:	21a2      	movs	r1, #162	@ 0xa2
 80004a8:	f001 fe82 	bl	80021b0 <HAL_I2C_Mem_Write>
	HAL_Delay(50);
 80004ac:	2032      	movs	r0, #50	@ 0x32
 80004ae:	f001 f92d 	bl	800170c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, (0x51 << 1), 0x04, 1, pData_3, 1, 100);
 80004b2:	481e      	ldr	r0, [pc, #120]	@ (800052c <ResetFan+0xec>)
 80004b4:	2364      	movs	r3, #100	@ 0x64
 80004b6:	9302      	str	r3, [sp, #8]
 80004b8:	2301      	movs	r3, #1
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	2204      	movs	r2, #4
 80004c4:	21a2      	movs	r1, #162	@ 0xa2
 80004c6:	f001 fe73 	bl	80021b0 <HAL_I2C_Mem_Write>
	HAL_Delay(50);
 80004ca:	2032      	movs	r0, #50	@ 0x32
 80004cc:	f001 f91e 	bl	800170c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c1, (0x54 << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	2301      	movs	r3, #1
 80004d4:	425b      	negs	r3, r3
 80004d6:	4815      	ldr	r0, [pc, #84]	@ (800052c <ResetFan+0xec>)
 80004d8:	220a      	movs	r2, #10
 80004da:	21a8      	movs	r1, #168	@ 0xa8
 80004dc:	f002 f8ca 	bl	8002674 <HAL_I2C_IsDeviceReady>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d1f6      	bne.n	80004d2 <ResetFan+0x92>
	{}
	HAL_I2C_Mem_Write(&hi2c1, (0x54<<1), MAX31760_CR1_REG, 1, pData, 1, 100);
 80004e4:	4811      	ldr	r0, [pc, #68]	@ (800052c <ResetFan+0xec>)
 80004e6:	2364      	movs	r3, #100	@ 0x64
 80004e8:	9302      	str	r3, [sp, #8]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	230c      	movs	r3, #12
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	2200      	movs	r2, #0
 80004f8:	21a8      	movs	r1, #168	@ 0xa8
 80004fa:	f001 fe59 	bl	80021b0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80004fe:	20c8      	movs	r0, #200	@ 0xc8
 8000500:	f001 f904 	bl	800170c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, (0x54 << 1), 0x04, 1, pData_3, 1, 100);
 8000504:	4809      	ldr	r0, [pc, #36]	@ (800052c <ResetFan+0xec>)
 8000506:	2364      	movs	r3, #100	@ 0x64
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2204      	movs	r2, #4
 8000516:	21a8      	movs	r1, #168	@ 0xa8
 8000518:	f001 fe4a 	bl	80021b0 <HAL_I2C_Mem_Write>
	HAL_Delay(50);
 800051c:	2032      	movs	r0, #50	@ 0x32
 800051e:	f001 f8f5 	bl	800170c <HAL_Delay>

}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b005      	add	sp, #20
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	20000030 	.word	0x20000030
 8000530:	0800666c 	.word	0x0800666c
 8000534:	08006670 	.word	0x08006670
 8000538:	08006674 	.word	0x08006674

0800053c <ReadTachRegister>:
uint16_t ReadTachRegister(uint8_t address, uint8_t regMSB, uint8_t regLSB)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af04      	add	r7, sp, #16
 8000542:	0004      	movs	r4, r0
 8000544:	0008      	movs	r0, r1
 8000546:	0011      	movs	r1, r2
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	1c22      	adds	r2, r4, #0
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	1dbb      	adds	r3, r7, #6
 8000550:	1c02      	adds	r2, r0, #0
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	1d7b      	adds	r3, r7, #5
 8000556:	1c0a      	adds	r2, r1, #0
 8000558:	701a      	strb	r2, [r3, #0]
	uint8_t msb, lsb;  // @suppress("Multiple variable declaration")

	HAL_I2C_Mem_Read(&hi2c1, address << 1, regMSB, I2C_MEMADD_SIZE_8BIT, &msb, 1, 100);
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	18db      	adds	r3, r3, r3
 8000562:	b299      	uxth	r1, r3
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b29a      	uxth	r2, r3
 800056a:	4816      	ldr	r0, [pc, #88]	@ (80005c4 <ReadTachRegister+0x88>)
 800056c:	2364      	movs	r3, #100	@ 0x64
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	2301      	movs	r3, #1
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	240f      	movs	r4, #15
 8000576:	193b      	adds	r3, r7, r4
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	f001 ff46 	bl	800240c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, address << 1, regLSB, I2C_MEMADD_SIZE_8BIT, &lsb, 1, 100);
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29b      	uxth	r3, r3
 8000586:	18db      	adds	r3, r3, r3
 8000588:	b299      	uxth	r1, r3
 800058a:	1d7b      	adds	r3, r7, #5
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <ReadTachRegister+0x88>)
 8000592:	2364      	movs	r3, #100	@ 0x64
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	2301      	movs	r3, #1
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	250e      	movs	r5, #14
 800059c:	197b      	adds	r3, r7, r5
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	f001 ff33 	bl	800240c <HAL_I2C_Mem_Read>
	return (msb << 8) | lsb; // Объединяем MSB и LSB в 16-битное значение
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	021b      	lsls	r3, r3, #8
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	197b      	adds	r3, r7, r5
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	b29b      	uxth	r3, r3
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bdb0      	pop	{r4, r5, r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	20000030 	.word	0x20000030

080005c8 <Read_Fan_Tachometer>:


void Read_Fan_Tachometer()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	tachValue2 = ReadTachRegister(0x51, MAX31760_TACH1_MSB, MAX31760_TACH1_LSB); // Первый контроллер, второй тахометр
 80005cc:	2253      	movs	r2, #83	@ 0x53
 80005ce:	2152      	movs	r1, #82	@ 0x52
 80005d0:	2051      	movs	r0, #81	@ 0x51
 80005d2:	f7ff ffb3 	bl	800053c <ReadTachRegister>
 80005d6:	0003      	movs	r3, r0
 80005d8:	001a      	movs	r2, r3
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <Read_Fan_Tachometer+0x40>)
 80005dc:	801a      	strh	r2, [r3, #0]
	tachValue3 = ReadTachRegister(0x54, MAX31760_TACH1_MSB, MAX31760_TACH1_LSB); // Второй контроллер, первый тахометр
 80005de:	2253      	movs	r2, #83	@ 0x53
 80005e0:	2152      	movs	r1, #82	@ 0x52
 80005e2:	2054      	movs	r0, #84	@ 0x54
 80005e4:	f7ff ffaa 	bl	800053c <ReadTachRegister>
 80005e8:	0003      	movs	r3, r0
 80005ea:	001a      	movs	r2, r3
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <Read_Fan_Tachometer+0x44>)
 80005ee:	801a      	strh	r2, [r3, #0]
	tachValue4 = ReadTachRegister(0x54, MAX31760_TACH2_MSB, MAX31760_TACH2_LSB); // Второй контроллер, второй тахометр
 80005f0:	2255      	movs	r2, #85	@ 0x55
 80005f2:	2154      	movs	r1, #84	@ 0x54
 80005f4:	2054      	movs	r0, #84	@ 0x54
 80005f6:	f7ff ffa1 	bl	800053c <ReadTachRegister>
 80005fa:	0003      	movs	r3, r0
 80005fc:	001a      	movs	r2, r3
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <Read_Fan_Tachometer+0x48>)
 8000600:	801a      	strh	r2, [r3, #0]
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000170 	.word	0x20000170
 800060c:	20000172 	.word	0x20000172
 8000610:	20000174 	.word	0x20000174

08000614 <CalculateRPM>:
	HAL_I2C_Mem_Read(&hi2c1,( 0x51 << 1), 0x5A, I2C_MEMADD_SIZE_8BIT, &statusFAN1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, (0x54 << 1), 0x5A, I2C_MEMADD_SIZE_8BIT, &statusFAN2, 1, 100);
}

uint16_t CalculateRPM(uint16_t tachValue)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	801a      	strh	r2, [r3, #0]
	if (tachValue == 0) return 0; // �?збегаем деления на ноль
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <CalculateRPM+0x18>
 8000628:	2300      	movs	r3, #0
 800062a:	e008      	b.n	800063e <CalculateRPM+0x2a>
	return (60 * 100000) / (tachValue*TACH_PULSES_PER_REV);
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	0019      	movs	r1, r3
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <CalculateRPM+0x34>)
 8000636:	f7ff fdef 	bl	8000218 <__divsi3>
 800063a:	0003      	movs	r3, r0
 800063c:	b29b      	uxth	r3, r3
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	005b8d80 	.word	0x005b8d80

0800064c <GetMinRPM>:



uint16_t GetMinRPM(uint16_t rpm2, uint16_t rpm3, uint16_t rpm4)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	0004      	movs	r4, r0
 8000654:	0008      	movs	r0, r1
 8000656:	0011      	movs	r1, r2
 8000658:	1dbb      	adds	r3, r7, #6
 800065a:	1c22      	adds	r2, r4, #0
 800065c:	801a      	strh	r2, [r3, #0]
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	1c02      	adds	r2, r0, #0
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	1cbb      	adds	r3, r7, #2
 8000666:	1c0a      	adds	r2, r1, #0
 8000668:	801a      	strh	r2, [r3, #0]
	uint16_t minRPM = rpm3; // Предполагаем, что первое значение минимальное
 800066a:	210e      	movs	r1, #14
 800066c:	187b      	adds	r3, r7, r1
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	8812      	ldrh	r2, [r2, #0]
 8000672:	801a      	strh	r2, [r3, #0]

	if (rpm3 < minRPM) {
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	8812      	ldrh	r2, [r2, #0]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d203      	bcs.n	8000688 <GetMinRPM+0x3c>
		minRPM = rpm3; // Обновляем минимум, если второе значение меньше
 8000680:	187b      	adds	r3, r7, r1
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	8812      	ldrh	r2, [r2, #0]
 8000686:	801a      	strh	r2, [r3, #0]
	}
	if (rpm4 < minRPM) {
 8000688:	1cba      	adds	r2, r7, #2
 800068a:	210e      	movs	r1, #14
 800068c:	187b      	adds	r3, r7, r1
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d203      	bcs.n	800069e <GetMinRPM+0x52>
		minRPM = rpm4; // Обновляем минимум, если третье значение меньше
 8000696:	187b      	adds	r3, r7, r1
 8000698:	1cba      	adds	r2, r7, #2
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	801a      	strh	r2, [r3, #0]
	}

	return minRPM; // Возвращаем минимальное значение
 800069e:	230e      	movs	r3, #14
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	881b      	ldrh	r3, [r3, #0]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b005      	add	sp, #20
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <Calculate_RPM>:

void Calculate_RPM()
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

	uint16_t rpm2 = CalculateRPM(tachValue2);
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <Calculate_RPM+0x58>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	1dbc      	adds	r4, r7, #6
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ffab 	bl	8000614 <CalculateRPM>
 80006be:	0003      	movs	r3, r0
 80006c0:	8023      	strh	r3, [r4, #0]
	uint16_t rpm3 = CalculateRPM(tachValue3);
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <Calculate_RPM+0x5c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	1d3c      	adds	r4, r7, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ffa3 	bl	8000614 <CalculateRPM>
 80006ce:	0003      	movs	r3, r0
 80006d0:	8023      	strh	r3, [r4, #0]
	uint16_t rpm4 = CalculateRPM(tachValue4);
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <Calculate_RPM+0x60>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	1cbc      	adds	r4, r7, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ff9b 	bl	8000614 <CalculateRPM>
 80006de:	0003      	movs	r3, r0
 80006e0:	8023      	strh	r3, [r4, #0]

	// Здесь можно сохранить значения RPM в глобальные переменные или передать их дальше
	minRPM = GetMinRPM(rpm2, rpm3, rpm4);
 80006e2:	1cbb      	adds	r3, r7, #2
 80006e4:	881a      	ldrh	r2, [r3, #0]
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	8819      	ldrh	r1, [r3, #0]
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ffac 	bl	800064c <GetMinRPM>
 80006f4:	0003      	movs	r3, r0
 80006f6:	001a      	movs	r2, r3
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <Calculate_RPM+0x64>)
 80006fa:	801a      	strh	r2, [r3, #0]
}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b003      	add	sp, #12
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	20000170 	.word	0x20000170
 8000708:	20000172 	.word	0x20000172
 800070c:	20000174 	.word	0x20000174
 8000710:	2000017c 	.word	0x2000017c

08000714 <FanContrlSetDuty>:

void FanContrlSetDuty(I2C_HandleTypeDef *hi2c, uint16_t slaveAddress, uint8_t duty)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af04      	add	r7, sp, #16
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	0008      	movs	r0, r1
 800071e:	0011      	movs	r1, r2
 8000720:	1cbb      	adds	r3, r7, #2
 8000722:	1c02      	adds	r2, r0, #0
 8000724:	801a      	strh	r2, [r3, #0]
 8000726:	1c7b      	adds	r3, r7, #1
 8000728:	1c0a      	adds	r2, r1, #0
 800072a:	701a      	strb	r2, [r3, #0]
	uint8_t comm;
	uint8_t aTxBuffer[1] = {0};
 800072c:	240c      	movs	r4, #12
 800072e:	193b      	adds	r3, r7, r4
 8000730:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <FanContrlSetDuty+0x84>)
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	701a      	strb	r2, [r3, #0]


	comm = MAX31760_PWM_DUTY_REG;
 8000736:	250f      	movs	r5, #15
 8000738:	197b      	adds	r3, r7, r5
 800073a:	2250      	movs	r2, #80	@ 0x50
 800073c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = duty;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	1c7a      	adds	r2, r7, #1
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, slaveAddress, comm, 1, aTxBuffer, 1, 100);
 8000746:	197b      	adds	r3, r7, r5
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b29a      	uxth	r2, r3
 800074c:	1cbb      	adds	r3, r7, #2
 800074e:	8819      	ldrh	r1, [r3, #0]
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	193b      	adds	r3, r7, r4
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	f001 fd26 	bl	80021b0 <HAL_I2C_Mem_Write>



	comm = _FAN2_FAIL_DUTY_REGISTER;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = duty;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	1c7a      	adds	r2, r7, #1
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, slaveAddress, comm, 1, aTxBuffer, 1, 100);
 8000772:	197b      	adds	r3, r7, r5
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b29a      	uxth	r2, r3
 8000778:	1cbb      	adds	r3, r7, #2
 800077a:	8819      	ldrh	r1, [r3, #0]
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	9302      	str	r3, [sp, #8]
 8000782:	2301      	movs	r3, #1
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	193b      	adds	r3, r7, r4
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	f001 fd10 	bl	80021b0 <HAL_I2C_Mem_Write>
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b004      	add	sp, #16
 8000796:	bdb0      	pop	{r4, r5, r7, pc}
 8000798:	08006678 	.word	0x08006678

0800079c <SetPWMFrequency>:

void SetPWMFrequency(uint8_t address, uint8_t frequencySetting) {
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b087      	sub	sp, #28
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	0002      	movs	r2, r0
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	1c0a      	adds	r2, r1, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	uint8_t data[2] = {MAX31760_CR1_REG, frequencySetting};
 80007ae:	200c      	movs	r0, #12
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	183b      	adds	r3, r7, r0
 80007b8:	1dba      	adds	r2, r7, #6
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	705a      	strb	r2, [r3, #1]

	uint8_t data_2[2] = {MAX31760_CR2_REG, 0x11};
 80007be:	2408      	movs	r4, #8
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <SetPWMFrequency+0x64>)
 80007c4:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, (address << 1), data, 2, 100);
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	18db      	adds	r3, r3, r3
 80007ce:	b299      	uxth	r1, r3
 80007d0:	183a      	adds	r2, r7, r0
 80007d2:	480c      	ldr	r0, [pc, #48]	@ (8000804 <SetPWMFrequency+0x68>)
 80007d4:	2364      	movs	r3, #100	@ 0x64
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2302      	movs	r3, #2
 80007da:	f001 fb69 	bl	8001eb0 <HAL_I2C_Master_Transmit>


	HAL_I2C_Master_Transmit(&hi2c1, (address << 1), data_2, 2, 100);
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	18db      	adds	r3, r3, r3
 80007e6:	b299      	uxth	r1, r3
 80007e8:	193a      	adds	r2, r7, r4
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <SetPWMFrequency+0x68>)
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	f001 fb5d 	bl	8001eb0 <HAL_I2C_Master_Transmit>
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b005      	add	sp, #20
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	00001101 	.word	0x00001101
 8000804:	20000030 	.word	0x20000030

08000808 <InitMAX31760>:

	uint8_t data[2] = {reg, value};
	HAL_I2C_Master_Transmit(&hi2c1, (address << 1), data, 2, 100);
}

void InitMAX31760(uint8_t address) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
	// Установка частоты Ш�?М 24 кГц
	// Значение для регистра 0x32 зависит от формулы в документации
	// Например, если для 24 кГц нужно значение 0x4B:

	SetPWMFrequency(address, 0x19);
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2119      	movs	r1, #25
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff ffbe 	bl	800079c <SetPWMFrequency>
	// Установка коэффициента заполнения Ш�?М 50%
	FanContrlSetDuty(&hi2c1, (address << 1), 0xFF);
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
 8000826:	18db      	adds	r3, r3, r3
 8000828:	b299      	uxth	r1, r3
 800082a:	4b04      	ldr	r3, [pc, #16]	@ (800083c <InitMAX31760+0x34>)
 800082c:	22ff      	movs	r2, #255	@ 0xff
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff ff70 	bl	8000714 <FanContrlSetDuty>

}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000030 	.word	0x20000030

08000840 <SetButton>:

void SetButton(GPIO_PinState state)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PWR_SW_GPIO_Port, PWR_SW_Pin, state);
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	23a0      	movs	r3, #160	@ 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2110      	movs	r1, #16
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fa67 	bl	8001d2a <HAL_GPIO_WritePin>
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}

08000864 <PressButton>:

void PressButton(uint16_t time)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	801a      	strh	r2, [r3, #0]
	SetButton(GPIO_PIN_RESET);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ffe5 	bl	8000840 <SetButton>
	HAL_Delay(time);
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	f000 ff46 	bl	800170c <HAL_Delay>
	SetButton(GPIO_PIN_SET);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ffdd 	bl	8000840 <SetButton>
}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <SetPWROK>:

void SetPWROK(PWROKState state)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, (state == HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	425a      	negs	r2, r3
 80008a4:	4153      	adcs	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	001a      	movs	r2, r3
 80008aa:	23a0      	movs	r3, #160	@ 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2108      	movs	r1, #8
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa3a 	bl	8001d2a <HAL_GPIO_WritePin>
	PWR_OK_State = state;
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <SetPWROK+0x38>)
 80008b8:	1dfa      	adds	r2, r7, #7
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	701a      	strb	r2, [r3, #0]
}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b002      	add	sp, #8
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	20000179 	.word	0x20000179

080008cc <SetTempMode>:
void SetTempMode()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	MCU_attach = HAL_GPIO_ReadPin(MCU_ATTACH_IN_GPIO_Port, MCU_ATTACH_IN_Pin);
 80008d0:	23a0      	movs	r3, #160	@ 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fa0a 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80008dc:	0003      	movs	r3, r0
 80008de:	001a      	movs	r2, r3
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <SetTempMode+0x50>)
 80008e2:	701a      	strb	r2, [r3, #0]
	if(MCU_attach == 1) {
 80008e4:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <SetTempMode+0x50>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d103      	bne.n	80008f4 <SetTempMode+0x28>
		TempMode = 0;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <SetTempMode+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	} else if (MCU_attach == 0 && temperature > 50 )
	{
		TempMode = 0;
	}else TempMode = 1;
}
 80008f2:	e00f      	b.n	8000914 <SetTempMode+0x48>
	} else if (MCU_attach == 0 && temperature > 50 )
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <SetTempMode+0x50>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d108      	bne.n	800090e <SetTempMode+0x42>
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <SetTempMode+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b25b      	sxtb	r3, r3
 8000902:	2b32      	cmp	r3, #50	@ 0x32
 8000904:	dd03      	ble.n	800090e <SetTempMode+0x42>
		TempMode = 0;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SetTempMode+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	e002      	b.n	8000914 <SetTempMode+0x48>
	}else TempMode = 1;
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <SetTempMode+0x54>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	2000002d 	.word	0x2000002d
 8000920:	20000000 	.word	0x20000000
 8000924:	2000017b 	.word	0x2000017b

08000928 <Send_Fan_Tachometer_To_Motherboard>:

void Send_Fan_Tachometer_To_Motherboard() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	// Пример: генерация Ш�?М сигнала с частотой 1 кГц и duty cycle, соответствующим значению RPM
	uint32_t period1 = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]

	if (minRPM > 0) {
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <Send_Fan_Tachometer_To_Motherboard+0x50>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d009      	beq.n	800094e <Send_Fan_Tachometer_To_Motherboard+0x26>
		// Вычисляем период таймера для заданного RPM

		period1 = (1000000 / (minRPM * 2));
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <Send_Fan_Tachometer_To_Motherboard+0x50>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	0019      	movs	r1, r3
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <Send_Fan_Tachometer_To_Motherboard+0x54>)
 8000944:	f7ff fc68 	bl	8000218 <__divsi3>
 8000948:	0003      	movs	r3, r0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	e001      	b.n	8000952 <Send_Fan_Tachometer_To_Motherboard+0x2a>
	} else {
		// Если RPM == 0, устанавливаем максимальный период (или другой порог)
		period1 = 1000 - 1; // Например, 1 мс (частота 1 кГц)
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <Send_Fan_Tachometer_To_Motherboard+0x58>)
 8000950:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, period1 - 1); // Установка периода 1 мс (частота 1 кГц)
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	3a01      	subs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 8000962:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period1 / 2); // Установка duty cycle пропорционально значению RPM
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <Send_Fan_Tachometer_To_Motherboard+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	0852      	lsrs	r2, r2, #1
 800096c:	639a      	str	r2, [r3, #56]	@ 0x38

}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	2000017c 	.word	0x2000017c
 800097c:	000f4240 	.word	0x000f4240
 8000980:	000003e7 	.word	0x000003e7
 8000984:	200000d8 	.word	0x200000d8

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fe38 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f892 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f000 fa6e 	bl	8000e74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000998:	f000 f912 	bl	8000bc0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800099c:	f000 f952 	bl	8000c44 <MX_I2C2_Init>
  MX_TIM2_Init();
 80009a0:	f000 f990 	bl	8000cc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a4:	f000 fa0e 	bl	8000dc4 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009a8:	f000 f8e4 	bl	8000b74 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(200);
 80009ac:	20c8      	movs	r0, #200	@ 0xc8
 80009ae:	f000 fead 	bl	800170c <HAL_Delay>
	ResetFan();
 80009b2:	f7ff fd45 	bl	8000440 <ResetFan>
	HAL_Delay(200);
 80009b6:	20c8      	movs	r0, #200	@ 0xc8
 80009b8:	f000 fea8 	bl	800170c <HAL_Delay>
	SetButton(GPIO_PIN_SET);
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ff3f 	bl	8000840 <SetButton>
	SetPWROK(HIGH);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff64 	bl	8000890 <SetPWROK>
	InitMAX31760(0x54); // �?нициализация первого контроллера
 80009c8:	2054      	movs	r0, #84	@ 0x54
 80009ca:	f7ff ff1d 	bl	8000808 <InitMAX31760>
	InitMAX31760(0x51); // �?нициализация второго контроллера
 80009ce:	2051      	movs	r0, #81	@ 0x51
 80009d0:	f7ff ff1a 	bl	8000808 <InitMAX31760>

	HAL_TIM_Base_Start_IT(&htim3);
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <main+0x10c>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f004 fcd4 	bl	8005384 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //запуск Ш�?М
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <main+0x110>)
 80009de:	2104      	movs	r1, #4
 80009e0:	0018      	movs	r0, r3
 80009e2:	f004 fd8b 	bl	80054fc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_SET);
 80009e6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <main+0x114>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	2108      	movs	r1, #8
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 f99c 	bl	8001d2a <HAL_GPIO_WritePin>
	Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 80009f2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <main+0x114>)
 80009f4:	2110      	movs	r1, #16
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 f97a 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <main+0x118>)
 8000a02:	701a      	strb	r2, [r3, #0]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <main+0x114>)
 8000a06:	2110      	movs	r1, #16
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 f971 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <main+0x118>)
 8000a14:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8000a16:	4923      	ldr	r1, [pc, #140]	@ (8000aa4 <main+0x11c>)
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <main+0x120>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fb71 	bl	8002104 <HAL_I2C_Slave_Receive_IT>

		// Управление вентиляторами
		if (TempMode == 0) {
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <main+0x124>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <main+0xbc>
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0xF0); // Установка Ш�?М на 50% для первого контроллера
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <main+0x128>)
 8000a2c:	22f0      	movs	r2, #240	@ 0xf0
 8000a2e:	21a8      	movs	r1, #168	@ 0xa8
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fe6f 	bl	8000714 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0xF0); // Установка Ш�?М на 50% для второго контроллера
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <main+0x128>)
 8000a38:	22f0      	movs	r2, #240	@ 0xf0
 8000a3a:	21a2      	movs	r1, #162	@ 0xa2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff fe69 	bl	8000714 <FanContrlSetDuty>
 8000a42:	e01c      	b.n	8000a7e <main+0xf6>
		} else if (TempMode == 1) {
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <main+0x124>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10c      	bne.n	8000a66 <main+0xde>
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0x80); // Установка Ш�?М на 50% для первого контроллера
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <main+0x128>)
 8000a4e:	2280      	movs	r2, #128	@ 0x80
 8000a50:	21a8      	movs	r1, #168	@ 0xa8
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fe5e 	bl	8000714 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0x80); // Установка Ш�?М на 50% для второго контроллера
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <main+0x128>)
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	21a2      	movs	r1, #162	@ 0xa2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fe58 	bl	8000714 <FanContrlSetDuty>
 8000a64:	e00b      	b.n	8000a7e <main+0xf6>
		} else {
			FanContrlSetDuty(&hi2c1, (0x54 << 1), 0xFF); // Установка Ш�?М на 50% для первого контроллера
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <main+0x128>)
 8000a68:	22ff      	movs	r2, #255	@ 0xff
 8000a6a:	21a8      	movs	r1, #168	@ 0xa8
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fe51 	bl	8000714 <FanContrlSetDuty>
			FanContrlSetDuty(&hi2c1, (0x51 << 1), 0xFF); // Установка Ш�?М на 50% для второго контроллера
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <main+0x128>)
 8000a74:	22ff      	movs	r2, #255	@ 0xff
 8000a76:	21a2      	movs	r1, #162	@ 0xa2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fe4b 	bl	8000714 <FanContrlSetDuty>
		}

		if(Adapter_State == 1)
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <main+0x12c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d1be      	bne.n	8000a04 <main+0x7c>
		{
			HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <main+0x114>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f94c 	bl	8001d2a <HAL_GPIO_WritePin>
		Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8000a92:	e7b7      	b.n	8000a04 <main+0x7c>
 8000a94:	20000124 	.word	0x20000124
 8000a98:	200000d8 	.word	0x200000d8
 8000a9c:	50000400 	.word	0x50000400
 8000aa0:	20000181 	.word	0x20000181
 8000aa4:	20000180 	.word	0x20000180
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	20000177 	.word	0x20000177

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b093      	sub	sp, #76	@ 0x4c
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	2410      	movs	r4, #16
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2338      	movs	r3, #56	@ 0x38
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f005 fd97 	bl	80065fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f005 fd90 	bl	80065fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f003 fd5b 	bl	800459c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2240      	movs	r2, #64	@ 0x40
 8000b00:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2208      	movs	r2, #8
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	0292      	lsls	r2, r2, #10
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	22e0      	movs	r2, #224	@ 0xe0
 8000b26:	0512      	lsls	r2, r2, #20
 8000b28:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	0592      	lsls	r2, r2, #22
 8000b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f003 fd71 	bl	800461c <HAL_RCC_OscConfig>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b3e:	f000 fb97 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	003b      	movs	r3, r7
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f004 f876 	bl	8004c50 <HAL_RCC_ClockConfig>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b68:	f000 fb82 	bl	8001270 <Error_Handler>
  }
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b013      	add	sp, #76	@ 0x4c
 8000b72:	bd90      	pop	{r4, r7, pc}

08000b74 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	2017      	movs	r0, #23
 8000b7e:	f000 feab 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b82:	2017      	movs	r0, #23
 8000b84:	f000 febd 	bl	8001902 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2018      	movs	r0, #24
 8000b8e:	f000 fea3 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000b92:	2018      	movs	r0, #24
 8000b94:	f000 feb5 	bl	8001902 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f000 fe9b 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 fead 	bl	8001902 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2102      	movs	r1, #2
 8000bac:	2010      	movs	r0, #16
 8000bae:	f000 fe93 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bb2:	2010      	movs	r0, #16
 8000bb4:	f000 fea5 	bl	8001902 <HAL_NVIC_EnableIRQ>
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c3c <MX_I2C1_Init+0x7c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E47DAF;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <MX_I2C1_Init+0x80>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	0292      	lsls	r2, r2, #10
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 f8b0 	bl	8001d64 <HAL_I2C_Init>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 fb32 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f003 fc2b 	bl	800446c <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c1a:	f000 fb29 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f003 fc6e 	bl	8004504 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 fb20 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	10e47daf 	.word	0x10e47daf

08000c44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <MX_I2C2_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10801031;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <MX_I2C2_Init+0x7c>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 74;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c56:	224a      	movs	r2, #74	@ 0x4a
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 f86f 	bl	8001d64 <HAL_I2C_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c8a:	f000 faf1 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c90:	2100      	movs	r1, #0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f003 fbea 	bl	800446c <HAL_I2CEx_ConfigAnalogFilter>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f000 fae8 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f003 fc2d 	bl	8004504 <HAL_I2CEx_ConfigDigitalFilter>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 fadf 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000084 	.word	0x20000084
 8000cbc:	40005800 	.word	0x40005800
 8000cc0:	10801031 	.word	0x10801031

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	2328      	movs	r3, #40	@ 0x28
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f005 fc91 	bl	80065fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	231c      	movs	r3, #28
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	0018      	movs	r0, r3
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f005 fc89 	bl	80065fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	003b      	movs	r3, r7
 8000cec:	0018      	movs	r0, r3
 8000cee:	231c      	movs	r3, #28
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f005 fc82 	bl	80065fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf8:	4b30      	ldr	r3, [pc, #192]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000cfa:	2280      	movs	r2, #128	@ 0x80
 8000cfc:	05d2      	lsls	r2, r2, #23
 8000cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000d00:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d02:	223f      	movs	r2, #63	@ 0x3f
 8000d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f004 fad7 	bl	80052d4 <HAL_TIM_Base_Init>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 faa1 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	2128      	movs	r1, #40	@ 0x28
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2280      	movs	r2, #128	@ 0x80
 8000d34:	0152      	lsls	r2, r2, #5
 8000d36:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d38:	187a      	adds	r2, r7, r1
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f004 fece 	bl	8005ae0 <HAL_TIM_ConfigClockSource>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d48:	f000 fa92 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f004 fb74 	bl	800543c <HAL_TIM_PWM_Init>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d58:	f000 fa8a 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	211c      	movs	r1, #28
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6a:	187a      	adds	r2, r7, r1
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f005 fbbd 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d7a:	f000 fa79 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2260      	movs	r2, #96	@ 0x60
 8000d82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000d84:	003b      	movs	r3, r7
 8000d86:	22fa      	movs	r2, #250	@ 0xfa
 8000d88:	0052      	lsls	r2, r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d98:	0039      	movs	r1, r7
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f004 fd9e 	bl	80058e0 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000da8:	f000 fa62 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <MX_TIM2_Init+0xf8>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fb58 	bl	8001464 <HAL_TIM_MspPostInit>

}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b00e      	add	sp, #56	@ 0x38
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000d8 	.word	0x200000d8
 8000dc0:	000003e7 	.word	0x000003e7

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	2310      	movs	r3, #16
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f005 fc11 	bl	80065fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	230c      	movs	r3, #12
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f005 fc0a 	bl	80065fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000dea:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <MX_TIM3_Init+0xa4>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000df0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <MX_TIM3_Init+0xa8>)
 8000df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <MX_TIM3_Init+0xac>)
 8000dfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f004 fa60 	bl	80052d4 <HAL_TIM_Base_Init>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e18:	f000 fa2a 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	0152      	lsls	r2, r2, #5
 8000e24:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e26:	187a      	adds	r2, r7, r1
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f004 fe57 	bl	8005ae0 <HAL_TIM_ConfigClockSource>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e36:	f000 fa1b 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e46:	1d3a      	adds	r2, r7, #4
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_TIM3_Init+0xa0>)
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f005 fb4f 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e56:	f000 fa0b 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b008      	add	sp, #32
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	20000124 	.word	0x20000124
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	0000f9ff 	.word	0x0000f9ff
 8000e70:	000003e7 	.word	0x000003e7

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	240c      	movs	r4, #12
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2314      	movs	r3, #20
 8000e82:	001a      	movs	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f005 fbb9 	bl	80065fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <MX_GPIO_Init+0x100>)
 8000eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_I2C_RES_Pin|PWR_SW_Pin|RST_SW_Pin, GPIO_PIN_SET);
 8000eba:	23a0      	movs	r3, #160	@ 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2131      	movs	r1, #49	@ 0x31
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 ff31 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, GPIO_PIN_RESET);
 8000ec8:	23a0      	movs	r3, #160	@ 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2108      	movs	r1, #8
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 ff2a 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MB_BITCH_Pin|MCU_HOS_ON_Pin, GPIO_PIN_SET);
 8000ed6:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <MX_GPIO_Init+0x104>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2148      	movs	r1, #72	@ 0x48
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 ff24 	bl	8001d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_I2C_RES_Pin MB_PWROK_Pin PWR_SW_Pin RST_SW_Pin */
  GPIO_InitStruct.Pin = USB_I2C_RES_Pin|MB_PWROK_Pin|PWR_SW_Pin|RST_SW_Pin;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2239      	movs	r2, #57	@ 0x39
 8000ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	193a      	adds	r2, r7, r4
 8000efc:	23a0      	movs	r3, #160	@ 0xa0
 8000efe:	05db      	lsls	r3, r3, #23
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fd90 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PSON_Pin MCU_ATTACH_IN_Pin */
  GPIO_InitStruct.Pin = MB_PSON_Pin|MCU_ATTACH_IN_Pin;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2284      	movs	r2, #132	@ 0x84
 8000f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	193a      	adds	r2, r7, r4
 8000f1c:	23a0      	movs	r3, #160	@ 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 fd80 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_Pin MB_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|MB_STATUS_LED_Pin;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2211      	movs	r2, #17
 8000f2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <MX_GPIO_Init+0x104>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	0010      	movs	r0, r2
 8000f42:	f000 fd71 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_BITCH_Pin MCU_HOS_ON_Pin */
  GPIO_InitStruct.Pin = MB_BITCH_Pin|MCU_HOS_ON_Pin;
 8000f46:	0021      	movs	r1, r4
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2248      	movs	r2, #72	@ 0x48
 8000f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2201      	movs	r2, #1
 8000f52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <MX_GPIO_Init+0x104>)
 8000f64:	0019      	movs	r1, r3
 8000f66:	0010      	movs	r0, r2
 8000f68:	f000 fd5e 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b009      	add	sp, #36	@ 0x24
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	50000400 	.word	0x50000400

08000f7c <ProcessComand>:

/* USER CODE BEGIN 4 */

void ProcessComand(uint8_t command)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0002      	movs	r2, r0
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	701a      	strb	r2, [r3, #0]
	if(command == 0b00 || command == 0b01 ||command == 0b10 ||command == 0b11)
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00c      	beq.n	8000faa <ProcessComand+0x2e>
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d008      	beq.n	8000faa <ProcessComand+0x2e>
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d004      	beq.n	8000faa <ProcessComand+0x2e>
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d000      	beq.n	8000faa <ProcessComand+0x2e>
 8000fa8:	e0c4      	b.n	8001134 <ProcessComand+0x1b8>
	{
		Command = command;
 8000faa:	4b64      	ldr	r3, [pc, #400]	@ (800113c <ProcessComand+0x1c0>)
 8000fac:	1dfa      	adds	r2, r7, #7
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	701a      	strb	r2, [r3, #0]
		MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8000fb2:	23a0      	movs	r3, #160	@ 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 fe99 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001140 <ProcessComand+0x1c4>)
 8000fc4:	701a      	strb	r2, [r3, #0]
		if (Command == PWR_OFF && MB_State == 1) {
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800113c <ProcessComand+0x1c0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d129      	bne.n	8001022 <ProcessComand+0xa6>
 8000fce:	4b5c      	ldr	r3, [pc, #368]	@ (8001140 <ProcessComand+0x1c4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d125      	bne.n	8001022 <ProcessComand+0xa6>

			SetButton(0);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fc32 	bl	8000840 <SetButton>
			while(MB_State != 0)
 8000fdc:	e009      	b.n	8000ff2 <ProcessComand+0x76>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8000fde:	23a0      	movs	r3, #160	@ 0xa0
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fe83 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000fea:	0003      	movs	r3, r0
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b54      	ldr	r3, [pc, #336]	@ (8001140 <ProcessComand+0x1c4>)
 8000ff0:	701a      	strb	r2, [r3, #0]
			while(MB_State != 0)
 8000ff2:	4b53      	ldr	r3, [pc, #332]	@ (8001140 <ProcessComand+0x1c4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f1      	bne.n	8000fde <ProcessComand+0x62>
			}
			SetButton(1);// Короткое нажатие
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff fc20 	bl	8000840 <SetButton>
			CloseKey();
 8001000:	f7ff fa0a 	bl	8000418 <CloseKey>
			SetPWROK(HIGH);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fc43 	bl	8000890 <SetPWROK>
			HAL_Delay(300);
 800100a:	2396      	movs	r3, #150	@ 0x96
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	0018      	movs	r0, r3
 8001010:	f000 fb7c 	bl	800170c <HAL_Delay>
			flag_receive = 0;
 8001014:	4b4b      	ldr	r3, [pc, #300]	@ (8001144 <ProcessComand+0x1c8>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
			Adapter_State = 0;
 800101a:	4b4b      	ldr	r3, [pc, #300]	@ (8001148 <ProcessComand+0x1cc>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e088      	b.n	8001134 <ProcessComand+0x1b8>

		} else if (Command == PWR_ON)
 8001022:	4b46      	ldr	r3, [pc, #280]	@ (800113c <ProcessComand+0x1c0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12e      	bne.n	8001088 <ProcessComand+0x10c>
		{

			HAL_Delay(500);
 800102a:	23fa      	movs	r3, #250	@ 0xfa
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fb6c 	bl	800170c <HAL_Delay>
			PressButton(200);
 8001034:	20c8      	movs	r0, #200	@ 0xc8
 8001036:	f7ff fc15 	bl	8000864 <PressButton>
			while(MB_State != 1)
 800103a:	e009      	b.n	8001050 <ProcessComand+0xd4>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 800103c:	23a0      	movs	r3, #160	@ 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2104      	movs	r1, #4
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fe54 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8001048:	0003      	movs	r3, r0
 800104a:	001a      	movs	r2, r3
 800104c:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <ProcessComand+0x1c4>)
 800104e:	701a      	strb	r2, [r3, #0]
			while(MB_State != 1)
 8001050:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <ProcessComand+0x1c4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d1f1      	bne.n	800103c <ProcessComand+0xc0>
			}
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	@ 0x64
 800105a:	f000 fb57 	bl	800170c <HAL_Delay>
			OpenKey();
 800105e:	f7ff f9c7 	bl	80003f0 <OpenKey>
			SetPWROK(LOW);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fc14 	bl	8000890 <SetPWROK>
			HAL_Delay(500);
 8001068:	23fa      	movs	r3, #250	@ 0xfa
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	0018      	movs	r0, r3
 800106e:	f000 fb4d 	bl	800170c <HAL_Delay>
			Adapter_State = 1;
 8001072:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <ProcessComand+0x1cc>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
			HAL_Delay(7000);
 8001078:	4b34      	ldr	r3, [pc, #208]	@ (800114c <ProcessComand+0x1d0>)
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fb46 	bl	800170c <HAL_Delay>
			flag_receive = 0;
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <ProcessComand+0x1c8>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e055      	b.n	8001134 <ProcessComand+0x1b8>
		} else if (Command == HARD_RESET && MB_State == 1) {
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <ProcessComand+0x1c0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d14d      	bne.n	800112c <ProcessComand+0x1b0>
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <ProcessComand+0x1c4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d149      	bne.n	800112c <ProcessComand+0x1b0>
			SetButton(0);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fbd1 	bl	8000840 <SetButton>
			while(MB_State != 0)
 800109e:	e009      	b.n	80010b4 <ProcessComand+0x138>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80010a0:	23a0      	movs	r3, #160	@ 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	2104      	movs	r1, #4
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fe22 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80010ac:	0003      	movs	r3, r0
 80010ae:	001a      	movs	r2, r3
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <ProcessComand+0x1c4>)
 80010b2:	701a      	strb	r2, [r3, #0]
			while(MB_State != 0)
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <ProcessComand+0x1c4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f1      	bne.n	80010a0 <ProcessComand+0x124>
			}
			SetButton(1);// Короткое нажатие
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff fbbf 	bl	8000840 <SetButton>
			SetPWROK(HIGH);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fbe4 	bl	8000890 <SetPWROK>
			CloseKey();
 80010c8:	f7ff f9a6 	bl	8000418 <CloseKey>
			HAL_Delay(5000);
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <ProcessComand+0x1d4>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fb1c 	bl	800170c <HAL_Delay>
			OpenKey();
 80010d4:	f7ff f98c 	bl	80003f0 <OpenKey>
			HAL_Delay(500);
 80010d8:	23fa      	movs	r3, #250	@ 0xfa
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fb15 	bl	800170c <HAL_Delay>
			PressButton(200);
 80010e2:	20c8      	movs	r0, #200	@ 0xc8
 80010e4:	f7ff fbbe 	bl	8000864 <PressButton>
			while(MB_State != 1)
 80010e8:	e009      	b.n	80010fe <ProcessComand+0x182>
			{
				MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80010ea:	23a0      	movs	r3, #160	@ 0xa0
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	2104      	movs	r1, #4
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fdfd 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80010f6:	0003      	movs	r3, r0
 80010f8:	001a      	movs	r2, r3
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <ProcessComand+0x1c4>)
 80010fc:	701a      	strb	r2, [r3, #0]
			while(MB_State != 1)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <ProcessComand+0x1c4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d1f1      	bne.n	80010ea <ProcessComand+0x16e>
			}
			SetPWROK(LOW);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fbc2 	bl	8000890 <SetPWROK>
			HAL_Delay(500);
 800110c:	23fa      	movs	r3, #250	@ 0xfa
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fafb 	bl	800170c <HAL_Delay>
			Adapter_State = 1;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <ProcessComand+0x1cc>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(7000);
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <ProcessComand+0x1d0>)
 800111e:	0018      	movs	r0, r3
 8001120:	f000 faf4 	bl	800170c <HAL_Delay>
			flag_receive = 0;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <ProcessComand+0x1c8>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e003      	b.n	8001134 <ProcessComand+0x1b8>
		}else {

			flag_receive = 0;
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <ProcessComand+0x1c8>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
			return;
 8001132:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000176 	.word	0x20000176
 8001140:	20000178 	.word	0x20000178
 8001144:	2000002c 	.word	0x2000002c
 8001148:	20000177 	.word	0x20000177
 800114c:	00001b58 	.word	0x00001b58
 8001150:	00001388 	.word	0x00001388

08001154 <HAL_I2C_SlaveRxCpltCallback>:



void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

	flag_receive = 1;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	Command_temp = HAL_GPIO_ReadPin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin);
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001164:	2110      	movs	r1, #16
 8001166:	0018      	movs	r0, r3
 8001168:	f000 fdc2 	bl	8001cf0 <HAL_GPIO_ReadPin>
 800116c:	0003      	movs	r3, r0
 800116e:	001a      	movs	r2, r3
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001172:	701a      	strb	r2, [r3, #0]
	if(Command_temp == 1)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10c      	bne.n	8001196 <HAL_I2C_SlaveRxCpltCallback+0x42>
	{
		command_i2c = i2c_rx_buffer[0] & 0b11;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8001188:	701a      	strb	r2, [r3, #0]
		ProcessComand(command_i2c);
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_I2C_SlaveRxCpltCallback+0x78>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fef4 	bl	8000f7c <ProcessComand>
 8001194:	e007      	b.n	80011a6 <HAL_I2C_SlaveRxCpltCallback+0x52>
	}else
	{
		temperature = i2c_rx_buffer[0];
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 800119e:	701a      	strb	r2, [r3, #0]
		flag_receive = 0;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	}
	HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 ffa9 	bl	8002104 <HAL_I2C_Slave_Receive_IT>
}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	2000002c 	.word	0x2000002c
 80011c0:	50000400 	.word	0x50000400
 80011c4:	20000181 	.word	0x20000181
 80011c8:	20000180 	.word	0x20000180
 80011cc:	2000017a 	.word	0x2000017a
 80011d0:	2000017b 	.word	0x2000017b
 80011d4:	20000084 	.word	0x20000084

080011d8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) // 1 раз в секунду
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d138      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		Read_Fan_Tachometer();
 80011ea:	f7ff f9ed 	bl	80005c8 <Read_Fan_Tachometer>
		Calculate_RPM();
 80011ee:	f7ff fa5d 	bl	80006ac <Calculate_RPM>
		Send_Fan_Tachometer_To_Motherboard();
 80011f2:	f7ff fb99 	bl	8000928 <Send_Fan_Tachometer_To_Motherboard>
		SetTempMode();
 80011f6:	f7ff fb69 	bl	80008cc <SetTempMode>
		MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80011fa:	23a0      	movs	r3, #160	@ 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	2104      	movs	r1, #4
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fd75 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8001206:	0003      	movs	r3, r0
 8001208:	001a      	movs	r2, r3
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800120c:	701a      	strb	r2, [r3, #0]
		if (MB_State == 1 && Adapter_State == 0)//включение BMC
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d10f      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			OpenKey();
 800121e:	f7ff f8e7 	bl	80003f0 <OpenKey>
			HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f000 fa72 	bl	800170c <HAL_Delay>
			SetPWROK(LOW);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fb31 	bl	8000890 <SetPWROK>
			Adapter_State = 1;
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
			SetPWROK(HIGH);
			Adapter_State = 0;
		}

	}
}
 8001234:	e012      	b.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
		} else if (MB_State == 0 && Adapter_State == 1)// выключение BMC
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10e      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10a      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
			CloseKey();
 8001246:	f7ff f8e7 	bl	8000418 <CloseKey>
			HAL_Delay(100);
 800124a:	2064      	movs	r0, #100	@ 0x64
 800124c:	f000 fa5e 	bl	800170c <HAL_Delay>
			SetPWROK(HIGH);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fb1d 	bl	8000890 <SetPWROK>
			Adapter_State = 0;
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40000400 	.word	0x40000400
 8001268:	20000178 	.word	0x20000178
 800126c:	20000177 	.word	0x20000177

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_MspInit+0x4c>)
 800129c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0549      	lsls	r1, r1, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fa4a 	bl	8001754 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b099      	sub	sp, #100	@ 0x64
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	234c      	movs	r3, #76	@ 0x4c
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	0018      	movs	r0, r3
 80012da:	2314      	movs	r3, #20
 80012dc:	001a      	movs	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	f005 f98c 	bl	80065fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	2418      	movs	r4, #24
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	0018      	movs	r0, r3
 80012ea:	2334      	movs	r3, #52	@ 0x34
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f005 f984 	bl	80065fc <memset>
  if(hi2c->Instance==I2C1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <HAL_I2C_MspInit+0x128>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d13f      	bne.n	800137e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	2220      	movs	r2, #32
 8001302:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001304:	193b      	adds	r3, r7, r4
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130a:	193b      	adds	r3, r7, r4
 800130c:	0018      	movs	r0, r3
 800130e:	f003 fe29 	bl	8004f64 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001316:	f7ff ffab 	bl	8001270 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 800131c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800131e:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001320:	2102      	movs	r1, #2
 8001322:	430a      	orrs	r2, r1
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34
 8001326:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = FAN_I2C1_SDA_Pin|FAN_I2C1_SCL_Pin;
 8001332:	214c      	movs	r1, #76	@ 0x4c
 8001334:	187b      	adds	r3, r7, r1
 8001336:	22c0      	movs	r2, #192	@ 0xc0
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2212      	movs	r2, #18
 8001340:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2206      	movs	r2, #6
 8001352:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	187b      	adds	r3, r7, r1
 8001356:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <HAL_I2C_MspInit+0x130>)
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f000 fb64 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001364:	4b24      	ldr	r3, [pc, #144]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	0389      	lsls	r1, r1, #14
 800136a:	430a      	orrs	r2, r1
 800136c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800136e:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	039b      	lsls	r3, r3, #14
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800137c:	e036      	b.n	80013ec <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_I2C_MspInit+0x134>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d131      	bne.n	80013ec <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3_FAN_I2C2_SCL_Pin|U3_FAN_I2C2_SDA_Pin;
 80013a0:	214c      	movs	r1, #76	@ 0x4c
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	22c0      	movs	r2, #192	@ 0xc0
 80013a6:	0152      	lsls	r2, r2, #5
 80013a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2212      	movs	r2, #18
 80013ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2206      	movs	r2, #6
 80013c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	187a      	adds	r2, r7, r1
 80013c4:	23a0      	movs	r3, #160	@ 0xa0
 80013c6:	05db      	lsls	r3, r3, #23
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 fb2c 	bl	8001a28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 80013d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	03c9      	lsls	r1, r1, #15
 80013da:	430a      	orrs	r2, r1
 80013dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_I2C_MspInit+0x12c>)
 80013e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	03db      	lsls	r3, r3, #15
 80013e6:	4013      	ands	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b019      	add	sp, #100	@ 0x64
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40021000 	.word	0x40021000
 80013fc:	50000400 	.word	0x50000400
 8001400:	40005800 	.word	0x40005800

08001404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	429a      	cmp	r2, r3
 8001416:	d10c      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 800141a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 8001426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001430:	e010      	b.n	8001454 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_TIM_Base_MspInit+0x5c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d10b      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 800143e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 8001442:	2102      	movs	r1, #2
 8001444:	430a      	orrs	r2, r1
 8001446:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <HAL_TIM_Base_MspInit+0x58>)
 800144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
}
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	40000400 	.word	0x40000400

08001464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	240c      	movs	r4, #12
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	2314      	movs	r3, #20
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f005 f8c0 	bl	80065fc <memset>
  if(htim->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	429a      	cmp	r2, r3
 8001486:	d122      	bne.n	80014ce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_TIM_MspPostInit+0x74>)
 800148a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_TIM_MspPostInit+0x74>)
 800148e:	2101      	movs	r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	@ 0x34
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_TIM_MspPostInit+0x74>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001498:	2201      	movs	r2, #1
 800149a:	4013      	ands	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MB_FAN_TACH_Pin;
 80014a0:	0021      	movs	r1, r4
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2202      	movs	r2, #2
 80014ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2202      	movs	r2, #2
 80014be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MB_FAN_TACH_GPIO_Port, &GPIO_InitStruct);
 80014c0:	187a      	adds	r2, r7, r1
 80014c2:	23a0      	movs	r3, #160	@ 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 faad 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b009      	add	sp, #36	@ 0x24
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	46c0      	nop			@ (mov r8, r8)
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f8e6 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <TIM2_IRQHandler+0x14>)
 8001516:	0018      	movs	r0, r3
 8001518:	f004 f8da 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	200000d8 	.word	0x200000d8

08001528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <TIM3_IRQHandler+0x14>)
 800152e:	0018      	movs	r0, r3
 8001530:	f004 f8ce 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001534:	46c0      	nop			@ (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	20000124 	.word	0x20000124

08001540 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <I2C1_IRQHandler+0x2c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	23e0      	movs	r3, #224	@ 0xe0
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4013      	ands	r3, r2
 8001550:	d004      	beq.n	800155c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <I2C1_IRQHandler+0x2c>)
 8001554:	0018      	movs	r0, r3
 8001556:	f001 f9a3 	bl	80028a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800155a:	e003      	b.n	8001564 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <I2C1_IRQHandler+0x2c>)
 800155e:	0018      	movs	r0, r3
 8001560:	f001 f984 	bl	800286c <HAL_I2C_EV_IRQHandler>
}
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	20000030 	.word	0x20000030

08001570 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <I2C2_IRQHandler+0x2c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	23e0      	movs	r3, #224	@ 0xe0
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4013      	ands	r3, r2
 8001580:	d004      	beq.n	800158c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <I2C2_IRQHandler+0x2c>)
 8001584:	0018      	movs	r0, r3
 8001586:	f001 f98b 	bl	80028a0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800158a:	e003      	b.n	8001594 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <I2C2_IRQHandler+0x2c>)
 800158e:	0018      	movs	r0, r3
 8001590:	f001 f96c 	bl	800286c <HAL_I2C_EV_IRQHandler>
}
 8001594:	46c0      	nop			@ (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	20000084 	.word	0x20000084

080015a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015ac:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b0:	f7ff fff6 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	@ (80015ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <LoopForever+0xe>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	@ (80015f8 <LoopForever+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015da:	f005 f817 	bl	800660c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015de:	f7ff f9d3 	bl	8000988 <main>

080015e2 <LoopForever>:

LoopForever:
  b LoopForever
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
  ldr   r0, =_estack
 80015e4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015f0:	08006718 	.word	0x08006718
  ldr r2, =_sbss
 80015f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015f8:	20000188 	.word	0x20000188

080015fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_COMP_IRQHandler>
	...

08001600 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_Init+0x3c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_Init+0x3c>)
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	0049      	lsls	r1, r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f810 	bl	8001640 <HAL_InitTick>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d003      	beq.n	800162c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fe26 	bl	800127c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001648:	230f      	movs	r3, #15
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_InitTick+0x88>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02b      	beq.n	80016b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_InitTick+0x8c>)
 800165a:	681c      	ldr	r4, [r3, #0]
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_InitTick+0x88>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	0019      	movs	r1, r3
 8001662:	23fa      	movs	r3, #250	@ 0xfa
 8001664:	0098      	lsls	r0, r3, #2
 8001666:	f7fe fd4d 	bl	8000104 <__udivsi3>
 800166a:	0003      	movs	r3, r0
 800166c:	0019      	movs	r1, r3
 800166e:	0020      	movs	r0, r4
 8001670:	f7fe fd48 	bl	8000104 <__udivsi3>
 8001674:	0003      	movs	r3, r0
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f953 	bl	8001922 <HAL_SYSTICK_Config>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d112      	bne.n	80016a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d80a      	bhi.n	800169c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	2200      	movs	r2, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f922 	bl	80018d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_InitTick+0x90>)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00d      	b.n	80016b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e008      	b.n	80016b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e003      	b.n	80016b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016b8:	230f      	movs	r3, #15
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	781b      	ldrb	r3, [r3, #0]
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b005      	add	sp, #20
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	20000004 	.word	0x20000004
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	001a      	movs	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	18d2      	adds	r2, r2, r3
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20000184 	.word	0x20000184

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	20000184 	.word	0x20000184

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	001a      	movs	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	189b      	adds	r3, r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	2000000c 	.word	0x2000000c

08001754 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	40010000 	.word	0x40010000
 800177c:	fffff9ff 	.word	0xfffff9ff

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	0002      	movs	r2, r0
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b7f      	cmp	r3, #127	@ 0x7f
 8001792:	d809      	bhi.n	80017a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	001a      	movs	r2, r3
 800179a:	231f      	movs	r3, #31
 800179c:	401a      	ands	r2, r3
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_EnableIRQ+0x30>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	4091      	lsls	r1, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017a8:	46c0      	nop			@ (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80017c8:	d828      	bhi.n	800181c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <__NVIC_SetPriority+0xd4>)
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	33c0      	adds	r3, #192	@ 0xc0
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	589b      	ldr	r3, [r3, r2]
 80017da:	1dfa      	adds	r2, r7, #7
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	0011      	movs	r1, r2
 80017e0:	2203      	movs	r2, #3
 80017e2:	400a      	ands	r2, r1
 80017e4:	00d2      	lsls	r2, r2, #3
 80017e6:	21ff      	movs	r1, #255	@ 0xff
 80017e8:	4091      	lsls	r1, r2
 80017ea:	000a      	movs	r2, r1
 80017ec:	43d2      	mvns	r2, r2
 80017ee:	401a      	ands	r2, r3
 80017f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	22ff      	movs	r2, #255	@ 0xff
 80017f8:	401a      	ands	r2, r3
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	0018      	movs	r0, r3
 8001800:	2303      	movs	r3, #3
 8001802:	4003      	ands	r3, r0
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001808:	481f      	ldr	r0, [pc, #124]	@ (8001888 <__NVIC_SetPriority+0xd4>)
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	430a      	orrs	r2, r1
 8001814:	33c0      	adds	r3, #192	@ 0xc0
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181a:	e031      	b.n	8001880 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181c:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <__NVIC_SetPriority+0xd8>)
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	0019      	movs	r1, r3
 8001824:	230f      	movs	r3, #15
 8001826:	400b      	ands	r3, r1
 8001828:	3b08      	subs	r3, #8
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3306      	adds	r3, #6
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	18d3      	adds	r3, r2, r3
 8001832:	3304      	adds	r3, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1dfa      	adds	r2, r7, #7
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	0011      	movs	r1, r2
 800183c:	2203      	movs	r2, #3
 800183e:	400a      	ands	r2, r1
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	21ff      	movs	r1, #255	@ 0xff
 8001844:	4091      	lsls	r1, r2
 8001846:	000a      	movs	r2, r1
 8001848:	43d2      	mvns	r2, r2
 800184a:	401a      	ands	r2, r3
 800184c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	401a      	ands	r2, r3
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0018      	movs	r0, r3
 800185c:	2303      	movs	r3, #3
 800185e:	4003      	ands	r3, r0
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <__NVIC_SetPriority+0xd8>)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	001c      	movs	r4, r3
 800186c:	230f      	movs	r3, #15
 800186e:	4023      	ands	r3, r4
 8001870:	3b08      	subs	r3, #8
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	430a      	orrs	r2, r1
 8001876:	3306      	adds	r3, #6
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	18c3      	adds	r3, r0, r3
 800187c:	3304      	adds	r3, #4
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	045b      	lsls	r3, r3, #17
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d301      	bcc.n	80018a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a4:	2301      	movs	r3, #1
 80018a6:	e010      	b.n	80018ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <SysTick_Config+0x44>)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	3a01      	subs	r2, #1
 80018ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b0:	2301      	movs	r3, #1
 80018b2:	425b      	negs	r3, r3
 80018b4:	2103      	movs	r1, #3
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff7c 	bl	80017b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Config+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SysTick_Config+0x44>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	210f      	movs	r1, #15
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	1c02      	adds	r2, r0, #0
 80018e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	0011      	movs	r1, r2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff ff5d 	bl	80017b4 <__NVIC_SetPriority>
}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b004      	add	sp, #16
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	0002      	movs	r2, r0
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ff33 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ffaf 	bl	8001890 <SysTick_Config>
 8001932:	0003      	movs	r3, r0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001944:	210f      	movs	r1, #15
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2225      	movs	r2, #37	@ 0x25
 8001950:	5c9b      	ldrb	r3, [r3, r2]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d006      	beq.n	8001966 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2204      	movs	r2, #4
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e049      	b.n	80019fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	210e      	movs	r1, #14
 8001972:	438a      	bics	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	438a      	bics	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	491d      	ldr	r1, [pc, #116]	@ (8001a08 <HAL_DMA_Abort_IT+0xcc>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_DMA_Abort_IT+0xd0>)
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	221c      	movs	r2, #28
 80019a0:	4013      	ands	r3, r2
 80019a2:	2201      	movs	r2, #1
 80019a4:	409a      	lsls	r2, r3
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_DMA_Abort_IT+0xd0>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c8:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <HAL_DMA_Abort_IT+0xcc>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2225      	movs	r2, #37	@ 0x25
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	0010      	movs	r0, r2
 80019f8:	4798      	blx	r3
    }
  }
  return status;
 80019fa:	230f      	movs	r3, #15
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	781b      	ldrb	r3, [r3, #0]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fffffeff 	.word	0xfffffeff
 8001a0c:	40020000 	.word	0x40020000

08001a10 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2225      	movs	r2, #37	@ 0x25
 8001a1c:	5c9b      	ldrb	r3, [r3, r2]
 8001a1e:	b2db      	uxtb	r3, r3
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e147      	b.n	8001cc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_GPIO_Init+0x28>
 8001a4e:	e138      	b.n	8001cc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	400b      	ands	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	6939      	ldr	r1, [r7, #16]
 8001b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	23c0      	movs	r3, #192	@ 0xc0
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x174>
 8001b9a:	e092      	b.n	8001cc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	589b      	ldr	r3, [r3, r2]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	23a0      	movs	r3, #160	@ 0xa0
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x1ca>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ce4 <HAL_GPIO_Init+0x2bc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x1c6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <HAL_GPIO_Init+0x2c0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x1c2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a43      	ldr	r2, [pc, #268]	@ (8001cec <HAL_GPIO_Init+0x2c4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x1be>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x1cc>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	00d2      	lsls	r2, r2, #3
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c04:	4936      	ldr	r1, [pc, #216]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c12:	4b33      	ldr	r3, [pc, #204]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	035b      	lsls	r3, r3, #13
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c68:	2384      	movs	r3, #132	@ 0x84
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c8c:	4914      	ldr	r1, [pc, #80]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	2284      	movs	r2, #132	@ 0x84
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c94:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	58d3      	ldr	r3, [r2, r3]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cba:	4909      	ldr	r1, [pc, #36]	@ (8001ce0 <HAL_GPIO_Init+0x2b8>)
 8001cbc:	2280      	movs	r2, #128	@ 0x80
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	1e13      	subs	r3, r2, #0
 8001cd2:	d000      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ae>
 8001cd4:	e6b0      	b.n	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b006      	add	sp, #24
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	50000400 	.word	0x50000400
 8001ce8:	50000800 	.word	0x50000800
 8001cec:	50000c00 	.word	0x50000c00

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	1cba      	adds	r2, r7, #2
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	4013      	ands	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d14:	230f      	movs	r3, #15
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b004      	add	sp, #16
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	0008      	movs	r0, r1
 8001d34:	0011      	movs	r1, r2
 8001d36:	1cbb      	adds	r3, r7, #2
 8001d38:	1c02      	adds	r2, r0, #0
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	1c7b      	adds	r3, r7, #1
 8001d3e:	1c0a      	adds	r2, r1, #0
 8001d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d42:	1c7b      	adds	r3, r7, #1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4a:	1cbb      	adds	r3, r7, #2
 8001d4c:	881a      	ldrh	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d54:	1cbb      	adds	r3, r7, #2
 8001d56:	881a      	ldrh	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08f      	b.n	8001e96 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2241      	movs	r2, #65	@ 0x41
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2240      	movs	r2, #64	@ 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fa9d 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2241      	movs	r2, #65	@ 0x41
 8001d96:	2124      	movs	r1, #36	@ 0x24
 8001d98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	438a      	bics	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	493b      	ldr	r1, [pc, #236]	@ (8001ea0 <HAL_I2C_Init+0x13c>)
 8001db4:	400a      	ands	r2, r1
 8001db6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4938      	ldr	r1, [pc, #224]	@ (8001ea4 <HAL_I2C_Init+0x140>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	0209      	lsls	r1, r1, #8
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e007      	b.n	8001df2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2184      	movs	r1, #132	@ 0x84
 8001dec:	0209      	lsls	r1, r1, #8
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d109      	bne.n	8001e0e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	0109      	lsls	r1, r1, #4
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	e007      	b.n	8001e1e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4923      	ldr	r1, [pc, #140]	@ (8001ea8 <HAL_I2C_Init+0x144>)
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4920      	ldr	r1, [pc, #128]	@ (8001eac <HAL_I2C_Init+0x148>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	491a      	ldr	r1, [pc, #104]	@ (8001ea4 <HAL_I2C_Init+0x140>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69d9      	ldr	r1, [r3, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2241      	movs	r2, #65	@ 0x41
 8001e82:	2120      	movs	r1, #32
 8001e84:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2242      	movs	r2, #66	@ 0x42
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	f0ffffff 	.word	0xf0ffffff
 8001ea4:	ffff7fff 	.word	0xffff7fff
 8001ea8:	fffff7ff 	.word	0xfffff7ff
 8001eac:	02008000 	.word	0x02008000

08001eb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	0008      	movs	r0, r1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	1c02      	adds	r2, r0, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	1c0a      	adds	r2, r1, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2241      	movs	r2, #65	@ 0x41
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d000      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x2c>
 8001eda:	e10a      	b.n	80020f2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2240      	movs	r2, #64	@ 0x40
 8001ee0:	5c9b      	ldrb	r3, [r3, r2]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_Master_Transmit+0x3a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e104      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2240      	movs	r2, #64	@ 0x40
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ef2:	f7ff fc01 	bl	80016f8 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	0219      	lsls	r1, r3, #8
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	f001 ffae 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0ef      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2241      	movs	r2, #65	@ 0x41
 8001f18:	2121      	movs	r1, #33	@ 0x21
 8001f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2242      	movs	r2, #66	@ 0x42
 8001f20:	2110      	movs	r1, #16
 8001f22:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2208      	movs	r2, #8
 8001f34:	18ba      	adds	r2, r7, r2
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d906      	bls.n	8001f58 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	@ 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	045b      	lsls	r3, r3, #17
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e007      	b.n	8001f68 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	049b      	lsls	r3, r3, #18
 8001f66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d027      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	697c      	ldr	r4, [r7, #20]
 8001fac:	230a      	movs	r3, #10
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	8819      	ldrh	r1, [r3, #0]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <HAL_I2C_Master_Transmit+0x24c>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	0023      	movs	r3, r4
 8001fba:	f002 f92f 	bl	800421c <I2C_TransferConfig>
 8001fbe:	e06f      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	697c      	ldr	r4, [r7, #20]
 8001fc8:	230a      	movs	r3, #10
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	8819      	ldrh	r1, [r3, #0]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_I2C_Master_Transmit+0x24c>)
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	0023      	movs	r3, r4
 8001fd6:	f002 f921 	bl	800421c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fda:	e061      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f001 ff98 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e081      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03a      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x1f0>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d136      	bne.n	80020a0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	0013      	movs	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	f001 ff12 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8002044:	1e03      	subs	r3, r0, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e053      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	@ 0xff
 8002054:	d911      	bls.n	800207a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	@ 0xff
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	045c      	lsls	r4, r3, #17
 8002066:	230a      	movs	r3, #10
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	8819      	ldrh	r1, [r3, #0]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	0023      	movs	r3, r4
 8002074:	f002 f8d2 	bl	800421c <I2C_TransferConfig>
 8002078:	e012      	b.n	80020a0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	049c      	lsls	r4, r3, #18
 800208e:	230a      	movs	r3, #10
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	8819      	ldrh	r1, [r3, #0]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	2300      	movs	r3, #0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	0023      	movs	r3, r4
 800209c:	f002 f8be 	bl	800421c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d198      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f001 ff77 	bl	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b6:	1e03      	subs	r3, r0, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e01a      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2220      	movs	r2, #32
 80020c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	490b      	ldr	r1, [pc, #44]	@ (8002100 <HAL_I2C_Master_Transmit+0x250>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2241      	movs	r2, #65	@ 0x41
 80020da:	2120      	movs	r1, #32
 80020dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2242      	movs	r2, #66	@ 0x42
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2240      	movs	r2, #64	@ 0x40
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
  }
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b007      	add	sp, #28
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	80002000 	.word	0x80002000
 8002100:	fe00e800 	.word	0xfe00e800

08002104 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2241      	movs	r2, #65	@ 0x41
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d13b      	bne.n	8002196 <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2240      	movs	r2, #64	@ 0x40
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2C_Slave_Receive_IT+0x28>
 8002128:	2302      	movs	r3, #2
 800212a:	e035      	b.n	8002198 <HAL_I2C_Slave_Receive_IT+0x94>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2241      	movs	r2, #65	@ 0x41
 8002138:	2122      	movs	r1, #34	@ 0x22
 800213a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2242      	movs	r2, #66	@ 0x42
 8002140:	2120      	movs	r1, #32
 8002142:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4912      	ldr	r1, [pc, #72]	@ (80021a0 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8002156:	400a      	ands	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1dba      	adds	r2, r7, #6
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_I2C_Slave_Receive_IT+0xa0>)
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <HAL_I2C_Slave_Receive_IT+0xa4>)
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2240      	movs	r2, #64	@ 0x40
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <HAL_I2C_Slave_Receive_IT+0xa8>)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0011      	movs	r1, r2
 800218c:	0018      	movs	r0, r3
 800218e:	f002 f87f 	bl	8004290 <I2C_Enable_IRQ>

    return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002196:	2302      	movs	r3, #2
  }
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b004      	add	sp, #16
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	ffff7fff 	.word	0xffff7fff
 80021a4:	ffff0000 	.word	0xffff0000
 80021a8:	080029f5 	.word	0x080029f5
 80021ac:	00008002 	.word	0x00008002

080021b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	000c      	movs	r4, r1
 80021ba:	0010      	movs	r0, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	230a      	movs	r3, #10
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	1c22      	adds	r2, r4, #0
 80021c4:	801a      	strh	r2, [r3, #0]
 80021c6:	2308      	movs	r3, #8
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	1c02      	adds	r2, r0, #0
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	1dbb      	adds	r3, r7, #6
 80021d0:	1c0a      	adds	r2, r1, #0
 80021d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2241      	movs	r2, #65	@ 0x41
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d000      	beq.n	80021e2 <HAL_I2C_Mem_Write+0x32>
 80021e0:	e10c      	b.n	80023fc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_I2C_Mem_Write+0x42>
 80021e8:	232c      	movs	r3, #44	@ 0x2c
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0ff      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Mem_Write+0x5c>
 8002208:	2302      	movs	r3, #2
 800220a:	e0f8      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	2101      	movs	r1, #1
 8002212:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002214:	f7ff fa70 	bl	80016f8 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	0219      	lsls	r1, r3, #8
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2319      	movs	r3, #25
 8002228:	2201      	movs	r2, #1
 800222a:	f001 fe1d 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0e3      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2241      	movs	r2, #65	@ 0x41
 800223a:	2121      	movs	r1, #33	@ 0x21
 800223c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2242      	movs	r2, #66	@ 0x42
 8002242:	2140      	movs	r1, #64	@ 0x40
 8002244:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	222c      	movs	r2, #44	@ 0x2c
 8002256:	18ba      	adds	r2, r7, r2
 8002258:	8812      	ldrh	r2, [r2, #0]
 800225a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	881c      	ldrh	r4, [r3, #0]
 8002266:	2308      	movs	r3, #8
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	230a      	movs	r3, #10
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	8819      	ldrh	r1, [r3, #0]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	0023      	movs	r3, r4
 800227e:	f000 ffc9 	bl	8003214 <I2C_RequestMemoryWrite>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d005      	beq.n	8002292 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2240      	movs	r2, #64	@ 0x40
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0b5      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	2bff      	cmp	r3, #255	@ 0xff
 800229a:	d911      	bls.n	80022c0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	22ff      	movs	r2, #255	@ 0xff
 80022a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	045c      	lsls	r4, r3, #17
 80022ac:	230a      	movs	r3, #10
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	8819      	ldrh	r1, [r3, #0]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	2300      	movs	r3, #0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	0023      	movs	r3, r4
 80022ba:	f001 ffaf 	bl	800421c <I2C_TransferConfig>
 80022be:	e012      	b.n	80022e6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	049c      	lsls	r4, r3, #18
 80022d4:	230a      	movs	r3, #10
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	8819      	ldrh	r1, [r3, #0]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	0023      	movs	r3, r4
 80022e2:	f001 ff9b 	bl	800421c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 fe13 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e081      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03a      	beq.n	80023aa <HAL_I2C_Mem_Write+0x1fa>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d136      	bne.n	80023aa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800233c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	0013      	movs	r3, r2
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	@ 0x80
 800234a:	f001 fd8d 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e053      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2bff      	cmp	r3, #255	@ 0xff
 800235e:	d911      	bls.n	8002384 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	22ff      	movs	r2, #255	@ 0xff
 8002364:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	045c      	lsls	r4, r3, #17
 8002370:	230a      	movs	r3, #10
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	8819      	ldrh	r1, [r3, #0]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	0023      	movs	r3, r4
 800237e:	f001 ff4d 	bl	800421c <I2C_TransferConfig>
 8002382:	e012      	b.n	80023aa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	b2da      	uxtb	r2, r3
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	049c      	lsls	r4, r3, #18
 8002398:	230a      	movs	r3, #10
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	8819      	ldrh	r1, [r3, #0]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	0023      	movs	r3, r4
 80023a6:	f001 ff39 	bl	800421c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d198      	bne.n	80022e6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f001 fdf2 	bl	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e01a      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	490b      	ldr	r1, [pc, #44]	@ (8002408 <HAL_I2C_Mem_Write+0x258>)
 80023dc:	400a      	ands	r2, r1
 80023de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2241      	movs	r2, #65	@ 0x41
 80023e4:	2120      	movs	r1, #32
 80023e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2242      	movs	r2, #66	@ 0x42
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b007      	add	sp, #28
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	fe00e800 	.word	0xfe00e800

0800240c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	000c      	movs	r4, r1
 8002416:	0010      	movs	r0, r2
 8002418:	0019      	movs	r1, r3
 800241a:	230a      	movs	r3, #10
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	1c22      	adds	r2, r4, #0
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	2308      	movs	r3, #8
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	1c02      	adds	r2, r0, #0
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	1dbb      	adds	r3, r7, #6
 800242c:	1c0a      	adds	r2, r1, #0
 800242e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2241      	movs	r2, #65	@ 0x41
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	d000      	beq.n	800243e <HAL_I2C_Mem_Read+0x32>
 800243c:	e110      	b.n	8002660 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_I2C_Mem_Read+0x42>
 8002444:	232c      	movs	r3, #44	@ 0x2c
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e103      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2240      	movs	r2, #64	@ 0x40
 800245e:	5c9b      	ldrb	r3, [r3, r2]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_I2C_Mem_Read+0x5c>
 8002464:	2302      	movs	r3, #2
 8002466:	e0fc      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2240      	movs	r2, #64	@ 0x40
 800246c:	2101      	movs	r1, #1
 800246e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002470:	f7ff f942 	bl	80016f8 <HAL_GetTick>
 8002474:	0003      	movs	r3, r0
 8002476:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	0219      	lsls	r1, r3, #8
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2319      	movs	r3, #25
 8002484:	2201      	movs	r2, #1
 8002486:	f001 fcef 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0e7      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2241      	movs	r2, #65	@ 0x41
 8002496:	2122      	movs	r1, #34	@ 0x22
 8002498:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2242      	movs	r2, #66	@ 0x42
 800249e:	2140      	movs	r1, #64	@ 0x40
 80024a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	222c      	movs	r2, #44	@ 0x2c
 80024b2:	18ba      	adds	r2, r7, r2
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024be:	1dbb      	adds	r3, r7, #6
 80024c0:	881c      	ldrh	r4, [r3, #0]
 80024c2:	2308      	movs	r3, #8
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	230a      	movs	r3, #10
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	8819      	ldrh	r1, [r3, #0]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0023      	movs	r3, r4
 80024da:	f000 feff 	bl	80032dc <I2C_RequestMemoryRead>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d005      	beq.n	80024ee <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2240      	movs	r2, #64	@ 0x40
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0b9      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2bff      	cmp	r3, #255	@ 0xff
 80024f6:	d911      	bls.n	800251c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	22ff      	movs	r2, #255	@ 0xff
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	b2da      	uxtb	r2, r3
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	045c      	lsls	r4, r3, #17
 8002508:	230a      	movs	r3, #10
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	8819      	ldrh	r1, [r3, #0]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	4b56      	ldr	r3, [pc, #344]	@ (800266c <HAL_I2C_Mem_Read+0x260>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	0023      	movs	r3, r4
 8002516:	f001 fe81 	bl	800421c <I2C_TransferConfig>
 800251a:	e012      	b.n	8002542 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	b2da      	uxtb	r2, r3
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	049c      	lsls	r4, r3, #18
 8002530:	230a      	movs	r3, #10
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	8819      	ldrh	r1, [r3, #0]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <HAL_I2C_Mem_Read+0x260>)
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	0023      	movs	r3, r4
 800253e:	f001 fe6d 	bl	800421c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	0013      	movs	r3, r2
 800254c:	2200      	movs	r2, #0
 800254e:	2104      	movs	r1, #4
 8002550:	f001 fc8a 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e082      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03a      	beq.n	800260e <HAL_I2C_Mem_Read+0x202>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d136      	bne.n	800260e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	0013      	movs	r3, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	f001 fc5b 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e053      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2bff      	cmp	r3, #255	@ 0xff
 80025c2:	d911      	bls.n	80025e8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	22ff      	movs	r2, #255	@ 0xff
 80025c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	045c      	lsls	r4, r3, #17
 80025d4:	230a      	movs	r3, #10
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	8819      	ldrh	r1, [r3, #0]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	0023      	movs	r3, r4
 80025e2:	f001 fe1b 	bl	800421c <I2C_TransferConfig>
 80025e6:	e012      	b.n	800260e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	049c      	lsls	r4, r3, #18
 80025fc:	230a      	movs	r3, #10
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	8819      	ldrh	r1, [r3, #0]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	0023      	movs	r3, r4
 800260a:	f001 fe07 	bl	800421c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d194      	bne.n	8002542 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	0018      	movs	r0, r3
 8002620:	f001 fcc0 	bl	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e01a      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	490c      	ldr	r1, [pc, #48]	@ (8002670 <HAL_I2C_Mem_Read+0x264>)
 8002640:	400a      	ands	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2241      	movs	r2, #65	@ 0x41
 8002648:	2120      	movs	r1, #32
 800264a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2242      	movs	r2, #66	@ 0x42
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2240      	movs	r2, #64	@ 0x40
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b007      	add	sp, #28
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	80002400 	.word	0x80002400
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	230a      	movs	r3, #10
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	1c0a      	adds	r2, r1, #0
 8002686:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2241      	movs	r2, #65	@ 0x41
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	d000      	beq.n	800269a <HAL_I2C_IsDeviceReady+0x26>
 8002698:	e0df      	b.n	800285a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	401a      	ands	r2, r3
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0d4      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2C_IsDeviceReady+0x4c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0cd      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2101      	movs	r1, #1
 80026c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2241      	movs	r2, #65	@ 0x41
 80026cc:	2124      	movs	r1, #36	@ 0x24
 80026ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_I2C_IsDeviceReady+0x7a>
 80026de:	230a      	movs	r3, #10
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	059b      	lsls	r3, r3, #22
 80026e6:	0d9b      	lsrs	r3, r3, #22
 80026e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002864 <HAL_I2C_IsDeviceReady+0x1f0>)
 80026ea:	431a      	orrs	r2, r3
 80026ec:	e006      	b.n	80026fc <HAL_I2C_IsDeviceReady+0x88>
 80026ee:	230a      	movs	r3, #10
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	059b      	lsls	r3, r3, #22
 80026f6:	0d9b      	lsrs	r3, r3, #22
 80026f8:	4a5b      	ldr	r2, [pc, #364]	@ (8002868 <HAL_I2C_IsDeviceReady+0x1f4>)
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002702:	f7fe fff9 	bl	80016f8 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2220      	movs	r2, #32
 8002712:	4013      	ands	r3, r2
 8002714:	3b20      	subs	r3, #32
 8002716:	425a      	negs	r2, r3
 8002718:	4153      	adcs	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	231f      	movs	r3, #31
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	3b10      	subs	r3, #16
 800272e:	425a      	negs	r2, r3
 8002730:	4153      	adcs	r3, r2
 8002732:	b2da      	uxtb	r2, r3
 8002734:	231e      	movs	r3, #30
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800273a:	e035      	b.n	80027a8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	d01a      	beq.n	8002778 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe ffd9 	bl	80016f8 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <HAL_I2C_IsDeviceReady+0xe4>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10f      	bne.n	8002778 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2241      	movs	r2, #65	@ 0x41
 800275c:	2120      	movs	r1, #32
 800275e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	2220      	movs	r2, #32
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2240      	movs	r2, #64	@ 0x40
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e071      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2220      	movs	r2, #32
 8002780:	4013      	ands	r3, r2
 8002782:	3b20      	subs	r3, #32
 8002784:	425a      	negs	r2, r3
 8002786:	4153      	adcs	r3, r2
 8002788:	b2da      	uxtb	r2, r3
 800278a:	231f      	movs	r3, #31
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2210      	movs	r2, #16
 8002798:	4013      	ands	r3, r2
 800279a:	3b10      	subs	r3, #16
 800279c:	425a      	negs	r2, r3
 800279e:	4153      	adcs	r3, r2
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	231e      	movs	r3, #30
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027a8:	231f      	movs	r3, #31
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_I2C_IsDeviceReady+0x148>
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0bf      	beq.n	800273c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2210      	movs	r2, #16
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d01a      	beq.n	8002800 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	0013      	movs	r3, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	f001 fb46 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e03b      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2220      	movs	r2, #32
 80027ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2241      	movs	r2, #65	@ 0x41
 80027f0:	2120      	movs	r1, #32
 80027f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2240      	movs	r2, #64	@ 0x40
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e02d      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	0013      	movs	r3, r2
 800280a:	2200      	movs	r2, #0
 800280c:	2120      	movs	r1, #32
 800280e:	f001 fb2b 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e020      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2210      	movs	r2, #16
 8002820:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2220      	movs	r2, #32
 8002828:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d900      	bls.n	800283a <HAL_I2C_IsDeviceReady+0x1c6>
 8002838:	e74d      	b.n	80026d6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2241      	movs	r2, #65	@ 0x41
 800283e:	2120      	movs	r1, #32
 8002840:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	2220      	movs	r2, #32
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2240      	movs	r2, #64	@ 0x40
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b008      	add	sp, #32
 8002862:	bd80      	pop	{r7, pc}
 8002864:	02002000 	.word	0x02002000
 8002868:	02002800 	.word	0x02002800

0800286c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
  }
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	2201      	movs	r2, #1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2280      	movs	r2, #128	@ 0x80
 80028dc:	0052      	lsls	r2, r2, #1
 80028de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4013      	ands	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2280      	movs	r2, #128	@ 0x80
 80028ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028f0:	d00a      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	2208      	movs	r2, #8
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002918:	d00a      	beq.n	8002930 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	2202      	movs	r2, #2
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	220b      	movs	r2, #11
 800293a:	4013      	ands	r3, r2
 800293c:	d005      	beq.n	800294a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f001 f923 	bl	8003b90 <I2C_ITError>
  }
}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b006      	add	sp, #24
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	0008      	movs	r0, r1
 800298c:	0011      	movs	r1, r2
 800298e:	1cfb      	adds	r3, r7, #3
 8002990:	1c02      	adds	r2, r0, #0
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	003b      	movs	r3, r7
 8002996:	1c0a      	adds	r2, r1, #0
 8002998:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <I2C_Slave_ISR_IT+0x24>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0e7      	b.n	8002be8 <I2C_Slave_ISR_IT+0x1f4>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	d00a      	beq.n	8002a3e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a2e:	d006      	beq.n	8002a3e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 feca 	bl	80037d0 <I2C_ITSlaveCplt>
 8002a3c:	e0cf      	b.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	d052      	beq.n	8002aec <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a4c:	d04e      	beq.n	8002aec <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d12d      	bne.n	8002ab4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2241      	movs	r2, #65	@ 0x41
 8002a5c:	5c9b      	ldrb	r3, [r3, r2]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b28      	cmp	r3, #40	@ 0x28
 8002a62:	d10b      	bne.n	8002a7c <I2C_Slave_ISR_IT+0x88>
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	049b      	lsls	r3, r3, #18
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d106      	bne.n	8002a7c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 f833 	bl	8003ae0 <I2C_ITListenCplt>
 8002a7a:	e036      	b.n	8002aea <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2241      	movs	r2, #65	@ 0x41
 8002a80:	5c9b      	ldrb	r3, [r3, r2]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b29      	cmp	r3, #41	@ 0x29
 8002a86:	d110      	bne.n	8002aaa <I2C_Slave_ISR_IT+0xb6>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4a59      	ldr	r2, [pc, #356]	@ (8002bf0 <I2C_Slave_ISR_IT+0x1fc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00c      	beq.n	8002aaa <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2210      	movs	r2, #16
 8002a96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 f9a3 	bl	8003de6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 fd62 	bl	800356c <I2C_ITSlaveSeqCplt>
 8002aa8:	e01f      	b.n	8002aea <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ab2:	e091      	b.n	8002bd8 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <I2C_Slave_ISR_IT+0xe6>
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	045b      	lsls	r3, r3, #17
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d000      	beq.n	8002ada <I2C_Slave_ISR_IT+0xe6>
 8002ad8:	e07e      	b.n	8002bd8 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 f854 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ae8:	e076      	b.n	8002bd8 <I2C_Slave_ISR_IT+0x1e4>
 8002aea:	e075      	b.n	8002bd8 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d02f      	beq.n	8002b54 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002afa:	d02b      	beq.n	8002b54 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d14c      	bne.n	8002bdc <I2C_Slave_ISR_IT+0x1e8>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf0 <I2C_Slave_ISR_IT+0x1fc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d048      	beq.n	8002bdc <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fd0d 	bl	800356c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b52:	e043      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2208      	movs	r2, #8
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d00a      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b62:	d006      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fc18 	bl	80033a0 <I2C_ITAddrCplt>
 8002b70:	e035      	b.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d031      	beq.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b80:	d02d      	beq.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d018      	beq.n	8002bbe <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bbc:	e00f      	b.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	045b      	lsls	r3, r3, #17
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d002      	beq.n	8002bce <I2C_Slave_ISR_IT+0x1da>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fccb 	bl	800356c <I2C_ITSlaveSeqCplt>
 8002bd6:	e002      	b.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	e000      	b.n	8002bde <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8002bdc:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2240      	movs	r2, #64	@ 0x40
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b006      	add	sp, #24
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <I2C_Master_ISR_DMA+0x1a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0e7      	b.n	8002dde <I2C_Master_ISR_DMA+0x1ea>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d017      	beq.n	8002c4e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2210      	movs	r2, #16
 8002c22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c24:	d013      	beq.n	8002c4e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	2204      	movs	r2, #4
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f001 fb26 	bl	8004290 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f001 f8cd 	bl	8003de6 <I2C_Flush_TXDR>
 8002c4c:	e0c2      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	4013      	ands	r3, r2
 8002c54:	d100      	bne.n	8002c58 <I2C_Master_ISR_DMA+0x64>
 8002c56:	e07c      	b.n	8002d52 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	@ 0x40
 8002c5c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c5e:	d100      	bne.n	8002c62 <I2C_Master_ISR_DMA+0x6e>
 8002c60:	e077      	b.n	8002d52 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2140      	movs	r1, #64	@ 0x40
 8002c6e:	438a      	bics	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d055      	beq.n	8002d28 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	2312      	movs	r3, #18
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	0592      	lsls	r2, r2, #22
 8002c8a:	0d92      	lsrs	r2, r2, #22
 8002c8c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2bff      	cmp	r3, #255	@ 0xff
 8002c96:	d906      	bls.n	8002ca6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	22ff      	movs	r2, #255	@ 0xff
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	045b      	lsls	r3, r3, #17
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e010      	b.n	8002cc8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <I2C_Master_ISR_DMA+0x1f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e002      	b.n	8002cc8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	697c      	ldr	r4, [r7, #20]
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	8819      	ldrh	r1, [r3, #0]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	0023      	movs	r3, r4
 8002cde:	f001 fa9d 	bl	800421c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2241      	movs	r2, #65	@ 0x41
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b22      	cmp	r3, #34	@ 0x22
 8002cfe:	d109      	bne.n	8002d14 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	0209      	lsls	r1, r1, #8
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d12:	e05f      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2180      	movs	r1, #128	@ 0x80
 8002d20:	01c9      	lsls	r1, r1, #7
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d26:	e055      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	049b      	lsls	r3, r3, #18
 8002d32:	401a      	ands	r2, r3
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	049b      	lsls	r3, r3, #18
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d004      	beq.n	8002d46 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fbd2 	bl	80034e8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002d44:	e046      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2140      	movs	r1, #64	@ 0x40
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 ff20 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002d50:	e040      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2240      	movs	r2, #64	@ 0x40
 8002d56:	4013      	ands	r3, r2
 8002d58:	d02c      	beq.n	8002db4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2240      	movs	r2, #64	@ 0x40
 8002d5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d60:	d028      	beq.n	8002db4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	049b      	lsls	r3, r3, #18
 8002d76:	401a      	ands	r2, r3
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	049b      	lsls	r3, r3, #18
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d028      	beq.n	8002dd2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <I2C_Master_ISR_DMA+0x1f4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d109      	bne.n	8002d9e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	01c9      	lsls	r1, r1, #7
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002d9c:	e019      	b.n	8002dd2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 fba1 	bl	80034e8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002da6:	e014      	b.n	8002dd2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2140      	movs	r1, #64	@ 0x40
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 feef 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002db2:	e00e      	b.n	8002dd2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dc2:	d007      	beq.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 fc32 	bl	8003634 <I2C_ITMasterCplt>
 8002dd0:	e000      	b.n	8002dd4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002dd2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2240      	movs	r2, #64	@ 0x40
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b007      	add	sp, #28
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b089      	sub	sp, #36	@ 0x24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002df8:	4b90      	ldr	r3, [pc, #576]	@ (800303c <I2C_Mem_ISR_DMA+0x250>)
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	@ 0x40
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <I2C_Mem_ISR_DMA+0x1e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e113      	b.n	8003032 <I2C_Mem_ISR_DMA+0x246>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2210      	movs	r2, #16
 8002e16:	4013      	ands	r3, r2
 8002e18:	d017      	beq.n	8002e4a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e20:	d013      	beq.n	8002e4a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	2204      	movs	r2, #4
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2120      	movs	r1, #32
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f001 fa28 	bl	8004290 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 ffcf 	bl	8003de6 <I2C_Flush_TXDR>
 8002e48:	e0ee      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e58:	d009      	beq.n	8002e6e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4252      	negs	r2, r2
 8002e6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e6c:	e0dc      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	4013      	ands	r3, r2
 8002e74:	d063      	beq.n	8002f3e <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2240      	movs	r2, #64	@ 0x40
 8002e7a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e7c:	d05f      	beq.n	8002f3e <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2101      	movs	r1, #1
 8002e82:	0018      	movs	r0, r3
 8002e84:	f001 fa8e 	bl	80043a4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f001 f9ff 	bl	8004290 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d04a      	beq.n	8002f32 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2bff      	cmp	r3, #255	@ 0xff
 8002ea4:	d910      	bls.n	8002ec8 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	@ 0xff
 8002eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb0:	b299      	uxth	r1, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	045b      	lsls	r3, r3, #17
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	f001 f9ab 	bl	800421c <I2C_TransferConfig>
 8002ec6:	e011      	b.n	8002eec <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	b299      	uxth	r1, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	049b      	lsls	r3, r3, #18
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	9400      	str	r4, [sp, #0]
 8002ee8:	f001 f998 	bl	800421c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2241      	movs	r2, #65	@ 0x41
 8002f02:	5c9b      	ldrb	r3, [r3, r2]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b22      	cmp	r3, #34	@ 0x22
 8002f08:	d109      	bne.n	8002f1e <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0209      	lsls	r1, r1, #8
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f1c:	e084      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	01c9      	lsls	r1, r1, #7
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f30:	e07a      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2140      	movs	r1, #64	@ 0x40
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 fe2a 	bl	8003b90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f3c:	e074      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2240      	movs	r2, #64	@ 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	d062      	beq.n	800300c <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2240      	movs	r2, #64	@ 0x40
 8002f4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f4c:	d05e      	beq.n	800300c <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2101      	movs	r1, #1
 8002f52:	0018      	movs	r0, r3
 8002f54:	f001 fa26 	bl	80043a4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f001 f997 	bl	8004290 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2241      	movs	r2, #65	@ 0x41
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b22      	cmp	r3, #34	@ 0x22
 8002f6c:	d101      	bne.n	8002f72 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8002f6e:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <I2C_Mem_ISR_DMA+0x254>)
 8002f70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2bff      	cmp	r3, #255	@ 0xff
 8002f7a:	d911      	bls.n	8002fa0 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	22ff      	movs	r2, #255	@ 0xff
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	b299      	uxth	r1, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	045c      	lsls	r4, r3, #17
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	0023      	movs	r3, r4
 8002f9a:	f001 f93f 	bl	800421c <I2C_TransferConfig>
 8002f9e:	e012      	b.n	8002fc6 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	049c      	lsls	r4, r3, #18
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	0023      	movs	r3, r4
 8002fc2:	f001 f92b 	bl	800421c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2241      	movs	r2, #65	@ 0x41
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b22      	cmp	r3, #34	@ 0x22
 8002fe2:	d109      	bne.n	8002ff8 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0209      	lsls	r1, r1, #8
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ff6:	e017      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2180      	movs	r1, #128	@ 0x80
 8003004:	01c9      	lsls	r1, r1, #7
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800300a:	e00d      	b.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2220      	movs	r2, #32
 8003010:	4013      	ands	r3, r2
 8003012:	d009      	beq.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800301a:	d005      	beq.n	8003028 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f000 fb06 	bl	8003634 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b007      	add	sp, #28
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	80002000 	.word	0x80002000
 8003040:	80002400 	.word	0x80002400

08003044 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2240      	movs	r2, #64	@ 0x40
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <I2C_Slave_ISR_DMA+0x24>
 8003064:	2302      	movs	r3, #2
 8003066:	e0ce      	b.n	8003206 <I2C_Slave_ISR_DMA+0x1c2>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2240      	movs	r2, #64	@ 0x40
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2220      	movs	r2, #32
 8003074:	4013      	ands	r3, r2
 8003076:	d00a      	beq.n	800308e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800307e:	d006      	beq.n	800308e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fba2 	bl	80037d0 <I2C_ITSlaveCplt>
 800308c:	e0b6      	b.n	80031fc <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2210      	movs	r2, #16
 8003092:	4013      	ands	r3, r2
 8003094:	d100      	bne.n	8003098 <I2C_Slave_ISR_DMA+0x54>
 8003096:	e0a3      	b.n	80031e0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2210      	movs	r2, #16
 800309c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800309e:	d100      	bne.n	80030a2 <I2C_Slave_ISR_DMA+0x5e>
 80030a0:	e09e      	b.n	80031e0 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	01db      	lsls	r3, r3, #7
 80030a8:	4013      	ands	r3, r2
 80030aa:	d105      	bne.n	80030b8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030b4:	d100      	bne.n	80030b8 <I2C_Slave_ISR_DMA+0x74>
 80030b6:	e08c      	b.n	80031d2 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4013      	ands	r3, r2
 80030c8:	d007      	beq.n	80030da <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	2380      	movs	r3, #128	@ 0x80
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4013      	ands	r3, r2
 80030ea:	d007      	beq.n	80030fc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80030f8:	2301      	movs	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d12d      	bne.n	800315e <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2241      	movs	r2, #65	@ 0x41
 8003106:	5c9b      	ldrb	r3, [r3, r2]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b28      	cmp	r3, #40	@ 0x28
 800310c:	d10b      	bne.n	8003126 <I2C_Slave_ISR_DMA+0xe2>
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	049b      	lsls	r3, r3, #18
 8003114:	429a      	cmp	r2, r3
 8003116:	d106      	bne.n	8003126 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fcde 	bl	8003ae0 <I2C_ITListenCplt>
 8003124:	e054      	b.n	80031d0 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2241      	movs	r2, #65	@ 0x41
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b29      	cmp	r3, #41	@ 0x29
 8003130:	d110      	bne.n	8003154 <I2C_Slave_ISR_DMA+0x110>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4a36      	ldr	r2, [pc, #216]	@ (8003210 <I2C_Slave_ISR_DMA+0x1cc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00c      	beq.n	8003154 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2210      	movs	r2, #16
 8003140:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fe4e 	bl	8003de6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fa0d 	bl	800356c <I2C_ITSlaveSeqCplt>
 8003152:	e03d      	b.n	80031d0 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800315c:	e03e      	b.n	80031dc <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2210      	movs	r2, #16
 8003164:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	2204      	movs	r2, #4
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003172:	2317      	movs	r3, #23
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	2141      	movs	r1, #65	@ 0x41
 800317a:	5c52      	ldrb	r2, [r2, r1]
 800317c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <I2C_Slave_ISR_DMA+0x14a>
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	2380      	movs	r3, #128	@ 0x80
 8003188:	045b      	lsls	r3, r3, #17
 800318a:	429a      	cmp	r2, r3
 800318c:	d126      	bne.n	80031dc <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800318e:	2217      	movs	r2, #23
 8003190:	18bb      	adds	r3, r7, r2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b21      	cmp	r3, #33	@ 0x21
 8003196:	d003      	beq.n	80031a0 <I2C_Slave_ISR_DMA+0x15c>
 8003198:	18bb      	adds	r3, r7, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b29      	cmp	r3, #41	@ 0x29
 800319e:	d103      	bne.n	80031a8 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80031a6:	e00b      	b.n	80031c0 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031a8:	2217      	movs	r2, #23
 80031aa:	18bb      	adds	r3, r7, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b22      	cmp	r3, #34	@ 0x22
 80031b0:	d003      	beq.n	80031ba <I2C_Slave_ISR_DMA+0x176>
 80031b2:	18bb      	adds	r3, r7, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031b8:	d102      	bne.n	80031c0 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2222      	movs	r2, #34	@ 0x22
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fce1 	bl	8003b90 <I2C_ITError>
      if (treatdmanack == 1U)
 80031ce:	e005      	b.n	80031dc <I2C_Slave_ISR_DMA+0x198>
 80031d0:	e004      	b.n	80031dc <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80031da:	e00f      	b.n	80031fc <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 80031dc:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80031de:	e00d      	b.n	80031fc <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2208      	movs	r2, #8
 80031e4:	4013      	ands	r3, r2
 80031e6:	d009      	beq.n	80031fc <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031ee:	d005      	beq.n	80031fc <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f8d2 	bl	80033a0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	@ 0x40
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b008      	add	sp, #32
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	ffff0000 	.word	0xffff0000

08003214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	000c      	movs	r4, r1
 800321e:	0010      	movs	r0, r2
 8003220:	0019      	movs	r1, r3
 8003222:	250a      	movs	r5, #10
 8003224:	197b      	adds	r3, r7, r5
 8003226:	1c22      	adds	r2, r4, #0
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	2308      	movs	r3, #8
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	1c02      	adds	r2, r0, #0
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	1dbb      	adds	r3, r7, #6
 8003234:	1c0a      	adds	r2, r1, #0
 8003236:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003238:	1dbb      	adds	r3, r7, #6
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	045c      	lsls	r4, r3, #17
 8003242:	197b      	adds	r3, r7, r5
 8003244:	8819      	ldrh	r1, [r3, #0]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <I2C_RequestMemoryWrite+0xc4>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	0023      	movs	r3, r4
 800324e:	f000 ffe5 	bl	800421c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fe5d 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d001      	beq.n	8003266 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e033      	b.n	80032ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326e:	2308      	movs	r3, #8
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28
 800327c:	e019      	b.n	80032b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800327e:	2308      	movs	r3, #8
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	b29b      	uxth	r3, r3
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 fe3e 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e014      	b.n	80032ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a4:	2308      	movs	r3, #8
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	0013      	movs	r3, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	f000 fdd2 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	80002000 	.word	0x80002000

080032dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	000c      	movs	r4, r1
 80032e6:	0010      	movs	r0, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	250a      	movs	r5, #10
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	1c22      	adds	r2, r4, #0
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	2308      	movs	r3, #8
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	1c02      	adds	r2, r0, #0
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	1c0a      	adds	r2, r1, #0
 80032fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003300:	1dbb      	adds	r3, r7, #6
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	197b      	adds	r3, r7, r5
 8003308:	8819      	ldrh	r1, [r3, #0]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <I2C_RequestMemoryRead+0xc0>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	f000 ff83 	bl	800421c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fdfb 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e033      	b.n	8003392 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003332:	2308      	movs	r3, #8
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003340:	e019      	b.n	8003376 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003342:	2308      	movs	r3, #8
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	b29b      	uxth	r3, r3
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003356:	6a39      	ldr	r1, [r7, #32]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fddc 	bl	8003f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e014      	b.n	8003392 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003368:	2308      	movs	r3, #8
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	0013      	movs	r3, r2
 8003380:	2200      	movs	r2, #0
 8003382:	2140      	movs	r1, #64	@ 0x40
 8003384:	f000 fd70 	bl	8003e68 <I2C_WaitOnFlagUntilTimeout>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d001      	beq.n	8003390 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bdb0      	pop	{r4, r5, r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	80002000 	.word	0x80002000

080033a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2241      	movs	r2, #65	@ 0x41
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	001a      	movs	r2, r3
 80033b4:	2328      	movs	r3, #40	@ 0x28
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b28      	cmp	r3, #40	@ 0x28
 80033ba:	d000      	beq.n	80033be <I2C_ITAddrCplt+0x1e>
 80033bc:	e088      	b.n	80034d0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	250f      	movs	r5, #15
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	2101      	movs	r1, #1
 80033ce:	400a      	ands	r2, r1
 80033d0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b29a      	uxth	r2, r3
 80033dc:	200c      	movs	r0, #12
 80033de:	183b      	adds	r3, r7, r0
 80033e0:	21fe      	movs	r1, #254	@ 0xfe
 80033e2:	400a      	ands	r2, r1
 80033e4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	240a      	movs	r4, #10
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	0592      	lsls	r2, r2, #22
 80033f4:	0d92      	lsrs	r2, r2, #22
 80033f6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	2308      	movs	r3, #8
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	21fe      	movs	r1, #254	@ 0xfe
 8003406:	400a      	ands	r2, r1
 8003408:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d148      	bne.n	80034a4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003412:	0021      	movs	r1, r4
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	09db      	lsrs	r3, r3, #7
 800341a:	b29a      	uxth	r2, r3
 800341c:	183b      	adds	r3, r7, r0
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	4053      	eors	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	001a      	movs	r2, r3
 8003426:	2306      	movs	r3, #6
 8003428:	4013      	ands	r3, r2
 800342a:	d120      	bne.n	800346e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800342c:	183b      	adds	r3, r7, r0
 800342e:	187a      	adds	r2, r7, r1
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003442:	2b02      	cmp	r3, #2
 8003444:	d14c      	bne.n	80034e0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2208      	movs	r2, #8
 8003452:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2240      	movs	r2, #64	@ 0x40
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800345c:	183b      	adds	r3, r7, r0
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	197b      	adds	r3, r7, r5
 8003462:	7819      	ldrb	r1, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff fa8b 	bl	8002982 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800346c:	e038      	b.n	80034e0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800346e:	240c      	movs	r4, #12
 8003470:	193b      	adds	r3, r7, r4
 8003472:	2208      	movs	r2, #8
 8003474:	18ba      	adds	r2, r7, r2
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0011      	movs	r1, r2
 8003482:	0018      	movs	r0, r3
 8003484:	f000 ff8e 	bl	80043a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003490:	193b      	adds	r3, r7, r4
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	7819      	ldrb	r1, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fa70 	bl	8002982 <HAL_I2C_AddrCallback>
}
 80034a2:	e01d      	b.n	80034e0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 ff79 	bl	80043a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034ba:	230c      	movs	r3, #12
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	230f      	movs	r3, #15
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	7819      	ldrb	r1, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fa5a 	bl	8002982 <HAL_I2C_AddrCallback>
}
 80034ce:	e007      	b.n	80034e0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2208      	movs	r2, #8
 80034d6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2240      	movs	r2, #64	@ 0x40
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bdb0      	pop	{r4, r5, r7, pc}

080034e8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2242      	movs	r2, #66	@ 0x42
 80034f4:	2100      	movs	r1, #0
 80034f6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2241      	movs	r2, #65	@ 0x41
 80034fc:	5c9b      	ldrb	r3, [r3, r2]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b21      	cmp	r3, #33	@ 0x21
 8003502:	d117      	bne.n	8003534 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2241      	movs	r2, #65	@ 0x41
 8003508:	2120      	movs	r1, #32
 800350a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2211      	movs	r2, #17
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2101      	movs	r1, #1
 800351c:	0018      	movs	r0, r3
 800351e:	f000 ff41 	bl	80043a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff fa10 	bl	8002952 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003532:	e016      	b.n	8003562 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2241      	movs	r2, #65	@ 0x41
 8003538:	2120      	movs	r1, #32
 800353a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2212      	movs	r2, #18
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2102      	movs	r1, #2
 800354c:	0018      	movs	r0, r3
 800354e:	f000 ff29 	bl	80043a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2240      	movs	r2, #64	@ 0x40
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff fa00 	bl	8002962 <HAL_I2C_MasterRxCpltCallback>
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2242      	movs	r2, #66	@ 0x42
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	4013      	ands	r3, r2
 800358c:	d008      	beq.n	80035a0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4924      	ldr	r1, [pc, #144]	@ (800362c <I2C_ITSlaveSeqCplt+0xc0>)
 800359a:	400a      	ands	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e00c      	b.n	80035ba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	4013      	ands	r3, r2
 80035a8:	d007      	beq.n	80035ba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	491e      	ldr	r1, [pc, #120]	@ (8003630 <I2C_ITSlaveSeqCplt+0xc4>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2241      	movs	r2, #65	@ 0x41
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b29      	cmp	r3, #41	@ 0x29
 80035c4:	d114      	bne.n	80035f0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2241      	movs	r2, #65	@ 0x41
 80035ca:	2128      	movs	r1, #40	@ 0x28
 80035cc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2221      	movs	r2, #33	@ 0x21
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2101      	movs	r1, #1
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 fee3 	bl	80043a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2240      	movs	r2, #64	@ 0x40
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff f9c2 	bl	8002972 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80035ee:	e019      	b.n	8003624 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2241      	movs	r2, #65	@ 0x41
 80035f4:	5c9b      	ldrb	r3, [r3, r2]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035fa:	d113      	bne.n	8003624 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2241      	movs	r2, #65	@ 0x41
 8003600:	2128      	movs	r1, #40	@ 0x28
 8003602:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2222      	movs	r2, #34	@ 0x22
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2102      	movs	r1, #2
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fec8 	bl	80043a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f7fd fd98 	bl	8001154 <HAL_I2C_SlaveRxCpltCallback>
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	ffffbfff 	.word	0xffffbfff
 8003630:	ffff7fff 	.word	0xffff7fff

08003634 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2220      	movs	r2, #32
 8003648:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2241      	movs	r2, #65	@ 0x41
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b21      	cmp	r3, #33	@ 0x21
 8003654:	d108      	bne.n	8003668 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2101      	movs	r1, #1
 800365a:	0018      	movs	r0, r3
 800365c:	f000 fea2 	bl	80043a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2211      	movs	r2, #17
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
 8003666:	e00d      	b.n	8003684 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2241      	movs	r2, #65	@ 0x41
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b22      	cmp	r3, #34	@ 0x22
 8003672:	d107      	bne.n	8003684 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2102      	movs	r1, #2
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fe93 	bl	80043a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2212      	movs	r2, #18
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	494e      	ldr	r1, [pc, #312]	@ (80037c8 <I2C_ITMasterCplt+0x194>)
 8003690:	400a      	ands	r2, r1
 8003692:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4b      	ldr	r2, [pc, #300]	@ (80037cc <I2C_ITMasterCplt+0x198>)
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2210      	movs	r2, #16
 80036a4:	4013      	ands	r3, r2
 80036a6:	d009      	beq.n	80036bc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b4:	2204      	movs	r2, #4
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2241      	movs	r2, #65	@ 0x41
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b60      	cmp	r3, #96	@ 0x60
 80036c6:	d109      	bne.n	80036dc <I2C_ITMasterCplt+0xa8>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2204      	movs	r2, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	d005      	beq.n	80036dc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80036da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 fb81 	bl	8003de6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2241      	movs	r2, #65	@ 0x41
 80036ee:	5c9b      	ldrb	r3, [r3, r2]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b60      	cmp	r3, #96	@ 0x60
 80036f4:	d002      	beq.n	80036fc <I2C_ITMasterCplt+0xc8>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fa43 	bl	8003b90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800370a:	e058      	b.n	80037be <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	5c9b      	ldrb	r3, [r3, r2]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b21      	cmp	r3, #33	@ 0x21
 8003716:	d126      	bne.n	8003766 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2241      	movs	r2, #65	@ 0x41
 800371c:	2120      	movs	r1, #32
 800371e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2242      	movs	r2, #66	@ 0x42
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b40      	cmp	r3, #64	@ 0x40
 8003730:	d10c      	bne.n	800374c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2242      	movs	r2, #66	@ 0x42
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2240      	movs	r2, #64	@ 0x40
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff f934 	bl	80029b2 <HAL_I2C_MemTxCpltCallback>
}
 800374a:	e038      	b.n	80037be <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2242      	movs	r2, #66	@ 0x42
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	@ 0x40
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff f8f7 	bl	8002952 <HAL_I2C_MasterTxCpltCallback>
}
 8003764:	e02b      	b.n	80037be <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2241      	movs	r2, #65	@ 0x41
 800376a:	5c9b      	ldrb	r3, [r3, r2]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b22      	cmp	r3, #34	@ 0x22
 8003770:	d125      	bne.n	80037be <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2241      	movs	r2, #65	@ 0x41
 8003776:	2120      	movs	r1, #32
 8003778:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2242      	movs	r2, #66	@ 0x42
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d10c      	bne.n	80037a6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2242      	movs	r2, #66	@ 0x42
 8003790:	2100      	movs	r1, #0
 8003792:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7ff f90f 	bl	80029c2 <HAL_I2C_MemRxCpltCallback>
}
 80037a4:	e00b      	b.n	80037be <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2242      	movs	r2, #66	@ 0x42
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	@ 0x40
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff f8d2 	bl	8002962 <HAL_I2C_MasterRxCpltCallback>
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	fe00e800 	.word	0xfe00e800
 80037cc:	ffff0000 	.word	0xffff0000

080037d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037ec:	200b      	movs	r0, #11
 80037ee:	183b      	adds	r3, r7, r0
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	2141      	movs	r1, #65	@ 0x41
 80037f4:	5c52      	ldrb	r2, [r2, r1]
 80037f6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003800:	183b      	adds	r3, r7, r0
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b21      	cmp	r3, #33	@ 0x21
 8003806:	d003      	beq.n	8003810 <I2C_ITSlaveCplt+0x40>
 8003808:	183b      	adds	r3, r7, r0
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b29      	cmp	r3, #41	@ 0x29
 800380e:	d109      	bne.n	8003824 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003810:	4aac      	ldr	r2, [pc, #688]	@ (8003ac4 <I2C_ITSlaveCplt+0x2f4>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f000 fdc4 	bl	80043a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2221      	movs	r2, #33	@ 0x21
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
 8003822:	e020      	b.n	8003866 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003824:	220b      	movs	r2, #11
 8003826:	18bb      	adds	r3, r7, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b22      	cmp	r3, #34	@ 0x22
 800382c:	d003      	beq.n	8003836 <I2C_ITSlaveCplt+0x66>
 800382e:	18bb      	adds	r3, r7, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b2a      	cmp	r3, #42	@ 0x2a
 8003834:	d109      	bne.n	800384a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003836:	4aa4      	ldr	r2, [pc, #656]	@ (8003ac8 <I2C_ITSlaveCplt+0x2f8>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fdb1 	bl	80043a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2222      	movs	r2, #34	@ 0x22
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
 8003848:	e00d      	b.n	8003866 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800384a:	230b      	movs	r3, #11
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b28      	cmp	r3, #40	@ 0x28
 8003852:	d108      	bne.n	8003866 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003854:	4a9d      	ldr	r2, [pc, #628]	@ (8003acc <I2C_ITSlaveCplt+0x2fc>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0011      	movs	r1, r2
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fda2 	bl	80043a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0209      	lsls	r1, r1, #8
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4993      	ldr	r1, [pc, #588]	@ (8003ad0 <I2C_ITSlaveCplt+0x300>)
 8003884:	400a      	ands	r2, r1
 8003886:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 faab 	bl	8003de6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	01db      	lsls	r3, r3, #7
 8003896:	4013      	ands	r3, r2
 8003898:	d013      	beq.n	80038c2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	498b      	ldr	r1, [pc, #556]	@ (8003ad4 <I2C_ITSlaveCplt+0x304>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01f      	beq.n	80038f2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038c0:	e017      	b.n	80038f2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	4013      	ands	r3, r2
 80038ca:	d012      	beq.n	80038f2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4980      	ldr	r1, [pc, #512]	@ (8003ad8 <I2C_ITSlaveCplt+0x308>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d020      	beq.n	800393c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2204      	movs	r2, #4
 80038fe:	4393      	bics	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	2204      	movs	r2, #4
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2210      	movs	r2, #16
 8003956:	4013      	ands	r3, r2
 8003958:	d04f      	beq.n	80039fa <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2210      	movs	r2, #16
 800395e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003960:	d04b      	beq.n	80039fa <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d12d      	bne.n	80039c8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2241      	movs	r2, #65	@ 0x41
 8003970:	5c9b      	ldrb	r3, [r3, r2]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b28      	cmp	r3, #40	@ 0x28
 8003976:	d10b      	bne.n	8003990 <I2C_ITSlaveCplt+0x1c0>
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	049b      	lsls	r3, r3, #18
 800397e:	429a      	cmp	r2, r3
 8003980:	d106      	bne.n	8003990 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f8a9 	bl	8003ae0 <I2C_ITListenCplt>
 800398e:	e034      	b.n	80039fa <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2241      	movs	r2, #65	@ 0x41
 8003994:	5c9b      	ldrb	r3, [r3, r2]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b29      	cmp	r3, #41	@ 0x29
 800399a:	d110      	bne.n	80039be <I2C_ITSlaveCplt+0x1ee>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a4f      	ldr	r2, [pc, #316]	@ (8003adc <I2C_ITSlaveCplt+0x30c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00c      	beq.n	80039be <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2210      	movs	r2, #16
 80039aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 fa19 	bl	8003de6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff fdd8 	bl	800356c <I2C_ITSlaveSeqCplt>
 80039bc:	e01d      	b.n	80039fa <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	61da      	str	r2, [r3, #28]
 80039c6:	e018      	b.n	80039fa <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2210      	movs	r2, #16
 80039ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	2204      	movs	r2, #4
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <I2C_ITSlaveCplt+0x21c>
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	2380      	movs	r3, #128	@ 0x80
 80039e6:	045b      	lsls	r3, r3, #17
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d106      	bne.n	80039fa <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 f8cb 	bl	8003b90 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2242      	movs	r2, #66	@ 0x42
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 f8b9 	bl	8003b90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2241      	movs	r2, #65	@ 0x41
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b28      	cmp	r3, #40	@ 0x28
 8003a28:	d147      	bne.n	8003aba <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f855 	bl	8003ae0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a36:	e040      	b.n	8003aba <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <I2C_ITSlaveCplt+0x30c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d016      	beq.n	8003a70 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff fd91 	bl	800356c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <I2C_ITSlaveCplt+0x30c>)
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2241      	movs	r2, #65	@ 0x41
 8003a54:	2120      	movs	r1, #32
 8003a56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2240      	movs	r2, #64	@ 0x40
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7fe ff9a 	bl	80029a2 <HAL_I2C_ListenCpltCallback>
}
 8003a6e:	e024      	b.n	8003aba <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2241      	movs	r2, #65	@ 0x41
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b22      	cmp	r3, #34	@ 0x22
 8003a7a:	d10f      	bne.n	8003a9c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2241      	movs	r2, #65	@ 0x41
 8003a80:	2120      	movs	r1, #32
 8003a82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2240      	movs	r2, #64	@ 0x40
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7fd fb5d 	bl	8001154 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a9a:	e00e      	b.n	8003aba <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2241      	movs	r2, #65	@ 0x41
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2240      	movs	r2, #64	@ 0x40
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7fe ff5c 	bl	8002972 <HAL_I2C_SlaveTxCpltCallback>
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b006      	add	sp, #24
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	00008001 	.word	0x00008001
 8003ac8:	00008002 	.word	0x00008002
 8003acc:	00008003 	.word	0x00008003
 8003ad0:	fe00e800 	.word	0xfe00e800
 8003ad4:	ffffbfff 	.word	0xffffbfff
 8003ad8:	ffff7fff 	.word	0xffff7fff
 8003adc:	ffff0000 	.word	0xffff0000

08003ae0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <I2C_ITListenCplt+0xa8>)
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	@ 0x41
 8003afa:	2120      	movs	r1, #32
 8003afc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2242      	movs	r2, #66	@ 0x42
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d022      	beq.n	8003b5a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	2204      	movs	r2, #4
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <I2C_ITListenCplt+0xac>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fc1f 	bl	80043a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2240      	movs	r2, #64	@ 0x40
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7fe ff12 	bl	80029a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	ffff0000 	.word	0xffff0000
 8003b8c:	00008003 	.word	0x00008003

08003b90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b9a:	200f      	movs	r0, #15
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	2141      	movs	r1, #65	@ 0x41
 8003ba2:	5c52      	ldrb	r2, [r2, r1]
 8003ba4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2242      	movs	r2, #66	@ 0x42
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a72      	ldr	r2, [pc, #456]	@ (8003d7c <I2C_ITError+0x1ec>)
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b28      	cmp	r3, #40	@ 0x28
 8003bcc:	d007      	beq.n	8003bde <I2C_ITError+0x4e>
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b29      	cmp	r3, #41	@ 0x29
 8003bd4:	d003      	beq.n	8003bde <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bdc:	d10c      	bne.n	8003bf8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2103      	movs	r1, #3
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 fbde 	bl	80043a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2241      	movs	r2, #65	@ 0x41
 8003bec:	2128      	movs	r1, #40	@ 0x28
 8003bee:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a63      	ldr	r2, [pc, #396]	@ (8003d80 <I2C_ITError+0x1f0>)
 8003bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bf6:	e032      	b.n	8003c5e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bf8:	4a62      	ldr	r2, [pc, #392]	@ (8003d84 <I2C_ITError+0x1f4>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 fbd0 	bl	80043a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 f8ed 	bl	8003de6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2241      	movs	r2, #65	@ 0x41
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b60      	cmp	r3, #96	@ 0x60
 8003c16:	d01f      	beq.n	8003c58 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2241      	movs	r2, #65	@ 0x41
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2220      	movs	r2, #32
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d114      	bne.n	8003c58 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2210      	movs	r2, #16
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d109      	bne.n	8003c50 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	2204      	movs	r2, #4
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03b      	beq.n	8003ce4 <I2C_ITError+0x154>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b11      	cmp	r3, #17
 8003c70:	d002      	beq.n	8003c78 <I2C_ITError+0xe8>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b21      	cmp	r3, #33	@ 0x21
 8003c76:	d135      	bne.n	8003ce4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	01db      	lsls	r3, r3, #7
 8003c82:	401a      	ands	r2, r3
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	493c      	ldr	r1, [pc, #240]	@ (8003d88 <I2C_ITError+0x1f8>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fd feb5 	bl	8001a10 <HAL_DMA_GetState>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d016      	beq.n	8003cda <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <I2C_ITError+0x1fc>)
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7fd fe3b 	bl	800193c <HAL_DMA_Abort_IT>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d051      	beq.n	8003d6e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cd8:	e049      	b.n	8003d6e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 f859 	bl	8003d94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ce2:	e044      	b.n	8003d6e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d03b      	beq.n	8003d64 <I2C_ITError+0x1d4>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b12      	cmp	r3, #18
 8003cf0:	d002      	beq.n	8003cf8 <I2C_ITError+0x168>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b22      	cmp	r3, #34	@ 0x22
 8003cf6:	d135      	bne.n	8003d64 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	401a      	ands	r2, r3
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	491e      	ldr	r1, [pc, #120]	@ (8003d90 <I2C_ITError+0x200>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd fe75 	bl	8001a10 <HAL_DMA_GetState>
 8003d26:	0003      	movs	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d016      	beq.n	8003d5a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <I2C_ITError+0x1fc>)
 8003d32:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fd fdfb 	bl	800193c <HAL_DMA_Abort_IT>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d013      	beq.n	8003d72 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	0018      	movs	r0, r3
 8003d56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d58:	e00b      	b.n	8003d72 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 f819 	bl	8003d94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d62:	e006      	b.n	8003d72 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 f814 	bl	8003d94 <I2C_TreatErrorCallback>
  }
}
 8003d6c:	e002      	b.n	8003d74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	e000      	b.n	8003d74 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d72:	46c0      	nop			@ (mov r8, r8)
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffff0000 	.word	0xffff0000
 8003d80:	080029f5 	.word	0x080029f5
 8003d84:	00008003 	.word	0x00008003
 8003d88:	ffffbfff 	.word	0xffffbfff
 8003d8c:	08003e2b 	.word	0x08003e2b
 8003d90:	ffff7fff 	.word	0xffff7fff

08003d94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	@ 0x41
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b60      	cmp	r3, #96	@ 0x60
 8003da6:	d10f      	bne.n	8003dc8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2241      	movs	r2, #65	@ 0x41
 8003dac:	2120      	movs	r1, #32
 8003dae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2240      	movs	r2, #64	@ 0x40
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7fe fe0e 	bl	80029e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dc6:	e00a      	b.n	8003dde <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fe fdfa 	bl	80029d2 <HAL_I2C_ErrorCallback>
}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d103      	bne.n	8003e04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d007      	beq.n	8003e22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	619a      	str	r2, [r3, #24]
  }
}
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e54:	2200      	movs	r2, #0
 8003e56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7ff ff9a 	bl	8003d94 <I2C_TreatErrorCallback>
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e78:	e03a      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f8d3 	bl	800402c <I2C_IsErrorOccurred>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e040      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	d02d      	beq.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fd fc30 	bl	80016f8 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x42>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d122      	bne.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	425a      	negs	r2, r3
 8003eba:	4153      	adcs	r3, r2
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d113      	bne.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	2220      	movs	r2, #32
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2241      	movs	r2, #65	@ 0x41
 8003ed8:	2120      	movs	r1, #32
 8003eda:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2242      	movs	r2, #66	@ 0x42
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2240      	movs	r2, #64	@ 0x40
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e00f      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	425a      	negs	r2, r3
 8003f00:	4153      	adcs	r3, r2
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	001a      	movs	r2, r3
 8003f06:	1dfb      	adds	r3, r7, #7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d0b5      	beq.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b004      	add	sp, #16
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f24:	e032      	b.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 f87d 	bl	800402c <I2C_IsErrorOccurred>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e030      	b.n	8003f9c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	d025      	beq.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fd fbda 	bl	80016f8 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11a      	bne.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d013      	beq.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f68:	2220      	movs	r2, #32
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2241      	movs	r2, #65	@ 0x41
 8003f74:	2120      	movs	r1, #32
 8003f76:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2242      	movs	r2, #66	@ 0x42
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e007      	b.n	8003f9c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2202      	movs	r2, #2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d1c5      	bne.n	8003f26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb0:	e02f      	b.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 f837 	bl	800402c <I2C_IsErrorOccurred>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e02d      	b.n	8004022 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fd fb97 	bl	80016f8 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11a      	bne.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d013      	beq.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	2220      	movs	r2, #32
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2241      	movs	r2, #65	@ 0x41
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2242      	movs	r2, #66	@ 0x42
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	2100      	movs	r1, #0
 800400c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e007      	b.n	8004022 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2220      	movs	r2, #32
 800401a:	4013      	ands	r3, r2
 800401c:	2b20      	cmp	r3, #32
 800401e:	d1c8      	bne.n	8003fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2327      	movs	r3, #39	@ 0x27
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2210      	movs	r2, #16
 8004054:	4013      	ands	r3, r2
 8004056:	d100      	bne.n	800405a <I2C_IsErrorOccurred+0x2e>
 8004058:	e079      	b.n	800414e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004062:	e057      	b.n	8004114 <I2C_IsErrorOccurred+0xe8>
 8004064:	2227      	movs	r2, #39	@ 0x27
 8004066:	18bb      	adds	r3, r7, r2
 8004068:	18ba      	adds	r2, r7, r2
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	3301      	adds	r3, #1
 8004072:	d04f      	beq.n	8004114 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fd fb40 	bl	80016f8 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <I2C_IsErrorOccurred+0x5e>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d144      	bne.n	8004114 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004098:	2013      	movs	r0, #19
 800409a:	183b      	adds	r3, r7, r0
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	2142      	movs	r1, #66	@ 0x42
 80040a0:	5c52      	ldrb	r2, [r2, r1]
 80040a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	401a      	ands	r2, r3
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d126      	bne.n	8004106 <I2C_IsErrorOccurred+0xda>
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	01db      	lsls	r3, r3, #7
 80040be:	429a      	cmp	r2, r3
 80040c0:	d021      	beq.n	8004106 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80040c2:	183b      	adds	r3, r7, r0
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d01d      	beq.n	8004106 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	01c9      	lsls	r1, r1, #7
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040dc:	f7fd fb0c 	bl	80016f8 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e4:	e00f      	b.n	8004106 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040e6:	f7fd fb07 	bl	80016f8 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b19      	cmp	r3, #25
 80040f2:	d908      	bls.n	8004106 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2220      	movs	r2, #32
 80040f8:	4313      	orrs	r3, r2
 80040fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040fc:	2327      	movs	r3, #39	@ 0x27
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]

              break;
 8004104:	e006      	b.n	8004114 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2220      	movs	r2, #32
 800410e:	4013      	ands	r3, r2
 8004110:	2b20      	cmp	r3, #32
 8004112:	d1e8      	bne.n	80040e6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2220      	movs	r2, #32
 800411c:	4013      	ands	r3, r2
 800411e:	2b20      	cmp	r3, #32
 8004120:	d004      	beq.n	800412c <I2C_IsErrorOccurred+0x100>
 8004122:	2327      	movs	r3, #39	@ 0x27
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d09b      	beq.n	8004064 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800412c:	2327      	movs	r3, #39	@ 0x27
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2220      	movs	r2, #32
 800413c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2204      	movs	r2, #4
 8004142:	4313      	orrs	r3, r2
 8004144:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004146:	2327      	movs	r3, #39	@ 0x27
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	2380      	movs	r3, #128	@ 0x80
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4013      	ands	r3, r2
 800415e:	d00c      	beq.n	800417a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2201      	movs	r2, #1
 8004164:	4313      	orrs	r3, r2
 8004166:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004172:	2327      	movs	r3, #39	@ 0x27
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4013      	ands	r3, r2
 8004182:	d00c      	beq.n	800419e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2208      	movs	r2, #8
 8004188:	4313      	orrs	r3, r2
 800418a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	00d2      	lsls	r2, r2, #3
 8004194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004196:	2327      	movs	r3, #39	@ 0x27
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	d00c      	beq.n	80041c2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2202      	movs	r2, #2
 80041ac:	4313      	orrs	r3, r2
 80041ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ba:	2327      	movs	r3, #39	@ 0x27
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80041c2:	2327      	movs	r3, #39	@ 0x27
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01d      	beq.n	8004208 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff fe09 	bl	8003de6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	490e      	ldr	r1, [pc, #56]	@ (8004218 <I2C_IsErrorOccurred+0x1ec>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2241      	movs	r2, #65	@ 0x41
 80041f4:	2120      	movs	r1, #32
 80041f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2242      	movs	r2, #66	@ 0x42
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2240      	movs	r2, #64	@ 0x40
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004208:	2327      	movs	r3, #39	@ 0x27
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	781b      	ldrb	r3, [r3, #0]
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b00a      	add	sp, #40	@ 0x28
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	fe00e800 	.word	0xfe00e800

0800421c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	0008      	movs	r0, r1
 8004226:	0011      	movs	r1, r2
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	240a      	movs	r4, #10
 800422c:	193b      	adds	r3, r7, r4
 800422e:	1c02      	adds	r2, r0, #0
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	2009      	movs	r0, #9
 8004234:	183b      	adds	r3, r7, r0
 8004236:	1c0a      	adds	r2, r1, #0
 8004238:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800423a:	193b      	adds	r3, r7, r4
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	059b      	lsls	r3, r3, #22
 8004240:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004242:	183b      	adds	r3, r7, r0
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	0419      	lsls	r1, r3, #16
 8004248:	23ff      	movs	r3, #255	@ 0xff
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	4313      	orrs	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004266:	0d51      	lsrs	r1, r2, #21
 8004268:	2280      	movs	r2, #128	@ 0x80
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	400a      	ands	r2, r1
 800426e:	4907      	ldr	r1, [pc, #28]	@ (800428c <I2C_TransferConfig+0x70>)
 8004270:	430a      	orrs	r2, r1
 8004272:	43d2      	mvns	r2, r2
 8004274:	401a      	ands	r2, r3
 8004276:	0011      	movs	r1, r2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b007      	add	sp, #28
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	03ff63ff 	.word	0x03ff63ff

08004290 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	000a      	movs	r2, r1
 800429a:	1cbb      	adds	r3, r7, #2
 800429c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <I2C_Enable_IRQ+0x108>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d035      	beq.n	8004318 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80042b0:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <I2C_Enable_IRQ+0x10c>)
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d030      	beq.n	8004318 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <I2C_Enable_IRQ+0x110>)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d02b      	beq.n	8004318 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80042c0:	1cbb      	adds	r3, r7, #2
 80042c2:	2200      	movs	r2, #0
 80042c4:	5e9b      	ldrsh	r3, [r3, r2]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da03      	bge.n	80042d2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22b8      	movs	r2, #184	@ 0xb8
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042d2:	1cbb      	adds	r3, r7, #2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	4013      	ands	r3, r2
 80042da:	d003      	beq.n	80042e4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	22f2      	movs	r2, #242	@ 0xf2
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042e4:	1cbb      	adds	r3, r7, #2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	2202      	movs	r2, #2
 80042ea:	4013      	ands	r3, r2
 80042ec:	d003      	beq.n	80042f6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	22f4      	movs	r2, #244	@ 0xf4
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80042f6:	1cbb      	adds	r3, r7, #2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d103      	bne.n	8004306 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2290      	movs	r2, #144	@ 0x90
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004306:	1cbb      	adds	r3, r7, #2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	2b20      	cmp	r3, #32
 800430c:	d137      	bne.n	800437e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004316:	e032      	b.n	800437e <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004318:	1cbb      	adds	r3, r7, #2
 800431a:	2200      	movs	r2, #0
 800431c:	5e9b      	ldrsh	r3, [r3, r2]
 800431e:	2b00      	cmp	r3, #0
 8004320:	da03      	bge.n	800432a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	22b8      	movs	r2, #184	@ 0xb8
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800432a:	1cbb      	adds	r3, r7, #2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	d003      	beq.n	800433c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	22f2      	movs	r2, #242	@ 0xf2
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800433c:	1cbb      	adds	r3, r7, #2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	d003      	beq.n	800434e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	22f4      	movs	r2, #244	@ 0xf4
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800434e:	1cbb      	adds	r3, r7, #2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	2b10      	cmp	r3, #16
 8004354:	d103      	bne.n	800435e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2290      	movs	r2, #144	@ 0x90
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800435e:	1cbb      	adds	r3, r7, #2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	2b20      	cmp	r3, #32
 8004364:	d103      	bne.n	800436e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2260      	movs	r2, #96	@ 0x60
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800436e:	1cbb      	adds	r3, r7, #2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	2b40      	cmp	r3, #64	@ 0x40
 8004374:	d103      	bne.n	800437e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2240      	movs	r2, #64	@ 0x40
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	46bd      	mov	sp, r7
 8004392:	b004      	add	sp, #16
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	08002bf5 	.word	0x08002bf5
 800439c:	08003045 	.word	0x08003045
 80043a0:	08002ded 	.word	0x08002ded

080043a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	000a      	movs	r2, r1
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80043b6:	1cbb      	adds	r3, r7, #2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d010      	beq.n	80043e2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2242      	movs	r2, #66	@ 0x42
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2241      	movs	r2, #65	@ 0x41
 80043cc:	5c9b      	ldrb	r3, [r3, r2]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	001a      	movs	r2, r3
 80043d2:	2328      	movs	r3, #40	@ 0x28
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b28      	cmp	r3, #40	@ 0x28
 80043d8:	d003      	beq.n	80043e2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22b0      	movs	r2, #176	@ 0xb0
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043e2:	1cbb      	adds	r3, r7, #2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	4013      	ands	r3, r2
 80043ea:	d010      	beq.n	800440e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2244      	movs	r2, #68	@ 0x44
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2241      	movs	r2, #65	@ 0x41
 80043f8:	5c9b      	ldrb	r3, [r3, r2]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	001a      	movs	r2, r3
 80043fe:	2328      	movs	r3, #40	@ 0x28
 8004400:	4013      	ands	r3, r2
 8004402:	2b28      	cmp	r3, #40	@ 0x28
 8004404:	d003      	beq.n	800440e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22b0      	movs	r2, #176	@ 0xb0
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800440e:	1cbb      	adds	r3, r7, #2
 8004410:	2200      	movs	r2, #0
 8004412:	5e9b      	ldrsh	r3, [r3, r2]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da03      	bge.n	8004420 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	22b8      	movs	r2, #184	@ 0xb8
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004420:	1cbb      	adds	r3, r7, #2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	2b10      	cmp	r3, #16
 8004426:	d103      	bne.n	8004430 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2290      	movs	r2, #144	@ 0x90
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004430:	1cbb      	adds	r3, r7, #2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	2b20      	cmp	r3, #32
 8004436:	d103      	bne.n	8004440 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004440:	1cbb      	adds	r3, r7, #2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d103      	bne.n	8004450 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2240      	movs	r2, #64	@ 0x40
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	43d9      	mvns	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	400a      	ands	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b004      	add	sp, #16
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2241      	movs	r2, #65	@ 0x41
 800447a:	5c9b      	ldrb	r3, [r3, r2]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	d138      	bne.n	80044f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800448c:	2302      	movs	r3, #2
 800448e:	e032      	b.n	80044f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2241      	movs	r2, #65	@ 0x41
 800449c:	2124      	movs	r1, #36	@ 0x24
 800449e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2101      	movs	r1, #1
 80044ac:	438a      	bics	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4911      	ldr	r1, [pc, #68]	@ (8004500 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044bc:	400a      	ands	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2241      	movs	r2, #65	@ 0x41
 80044e4:	2120      	movs	r1, #32
 80044e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b002      	add	sp, #8
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	ffffefff 	.word	0xffffefff

08004504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2241      	movs	r2, #65	@ 0x41
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	d139      	bne.n	800458e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2240      	movs	r2, #64	@ 0x40
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004524:	2302      	movs	r3, #2
 8004526:	e033      	b.n	8004590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2240      	movs	r2, #64	@ 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2241      	movs	r2, #65	@ 0x41
 8004534:	2124      	movs	r1, #36	@ 0x24
 8004536:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	438a      	bics	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a11      	ldr	r2, [pc, #68]	@ (8004598 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2241      	movs	r2, #65	@ 0x41
 800457e:	2120      	movs	r1, #32
 8004580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2240      	movs	r2, #64	@ 0x40
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}
 8004598:	fffff0ff 	.word	0xfffff0ff

0800459c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a19      	ldr	r2, [pc, #100]	@ (8004610 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	4b17      	ldr	r3, [pc, #92]	@ (800460c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	2380      	movs	r3, #128	@ 0x80
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d11f      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	0013      	movs	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4912      	ldr	r1, [pc, #72]	@ (8004618 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7fb fd98 	bl	8000104 <__udivsi3>
 80045d4:	0003      	movs	r3, r0
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045da:	e008      	b.n	80045ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e001      	b.n	80045ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e009      	b.n	8004602 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045ee:	4b07      	ldr	r3, [pc, #28]	@ (800460c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	401a      	ands	r2, r3
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d0ed      	beq.n	80045dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b004      	add	sp, #16
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	40007000 	.word	0x40007000
 8004610:	fffff9ff 	.word	0xfffff9ff
 8004614:	20000004 	.word	0x20000004
 8004618:	000f4240 	.word	0x000f4240

0800461c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e2fe      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2201      	movs	r2, #1
 8004634:	4013      	ands	r3, r2
 8004636:	d100      	bne.n	800463a <HAL_RCC_OscConfig+0x1e>
 8004638:	e07c      	b.n	8004734 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4bc3      	ldr	r3, [pc, #780]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2238      	movs	r2, #56	@ 0x38
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4bc0      	ldr	r3, [pc, #768]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2203      	movs	r2, #3
 800464a:	4013      	ands	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b10      	cmp	r3, #16
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x3e>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d002      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4bb9      	ldr	r3, [pc, #740]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	@ 0x80
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	4013      	ands	r3, r2
 800466a:	d062      	beq.n	8004732 <HAL_RCC_OscConfig+0x116>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d15e      	bne.n	8004732 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e2d9      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x78>
 8004684:	4bb0      	ldr	r3, [pc, #704]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4baf      	ldr	r3, [pc, #700]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	0249      	lsls	r1, r1, #9
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e020      	b.n	80046d6 <HAL_RCC_OscConfig+0xba>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	23a0      	movs	r3, #160	@ 0xa0
 800469a:	02db      	lsls	r3, r3, #11
 800469c:	429a      	cmp	r2, r3
 800469e:	d10e      	bne.n	80046be <HAL_RCC_OscConfig+0xa2>
 80046a0:	4ba9      	ldr	r3, [pc, #676]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4ba8      	ldr	r3, [pc, #672]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	02c9      	lsls	r1, r1, #11
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	4ba6      	ldr	r3, [pc, #664]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4ba5      	ldr	r3, [pc, #660]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046b4:	2180      	movs	r1, #128	@ 0x80
 80046b6:	0249      	lsls	r1, r1, #9
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e00b      	b.n	80046d6 <HAL_RCC_OscConfig+0xba>
 80046be:	4ba2      	ldr	r3, [pc, #648]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4ba1      	ldr	r3, [pc, #644]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046c4:	49a1      	ldr	r1, [pc, #644]	@ (800494c <HAL_RCC_OscConfig+0x330>)
 80046c6:	400a      	ands	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046d0:	499f      	ldr	r1, [pc, #636]	@ (8004950 <HAL_RCC_OscConfig+0x334>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d014      	beq.n	8004708 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd f80b 	bl	80016f8 <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fd f806 	bl	80016f8 <HAL_GetTick>
 80046ec:	0002      	movs	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e298      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046fa:	4b93      	ldr	r3, [pc, #588]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	029b      	lsls	r3, r3, #10
 8004702:	4013      	ands	r3, r2
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xcc>
 8004706:	e015      	b.n	8004734 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fc fff6 	bl	80016f8 <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004712:	f7fc fff1 	bl	80016f8 <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	@ 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e283      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	4013      	ands	r3, r2
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0xf6>
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004732:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2202      	movs	r2, #2
 800473a:	4013      	ands	r3, r2
 800473c:	d100      	bne.n	8004740 <HAL_RCC_OscConfig+0x124>
 800473e:	e099      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004740:	4b81      	ldr	r3, [pc, #516]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2238      	movs	r2, #56	@ 0x38
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474a:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2203      	movs	r2, #3
 8004750:	4013      	ands	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b10      	cmp	r3, #16
 8004758:	d102      	bne.n	8004760 <HAL_RCC_OscConfig+0x144>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d002      	beq.n	8004766 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d135      	bne.n	80047d2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004766:	4b78      	ldr	r3, [pc, #480]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4013      	ands	r3, r2
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x162>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e256      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b72      	ldr	r3, [pc, #456]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a74      	ldr	r2, [pc, #464]	@ (8004954 <HAL_RCC_OscConfig+0x338>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	4b6e      	ldr	r3, [pc, #440]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d112      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800479a:	4b6b      	ldr	r3, [pc, #428]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_RCC_OscConfig+0x33c>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	4b67      	ldr	r3, [pc, #412]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	430a      	orrs	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80047ae:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0adb      	lsrs	r3, r3, #11
 80047b4:	2207      	movs	r2, #7
 80047b6:	4013      	ands	r3, r2
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_RCC_OscConfig+0x340>)
 80047ba:	40da      	lsrs	r2, r3
 80047bc:	4b68      	ldr	r3, [pc, #416]	@ (8004960 <HAL_RCC_OscConfig+0x344>)
 80047be:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047c0:	4b68      	ldr	r3, [pc, #416]	@ (8004964 <HAL_RCC_OscConfig+0x348>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fc ff3b 	bl	8001640 <HAL_InitTick>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d051      	beq.n	8004872 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e22c      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d030      	beq.n	800483c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047da:	4b5b      	ldr	r3, [pc, #364]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5e      	ldr	r2, [pc, #376]	@ (8004958 <HAL_RCC_OscConfig+0x33c>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	4b57      	ldr	r3, [pc, #348]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80047ee:	4b56      	ldr	r3, [pc, #344]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b55      	ldr	r3, [pc, #340]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80047f4:	2180      	movs	r1, #128	@ 0x80
 80047f6:	0049      	lsls	r1, r1, #1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc ff7c 	bl	80016f8 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004806:	f7fc ff77 	bl	80016f8 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e209      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004818:	4b4b      	ldr	r3, [pc, #300]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4013      	ands	r3, r2
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004824:	4b48      	ldr	r3, [pc, #288]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	4a4a      	ldr	r2, [pc, #296]	@ (8004954 <HAL_RCC_OscConfig+0x338>)
 800482a:	4013      	ands	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	4b44      	ldr	r3, [pc, #272]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800483c:	4b42      	ldr	r3, [pc, #264]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b41      	ldr	r3, [pc, #260]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004842:	4949      	ldr	r1, [pc, #292]	@ (8004968 <HAL_RCC_OscConfig+0x34c>)
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fc ff56 	bl	80016f8 <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fc ff51 	bl	80016f8 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1e3      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004864:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4013      	ands	r3, r2
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x236>
 8004870:	e000      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004872:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2208      	movs	r2, #8
 800487a:	4013      	ands	r3, r2
 800487c:	d047      	beq.n	800490e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800487e:	4b32      	ldr	r3, [pc, #200]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2238      	movs	r2, #56	@ 0x38
 8004884:	4013      	ands	r3, r2
 8004886:	2b18      	cmp	r3, #24
 8004888:	d10a      	bne.n	80048a0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800488a:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 800488c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488e:	2202      	movs	r2, #2
 8004890:	4013      	ands	r3, r2
 8004892:	d03c      	beq.n	800490e <HAL_RCC_OscConfig+0x2f2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d138      	bne.n	800490e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e1c5      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d019      	beq.n	80048dc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80048aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048ac:	4b26      	ldr	r3, [pc, #152]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80048ae:	2101      	movs	r1, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fc ff20 	bl	80016f8 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048be:	f7fc ff1b 	bl	80016f8 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1ad      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d0f1      	beq.n	80048be <HAL_RCC_OscConfig+0x2a2>
 80048da:	e018      	b.n	800490e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80048dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80048de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	438a      	bics	r2, r1
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fc ff06 	bl	80016f8 <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fc ff01 	bl	80016f8 <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e193      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d1f1      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d100      	bne.n	800491a <HAL_RCC_OscConfig+0x2fe>
 8004918:	e0c6      	b.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	231f      	movs	r3, #31
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2238      	movs	r2, #56	@ 0x38
 8004928:	4013      	ands	r3, r2
 800492a:	2b20      	cmp	r3, #32
 800492c:	d11e      	bne.n	800496c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCC_OscConfig+0x32c>)
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	d100      	bne.n	800493a <HAL_RCC_OscConfig+0x31e>
 8004938:	e0b6      	b.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d000      	beq.n	8004944 <HAL_RCC_OscConfig+0x328>
 8004942:	e0b1      	b.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e171      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
 8004948:	40021000 	.word	0x40021000
 800494c:	fffeffff 	.word	0xfffeffff
 8004950:	fffbffff 	.word	0xfffbffff
 8004954:	ffff80ff 	.word	0xffff80ff
 8004958:	ffffc7ff 	.word	0xffffc7ff
 800495c:	00f42400 	.word	0x00f42400
 8004960:	20000004 	.word	0x20000004
 8004964:	20000008 	.word	0x20000008
 8004968:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800496c:	4bb1      	ldr	r3, [pc, #708]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 800496e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	055b      	lsls	r3, r3, #21
 8004974:	4013      	ands	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_RCC_OscConfig+0x360>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x362>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4bac      	ldr	r3, [pc, #688]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004986:	4bab      	ldr	r3, [pc, #684]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004988:	2180      	movs	r1, #128	@ 0x80
 800498a:	0549      	lsls	r1, r1, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004990:	4ba8      	ldr	r3, [pc, #672]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	055b      	lsls	r3, r3, #21
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800499e:	231f      	movs	r3, #31
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a6:	4ba4      	ldr	r3, [pc, #656]	@ (8004c38 <HAL_RCC_OscConfig+0x61c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4013      	ands	r3, r2
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004c38 <HAL_RCC_OscConfig+0x61c>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4ba0      	ldr	r3, [pc, #640]	@ (8004c38 <HAL_RCC_OscConfig+0x61c>)
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	0049      	lsls	r1, r1, #1
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80049c0:	f7fc fe9a 	bl	80016f8 <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fc fe95 	bl	80016f8 <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e127      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049dc:	4b96      	ldr	r3, [pc, #600]	@ (8004c38 <HAL_RCC_OscConfig+0x61c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	@ 0x80
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4013      	ands	r3, r2
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x3e2>
 80049f0:	4b90      	ldr	r3, [pc, #576]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 80049f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 80049f6:	2101      	movs	r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049fc:	e01c      	b.n	8004a38 <HAL_RCC_OscConfig+0x41c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x404>
 8004a06:	4b8b      	ldr	r3, [pc, #556]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a0a:	4b8a      	ldr	r3, [pc, #552]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a12:	4b88      	ldr	r3, [pc, #544]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a16:	4b87      	ldr	r3, [pc, #540]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a18:	2101      	movs	r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0x41c>
 8004a20:	4b84      	ldr	r3, [pc, #528]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a24:	4b83      	ldr	r3, [pc, #524]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a26:	2101      	movs	r1, #1
 8004a28:	438a      	bics	r2, r1
 8004a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a2c:	4b81      	ldr	r3, [pc, #516]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a30:	4b80      	ldr	r3, [pc, #512]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a32:	2104      	movs	r1, #4
 8004a34:	438a      	bics	r2, r1
 8004a36:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d014      	beq.n	8004a6a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fc fe5a 	bl	80016f8 <HAL_GetTick>
 8004a44:	0003      	movs	r3, r0
 8004a46:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a48:	e009      	b.n	8004a5e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fc fe55 	bl	80016f8 <HAL_GetTick>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	4a79      	ldr	r2, [pc, #484]	@ (8004c3c <HAL_RCC_OscConfig+0x620>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0e6      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b75      	ldr	r3, [pc, #468]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x42e>
 8004a68:	e013      	b.n	8004a92 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fc fe45 	bl	80016f8 <HAL_GetTick>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a72:	e009      	b.n	8004a88 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fc fe40 	bl	80016f8 <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c3c <HAL_RCC_OscConfig+0x620>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0d1      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a88:	4b6a      	ldr	r3, [pc, #424]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a92:	231f      	movs	r3, #31
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b65      	ldr	r3, [pc, #404]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa0:	4b64      	ldr	r3, [pc, #400]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004aa2:	4967      	ldr	r1, [pc, #412]	@ (8004c40 <HAL_RCC_OscConfig+0x624>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d100      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x496>
 8004ab0:	e0bb      	b.n	8004c2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab2:	4b60      	ldr	r3, [pc, #384]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2238      	movs	r2, #56	@ 0x38
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d100      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4a4>
 8004abe:	e07b      	b.n	8004bb8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d156      	bne.n	8004b76 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b59      	ldr	r3, [pc, #356]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ace:	495d      	ldr	r1, [pc, #372]	@ (8004c44 <HAL_RCC_OscConfig+0x628>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fe10 	bl	80016f8 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fc fe0b 	bl	80016f8 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e09d      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af0:	4b50      	ldr	r3, [pc, #320]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	049b      	lsls	r3, r3, #18
 8004af8:	4013      	ands	r3, r2
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004afc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a51      	ldr	r2, [pc, #324]	@ (8004c48 <HAL_RCC_OscConfig+0x62c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	4b42      	ldr	r3, [pc, #264]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b40      	ldr	r3, [pc, #256]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b3f      	ldr	r3, [pc, #252]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	0449      	lsls	r1, r1, #17
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b44:	2180      	movs	r1, #128	@ 0x80
 8004b46:	0549      	lsls	r1, r1, #21
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fdd4 	bl	80016f8 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fc fdcf 	bl	80016f8 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e061      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b68:	4b32      	ldr	r3, [pc, #200]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	049b      	lsls	r3, r3, #18
 8004b70:	4013      	ands	r3, r2
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x53a>
 8004b74:	e059      	b.n	8004c2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b7c:	4931      	ldr	r1, [pc, #196]	@ (8004c44 <HAL_RCC_OscConfig+0x628>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fc fdb9 	bl	80016f8 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fc fdb4 	bl	80016f8 <HAL_GetTick>
 8004b90:	0002      	movs	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e046      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9e:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	049b      	lsls	r3, r3, #18
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004bb0:	4926      	ldr	r1, [pc, #152]	@ (8004c4c <HAL_RCC_OscConfig+0x630>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e038      	b.n	8004c2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e033      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	401a      	ands	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d126      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2270      	movs	r2, #112	@ 0x70
 8004bdc:	401a      	ands	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d11f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	23fe      	movs	r3, #254	@ 0xfe
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	401a      	ands	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d116      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	23f8      	movs	r3, #248	@ 0xf8
 8004bfc:	039b      	lsls	r3, r3, #14
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d10e      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	23e0      	movs	r3, #224	@ 0xe0
 8004c0c:	051b      	lsls	r3, r3, #20
 8004c0e:	401a      	ands	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d106      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	0f5b      	lsrs	r3, r3, #29
 8004c1c:	075a      	lsls	r2, r3, #29
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b008      	add	sp, #32
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	00001388 	.word	0x00001388
 8004c40:	efffffff 	.word	0xefffffff
 8004c44:	feffffff 	.word	0xfeffffff
 8004c48:	11c1808c 	.word	0x11c1808c
 8004c4c:	eefefffc 	.word	0xeefefffc

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0e9      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b76      	ldr	r3, [pc, #472]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2207      	movs	r2, #7
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d91e      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b73      	ldr	r3, [pc, #460]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2207      	movs	r2, #7
 8004c78:	4393      	bics	r3, r2
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	4b70      	ldr	r3, [pc, #448]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c84:	f7fc fd38 	bl	80016f8 <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fc fd33 	bl	80016f8 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a6a      	ldr	r2, [pc, #424]	@ (8004e44 <HAL_RCC_ClockConfig+0x1f4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0ca      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ca2:	4b67      	ldr	r3, [pc, #412]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	4013      	ands	r3, r2
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d015      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d006      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cc4:	4b60      	ldr	r3, [pc, #384]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004cca:	21e0      	movs	r1, #224	@ 0xe0
 8004ccc:	01c9      	lsls	r1, r1, #7
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_RCC_ClockConfig+0x1fc>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d057      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf8:	4b53      	ldr	r3, [pc, #332]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	4013      	ands	r3, r2
 8004d02:	d12b      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e097      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d10:	4b4d      	ldr	r3, [pc, #308]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	049b      	lsls	r3, r3, #18
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d11f      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e08b      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d28:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2380      	movs	r3, #128	@ 0x80
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4013      	ands	r3, r2
 8004d32:	d113      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e07f      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d40:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d108      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e074      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e06d      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2207      	movs	r2, #7
 8004d62:	4393      	bics	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d70:	f7fc fcc2 	bl	80016f8 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d78:	e009      	b.n	8004d8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7a:	f7fc fcbd 	bl	80016f8 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	4a2f      	ldr	r2, [pc, #188]	@ (8004e44 <HAL_RCC_ClockConfig+0x1f4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e054      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2238      	movs	r2, #56	@ 0x38
 8004d94:	401a      	ands	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1ec      	bne.n	8004d7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da0:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2207      	movs	r2, #7
 8004da6:	4013      	ands	r3, r2
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d21e      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2207      	movs	r2, #7
 8004db4:	4393      	bics	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	4b21      	ldr	r3, [pc, #132]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dc0:	f7fc fc9a 	bl	80016f8 <HAL_GetTick>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dc8:	e009      	b.n	8004dde <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dca:	f7fc fc95 	bl	80016f8 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e44 <HAL_RCC_ClockConfig+0x1f4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e02c      	b.n	8004e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dde:	4b18      	ldr	r3, [pc, #96]	@ (8004e40 <HAL_RCC_ClockConfig+0x1f0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2207      	movs	r2, #7
 8004de4:	4013      	ands	r3, r2
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2204      	movs	r2, #4
 8004df2:	4013      	ands	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004df6:	4b14      	ldr	r3, [pc, #80]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	@ (8004e50 <HAL_RCC_ClockConfig+0x200>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	0019      	movs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e0a:	f000 f829 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004e0e:	0001      	movs	r1, r0
 8004e10:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <HAL_RCC_ClockConfig+0x1f8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	220f      	movs	r2, #15
 8004e18:	401a      	ands	r2, r3
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x204>)
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	58d3      	ldr	r3, [r2, r3]
 8004e20:	221f      	movs	r2, #31
 8004e22:	4013      	ands	r3, r2
 8004e24:	000a      	movs	r2, r1
 8004e26:	40da      	lsrs	r2, r3
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_RCC_ClockConfig+0x208>)
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <HAL_RCC_ClockConfig+0x20c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7fc fc05 	bl	8001640 <HAL_InitTick>
 8004e36:	0003      	movs	r3, r0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40022000 	.word	0x40022000
 8004e44:	00001388 	.word	0x00001388
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	fffff0ff 	.word	0xfffff0ff
 8004e50:	ffff8fff 	.word	0xffff8fff
 8004e54:	0800667c 	.word	0x0800667c
 8004e58:	20000004 	.word	0x20000004
 8004e5c:	20000008 	.word	0x20000008

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e66:	4b3c      	ldr	r3, [pc, #240]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2238      	movs	r2, #56	@ 0x38
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d10f      	bne.n	8004e90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e70:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0adb      	lsrs	r3, r3, #11
 8004e76:	2207      	movs	r2, #7
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	0013      	movs	r3, r2
 8004e80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	4835      	ldr	r0, [pc, #212]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e86:	f7fb f93d 	bl	8000104 <__udivsi3>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	e05d      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e90:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2238      	movs	r2, #56	@ 0x38
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d102      	bne.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e9c:	4b30      	ldr	r3, [pc, #192]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	e054      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2238      	movs	r2, #56	@ 0x38
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d138      	bne.n	8004f20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004eae:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eb8:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	2207      	movs	r2, #7
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d10d      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4824      	ldr	r0, [pc, #144]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ed0:	f7fb f918 	bl	8000104 <__udivsi3>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	227f      	movs	r2, #127	@ 0x7f
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	434b      	muls	r3, r1
 8004ee4:	617b      	str	r3, [r7, #20]
        break;
 8004ee6:	e00d      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	481c      	ldr	r0, [pc, #112]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004eec:	f7fb f90a 	bl	8000104 <__udivsi3>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	4b18      	ldr	r3, [pc, #96]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	227f      	movs	r2, #127	@ 0x7f
 8004efc:	4013      	ands	r3, r2
 8004efe:	434b      	muls	r3, r1
 8004f00:	617b      	str	r3, [r7, #20]
        break;
 8004f02:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004f04:	4b14      	ldr	r3, [pc, #80]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0f5b      	lsrs	r3, r3, #29
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	3301      	adds	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	6978      	ldr	r0, [r7, #20]
 8004f16:	f7fb f8f5 	bl	8000104 <__udivsi3>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	e015      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f20:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2238      	movs	r2, #56	@ 0x38
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d103      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f34:	4b08      	ldr	r3, [pc, #32]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2238      	movs	r2, #56	@ 0x38
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b18      	cmp	r3, #24
 8004f3e:	d103      	bne.n	8004f48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f40:	23fa      	movs	r3, #250	@ 0xfa
 8004f42:	01db      	lsls	r3, r3, #7
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e001      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f4c:	693b      	ldr	r3, [r7, #16]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b006      	add	sp, #24
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	007a1200 	.word	0x007a1200

08004f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f6c:	2313      	movs	r3, #19
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f74:	2312      	movs	r3, #18
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	@ 0x80
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	4013      	ands	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004f88:	e0a3      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8a:	2011      	movs	r0, #17
 8004f8c:	183b      	adds	r3, r7, r0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f92:	4bc3      	ldr	r3, [pc, #780]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	055b      	lsls	r3, r3, #21
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d110      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4bc0      	ldr	r3, [pc, #768]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa2:	4bbf      	ldr	r3, [pc, #764]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fa4:	2180      	movs	r1, #128	@ 0x80
 8004fa6:	0549      	lsls	r1, r1, #21
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fac:	4bbc      	ldr	r3, [pc, #752]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	055b      	lsls	r3, r3, #21
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc0:	4bb8      	ldr	r3, [pc, #736]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4bb7      	ldr	r3, [pc, #732]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fc6:	2180      	movs	r1, #128	@ 0x80
 8004fc8:	0049      	lsls	r1, r1, #1
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fce:	f7fc fb93 	bl	80016f8 <HAL_GetTick>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fc fb8e 	bl	80016f8 <HAL_GetTick>
 8004fdc:	0002      	movs	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d904      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004fe6:	2313      	movs	r3, #19
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2203      	movs	r2, #3
 8004fec:	701a      	strb	r2, [r3, #0]
        break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff0:	4bac      	ldr	r3, [pc, #688]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d0ed      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004ffc:	2313      	movs	r3, #19
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d154      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005006:	4ba6      	ldr	r3, [pc, #664]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800500a:	23c0      	movs	r3, #192	@ 0xc0
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4013      	ands	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	429a      	cmp	r2, r3
 8005020:	d014      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005022:	4b9f      	ldr	r3, [pc, #636]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005026:	4aa0      	ldr	r2, [pc, #640]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005028:	4013      	ands	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b9c      	ldr	r3, [pc, #624]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800502e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005030:	4b9b      	ldr	r3, [pc, #620]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	0249      	lsls	r1, r1, #9
 8005036:	430a      	orrs	r2, r1
 8005038:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503a:	4b99      	ldr	r3, [pc, #612]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800503c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800503e:	4b98      	ldr	r3, [pc, #608]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005040:	499a      	ldr	r1, [pc, #616]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005042:	400a      	ands	r2, r1
 8005044:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005046:	4b96      	ldr	r3, [pc, #600]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d016      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fc fb50 	bl	80016f8 <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505c:	e00c      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fc fb4b 	bl	80016f8 <HAL_GetTick>
 8005062:	0002      	movs	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	4a91      	ldr	r2, [pc, #580]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d904      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800506e:	2313      	movs	r3, #19
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2203      	movs	r2, #3
 8005074:	701a      	strb	r2, [r3, #0]
            break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005078:	4b89      	ldr	r3, [pc, #548]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	2202      	movs	r2, #2
 800507e:	4013      	ands	r3, r2
 8005080:	d0ed      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005082:	2313      	movs	r3, #19
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508c:	4b84      	ldr	r3, [pc, #528]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	4a85      	ldr	r2, [pc, #532]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005092:	4013      	ands	r3, r2
 8005094:	0019      	movs	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800509a:	4b81      	ldr	r3, [pc, #516]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800509c:	430a      	orrs	r2, r1
 800509e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050a0:	e00c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a2:	2312      	movs	r3, #18
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	2213      	movs	r2, #19
 80050a8:	18ba      	adds	r2, r7, r2
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	2312      	movs	r3, #18
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2213      	movs	r2, #19
 80050b6:	18ba      	adds	r2, r7, r2
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050bc:	2311      	movs	r3, #17
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b76      	ldr	r3, [pc, #472]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ca:	4b75      	ldr	r3, [pc, #468]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050cc:	4979      	ldr	r1, [pc, #484]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80050ce:	400a      	ands	r2, r1
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2201      	movs	r2, #1
 80050d8:	4013      	ands	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050dc:	4b70      	ldr	r3, [pc, #448]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e0:	2203      	movs	r2, #3
 80050e2:	4393      	bics	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2202      	movs	r2, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fa:	4b69      	ldr	r3, [pc, #420]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	220c      	movs	r2, #12
 8005100:	4393      	bics	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b65      	ldr	r3, [pc, #404]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800510a:	430a      	orrs	r2, r1
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2210      	movs	r2, #16
 8005114:	4013      	ands	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005118:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	4a66      	ldr	r2, [pc, #408]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	4b5e      	ldr	r3, [pc, #376]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005128:	430a      	orrs	r2, r1
 800512a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4013      	ands	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005138:	4b59      	ldr	r3, [pc, #356]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800513a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513c:	4a5f      	ldr	r2, [pc, #380]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800513e:	4013      	ands	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	4b56      	ldr	r3, [pc, #344]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005148:	430a      	orrs	r2, r1
 800514a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4013      	ands	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005158:	4b51      	ldr	r3, [pc, #324]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800515a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515c:	4a58      	ldr	r2, [pc, #352]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800515e:	4013      	ands	r3, r2
 8005160:	0019      	movs	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	4b4e      	ldr	r3, [pc, #312]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005168:	430a      	orrs	r2, r1
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2220      	movs	r2, #32
 8005172:	4013      	ands	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005176:	4b4a      	ldr	r3, [pc, #296]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	4a52      	ldr	r2, [pc, #328]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800517c:	4013      	ands	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	4b46      	ldr	r3, [pc, #280]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005186:	430a      	orrs	r2, r1
 8005188:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	4013      	ands	r3, r2
 8005194:	d015      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005196:	4b42      	ldr	r3, [pc, #264]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	0899      	lsrs	r1, r3, #2
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	4b3f      	ldr	r3, [pc, #252]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051a4:	430a      	orrs	r2, r1
 80051a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1a      	ldr	r2, [r3, #32]
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	05db      	lsls	r3, r3, #23
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d106      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051b4:	4b3a      	ldr	r3, [pc, #232]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051ba:	2180      	movs	r1, #128	@ 0x80
 80051bc:	0249      	lsls	r1, r1, #9
 80051be:	430a      	orrs	r2, r1
 80051c0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	4013      	ands	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051ce:	4b34      	ldr	r3, [pc, #208]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	4393      	bics	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051dc:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051de:	430a      	orrs	r2, r1
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	039b      	lsls	r3, r3, #14
 80051ea:	4013      	ands	r3, r2
 80051ec:	d016      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051ee:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f2:	4a35      	ldr	r2, [pc, #212]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	0019      	movs	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051fc:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80051fe:	430a      	orrs	r2, r1
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	03db      	lsls	r3, r3, #15
 800520a:	429a      	cmp	r2, r3
 800520c:	d106      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800520e:	4b24      	ldr	r3, [pc, #144]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	4b23      	ldr	r3, [pc, #140]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005214:	2180      	movs	r1, #128	@ 0x80
 8005216:	0449      	lsls	r1, r1, #17
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	03db      	lsls	r3, r3, #15
 8005224:	4013      	ands	r3, r2
 8005226:	d016      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005228:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	4a27      	ldr	r2, [pc, #156]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800522e:	4013      	ands	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005238:	430a      	orrs	r2, r1
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	045b      	lsls	r3, r3, #17
 8005244:	429a      	cmp	r2, r3
 8005246:	d106      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	4b14      	ldr	r3, [pc, #80]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800524e:	2180      	movs	r1, #128	@ 0x80
 8005250:	0449      	lsls	r1, r1, #17
 8005252:	430a      	orrs	r2, r1
 8005254:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4013      	ands	r3, r2
 8005260:	d016      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005262:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005272:	430a      	orrs	r2, r1
 8005274:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	2380      	movs	r3, #128	@ 0x80
 800527c:	01db      	lsls	r3, r3, #7
 800527e:	429a      	cmp	r2, r3
 8005280:	d106      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005288:	2180      	movs	r1, #128	@ 0x80
 800528a:	0249      	lsls	r1, r1, #9
 800528c:	430a      	orrs	r2, r1
 800528e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005290:	2312      	movs	r3, #18
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	781b      	ldrb	r3, [r3, #0]
}
 8005296:	0018      	movs	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	b006      	add	sp, #24
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40007000 	.word	0x40007000
 80052a8:	fffffcff 	.word	0xfffffcff
 80052ac:	fffeffff 	.word	0xfffeffff
 80052b0:	00001388 	.word	0x00001388
 80052b4:	efffffff 	.word	0xefffffff
 80052b8:	fffff3ff 	.word	0xfffff3ff
 80052bc:	fff3ffff 	.word	0xfff3ffff
 80052c0:	ffcfffff 	.word	0xffcfffff
 80052c4:	ffffcfff 	.word	0xffffcfff
 80052c8:	ffbfffff 	.word	0xffbfffff
 80052cc:	feffffff 	.word	0xfeffffff
 80052d0:	ffff3fff 	.word	0xffff3fff

080052d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e04a      	b.n	800537c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	223d      	movs	r2, #61	@ 0x3d
 80052ea:	5c9b      	ldrb	r3, [r3, r2]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d107      	bne.n	8005302 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	223c      	movs	r2, #60	@ 0x3c
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f7fc f881 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223d      	movs	r2, #61	@ 0x3d
 8005306:	2102      	movs	r1, #2
 8005308:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	0019      	movs	r1, r3
 8005314:	0010      	movs	r0, r2
 8005316:	f000 fcd9 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2248      	movs	r2, #72	@ 0x48
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223e      	movs	r2, #62	@ 0x3e
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223f      	movs	r2, #63	@ 0x3f
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2241      	movs	r2, #65	@ 0x41
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2242      	movs	r2, #66	@ 0x42
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2243      	movs	r2, #67	@ 0x43
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2244      	movs	r2, #68	@ 0x44
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2245      	movs	r2, #69	@ 0x45
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2246      	movs	r2, #70	@ 0x46
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2247      	movs	r2, #71	@ 0x47
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	223d      	movs	r2, #61	@ 0x3d
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223d      	movs	r2, #61	@ 0x3d
 8005390:	5c9b      	ldrb	r3, [r3, r2]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e042      	b.n	8005422 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	223d      	movs	r2, #61	@ 0x3d
 80053a0:	2102      	movs	r1, #2
 80053a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	430a      	orrs	r2, r1
 80053b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <HAL_TIM_Base_Start_IT+0xa8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <HAL_TIM_Base_Start_IT+0x5a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	05db      	lsls	r3, r3, #23
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d009      	beq.n	80053de <HAL_TIM_Base_Start_IT+0x5a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIM_Base_Start_IT+0xac>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIM_Base_Start_IT+0x5a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <HAL_TIM_Base_Start_IT+0xb0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d116      	bne.n	800540c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <HAL_TIM_Base_Start_IT+0xb4>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	d016      	beq.n	800541e <HAL_TIM_Base_Start_IT+0x9a>
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	025b      	lsls	r3, r3, #9
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d011      	beq.n	800541e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	e008      	b.n	800541e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2101      	movs	r1, #1
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e000      	b.n	8005420 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40000400 	.word	0x40000400
 8005434:	40014000 	.word	0x40014000
 8005438:	00010007 	.word	0x00010007

0800543c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e04a      	b.n	80054e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	223d      	movs	r2, #61	@ 0x3d
 8005452:	5c9b      	ldrb	r3, [r3, r2]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	223c      	movs	r2, #60	@ 0x3c
 800545e:	2100      	movs	r1, #0
 8005460:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f841 	bl	80054ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	223d      	movs	r2, #61	@ 0x3d
 800546e:	2102      	movs	r1, #2
 8005470:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	0019      	movs	r1, r3
 800547c:	0010      	movs	r0, r2
 800547e:	f000 fc25 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2248      	movs	r2, #72	@ 0x48
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	223e      	movs	r2, #62	@ 0x3e
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223f      	movs	r2, #63	@ 0x3f
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2240      	movs	r2, #64	@ 0x40
 800549e:	2101      	movs	r1, #1
 80054a0:	5499      	strb	r1, [r3, r2]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2241      	movs	r2, #65	@ 0x41
 80054a6:	2101      	movs	r1, #1
 80054a8:	5499      	strb	r1, [r3, r2]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2242      	movs	r2, #66	@ 0x42
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2243      	movs	r2, #67	@ 0x43
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2244      	movs	r2, #68	@ 0x44
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2245      	movs	r2, #69	@ 0x45
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2246      	movs	r2, #70	@ 0x46
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2247      	movs	r2, #71	@ 0x47
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	223d      	movs	r2, #61	@ 0x3d
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	0018      	movs	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <HAL_TIM_PWM_Start+0x22>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	223e      	movs	r2, #62	@ 0x3e
 8005510:	5c9b      	ldrb	r3, [r3, r2]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	4193      	sbcs	r3, r2
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e037      	b.n	800558e <HAL_TIM_PWM_Start+0x92>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d108      	bne.n	8005536 <HAL_TIM_PWM_Start+0x3a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	223f      	movs	r2, #63	@ 0x3f
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	4193      	sbcs	r3, r2
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e02b      	b.n	800558e <HAL_TIM_PWM_Start+0x92>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d108      	bne.n	800554e <HAL_TIM_PWM_Start+0x52>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2240      	movs	r2, #64	@ 0x40
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	4193      	sbcs	r3, r2
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e01f      	b.n	800558e <HAL_TIM_PWM_Start+0x92>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d108      	bne.n	8005566 <HAL_TIM_PWM_Start+0x6a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2241      	movs	r2, #65	@ 0x41
 8005558:	5c9b      	ldrb	r3, [r3, r2]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	1e5a      	subs	r2, r3, #1
 8005560:	4193      	sbcs	r3, r2
 8005562:	b2db      	uxtb	r3, r3
 8005564:	e013      	b.n	800558e <HAL_TIM_PWM_Start+0x92>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b10      	cmp	r3, #16
 800556a:	d108      	bne.n	800557e <HAL_TIM_PWM_Start+0x82>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2242      	movs	r2, #66	@ 0x42
 8005570:	5c9b      	ldrb	r3, [r3, r2]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	1e5a      	subs	r2, r3, #1
 8005578:	4193      	sbcs	r3, r2
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e007      	b.n	800558e <HAL_TIM_PWM_Start+0x92>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2243      	movs	r2, #67	@ 0x43
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	4193      	sbcs	r3, r2
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e08b      	b.n	80056ae <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xaa>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	223e      	movs	r2, #62	@ 0x3e
 80055a0:	2102      	movs	r1, #2
 80055a2:	5499      	strb	r1, [r3, r2]
 80055a4:	e023      	b.n	80055ee <HAL_TIM_PWM_Start+0xf2>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xba>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223f      	movs	r2, #63	@ 0x3f
 80055b0:	2102      	movs	r1, #2
 80055b2:	5499      	strb	r1, [r3, r2]
 80055b4:	e01b      	b.n	80055ee <HAL_TIM_PWM_Start+0xf2>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xca>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2240      	movs	r2, #64	@ 0x40
 80055c0:	2102      	movs	r1, #2
 80055c2:	5499      	strb	r1, [r3, r2]
 80055c4:	e013      	b.n	80055ee <HAL_TIM_PWM_Start+0xf2>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Start+0xda>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2241      	movs	r2, #65	@ 0x41
 80055d0:	2102      	movs	r1, #2
 80055d2:	5499      	strb	r1, [r3, r2]
 80055d4:	e00b      	b.n	80055ee <HAL_TIM_PWM_Start+0xf2>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Start+0xea>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2242      	movs	r2, #66	@ 0x42
 80055e0:	2102      	movs	r1, #2
 80055e2:	5499      	strb	r1, [r3, r2]
 80055e4:	e003      	b.n	80055ee <HAL_TIM_PWM_Start+0xf2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2243      	movs	r2, #67	@ 0x43
 80055ea:	2102      	movs	r1, #2
 80055ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 ff56 	bl	80064a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2d      	ldr	r2, [pc, #180]	@ (80056b8 <HAL_TIM_PWM_Start+0x1bc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00e      	beq.n	8005624 <HAL_TIM_PWM_Start+0x128>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2c      	ldr	r2, [pc, #176]	@ (80056bc <HAL_TIM_PWM_Start+0x1c0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_TIM_PWM_Start+0x128>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2a      	ldr	r2, [pc, #168]	@ (80056c0 <HAL_TIM_PWM_Start+0x1c4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_PWM_Start+0x128>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a29      	ldr	r2, [pc, #164]	@ (80056c4 <HAL_TIM_PWM_Start+0x1c8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d101      	bne.n	8005628 <HAL_TIM_PWM_Start+0x12c>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_TIM_PWM_Start+0x12e>
 8005628:	2300      	movs	r3, #0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2180      	movs	r1, #128	@ 0x80
 800563a:	0209      	lsls	r1, r1, #8
 800563c:	430a      	orrs	r2, r1
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <HAL_TIM_PWM_Start+0x1bc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <HAL_TIM_PWM_Start+0x16e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	2380      	movs	r3, #128	@ 0x80
 8005650:	05db      	lsls	r3, r3, #23
 8005652:	429a      	cmp	r2, r3
 8005654:	d009      	beq.n	800566a <HAL_TIM_PWM_Start+0x16e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_TIM_PWM_Start+0x1cc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_TIM_PWM_Start+0x16e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <HAL_TIM_PWM_Start+0x1c0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d116      	bne.n	8005698 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <HAL_TIM_PWM_Start+0x1d0>)
 8005672:	4013      	ands	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d016      	beq.n	80056aa <HAL_TIM_PWM_Start+0x1ae>
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	2380      	movs	r3, #128	@ 0x80
 8005680:	025b      	lsls	r3, r3, #9
 8005682:	429a      	cmp	r2, r3
 8005684:	d011      	beq.n	80056aa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2101      	movs	r1, #1
 8005692:	430a      	orrs	r2, r1
 8005694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	e008      	b.n	80056aa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2101      	movs	r1, #1
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e000      	b.n	80056ac <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056aa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	0018      	movs	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b004      	add	sp, #16
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	40000400 	.word	0x40000400
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2202      	movs	r2, #2
 80056ec:	4013      	ands	r3, r2
 80056ee:	d021      	beq.n	8005734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2202      	movs	r2, #2
 80056f4:	4013      	ands	r3, r2
 80056f6:	d01d      	beq.n	8005734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2203      	movs	r2, #3
 80056fe:	4252      	negs	r2, r2
 8005700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2203      	movs	r2, #3
 8005710:	4013      	ands	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	0018      	movs	r0, r3
 8005718:	f000 fac0 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 800571c:	e007      	b.n	800572e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fab3 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 fabf 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2204      	movs	r2, #4
 8005738:	4013      	ands	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2204      	movs	r2, #4
 8005740:	4013      	ands	r3, r2
 8005742:	d01e      	beq.n	8005782 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2205      	movs	r2, #5
 800574a:	4252      	negs	r2, r2
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	23c0      	movs	r3, #192	@ 0xc0
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4013      	ands	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 fa99 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 800576a:	e007      	b.n	800577c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 fa8c 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f000 fa98 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2208      	movs	r2, #8
 8005786:	4013      	ands	r3, r2
 8005788:	d021      	beq.n	80057ce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2208      	movs	r2, #8
 800578e:	4013      	ands	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2209      	movs	r2, #9
 8005798:	4252      	negs	r2, r2
 800579a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2204      	movs	r2, #4
 80057a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2203      	movs	r2, #3
 80057aa:	4013      	ands	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 fa73 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 80057b6:	e007      	b.n	80057c8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fa66 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 fa72 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2210      	movs	r2, #16
 80057d2:	4013      	ands	r3, r2
 80057d4:	d022      	beq.n	800581c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2210      	movs	r2, #16
 80057da:	4013      	ands	r3, r2
 80057dc:	d01e      	beq.n	800581c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2211      	movs	r2, #17
 80057e4:	4252      	negs	r2, r2
 80057e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2208      	movs	r2, #8
 80057ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	23c0      	movs	r3, #192	@ 0xc0
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4013      	ands	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 fa4c 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 8005804:	e007      	b.n	8005816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fa3f 	bl	8005c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fa4b 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2201      	movs	r2, #1
 8005820:	4013      	ands	r3, r2
 8005822:	d00c      	beq.n	800583e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	4013      	ands	r3, r2
 800582a:	d008      	beq.n	800583e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2202      	movs	r2, #2
 8005832:	4252      	negs	r2, r2
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0018      	movs	r0, r3
 800583a:	f7fb fccd 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2280      	movs	r2, #128	@ 0x80
 8005842:	4013      	ands	r3, r2
 8005844:	d104      	bne.n	8005850 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	2380      	movs	r3, #128	@ 0x80
 800584a:	019b      	lsls	r3, r3, #6
 800584c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800584e:	d00b      	beq.n	8005868 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	4013      	ands	r3, r2
 8005856:	d007      	beq.n	8005868 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1e      	ldr	r2, [pc, #120]	@ (80058d8 <HAL_TIM_IRQHandler+0x208>)
 800585e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0018      	movs	r0, r3
 8005864:	f000 feba 	bl	80065dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4013      	ands	r3, r2
 8005870:	d00b      	beq.n	800588a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2280      	movs	r2, #128	@ 0x80
 8005876:	4013      	ands	r3, r2
 8005878:	d007      	beq.n	800588a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a17      	ldr	r2, [pc, #92]	@ (80058dc <HAL_TIM_IRQHandler+0x20c>)
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 feb1 	bl	80065ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2240      	movs	r2, #64	@ 0x40
 800588e:	4013      	ands	r3, r2
 8005890:	d00c      	beq.n	80058ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2240      	movs	r2, #64	@ 0x40
 8005896:	4013      	ands	r3, r2
 8005898:	d008      	beq.n	80058ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2241      	movs	r2, #65	@ 0x41
 80058a0:	4252      	negs	r2, r2
 80058a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fa08 	bl	8005cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2220      	movs	r2, #32
 80058b0:	4013      	ands	r3, r2
 80058b2:	d00c      	beq.n	80058ce <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	4013      	ands	r3, r2
 80058ba:	d008      	beq.n	80058ce <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2221      	movs	r2, #33	@ 0x21
 80058c2:	4252      	negs	r2, r2
 80058c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f000 fe7f 	bl	80065cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b004      	add	sp, #16
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	ffffdf7f 	.word	0xffffdf7f
 80058dc:	fffffeff 	.word	0xfffffeff

080058e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2317      	movs	r3, #23
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	223c      	movs	r2, #60	@ 0x3c
 80058f8:	5c9b      	ldrb	r3, [r3, r2]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x22>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0e5      	b.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	223c      	movs	r2, #60	@ 0x3c
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b14      	cmp	r3, #20
 800590e:	d900      	bls.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005910:	e0d1      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	009a      	lsls	r2, r3, #2
 8005916:	4b70      	ldr	r3, [pc, #448]	@ (8005ad8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0011      	movs	r1, r2
 8005926:	0018      	movs	r0, r3
 8005928:	f000 fa5e 	bl	8005de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2108      	movs	r1, #8
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2104      	movs	r1, #4
 8005948:	438a      	bics	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e0af      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f000 fac7 	bl	8005efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2180      	movs	r1, #128	@ 0x80
 800597a:	0109      	lsls	r1, r1, #4
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4954      	ldr	r1, [pc, #336]	@ (8005adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800598c:	400a      	ands	r2, r1
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
      break;
 80059a4:	e08c      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	0011      	movs	r1, r2
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fb28 	bl	8006004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2108      	movs	r1, #8
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2104      	movs	r1, #4
 80059d0:	438a      	bics	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69d9      	ldr	r1, [r3, #28]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
      break;
 80059e6:	e06b      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 fb8f 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2180      	movs	r1, #128	@ 0x80
 8005a02:	0109      	lsls	r1, r1, #4
 8005a04:	430a      	orrs	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4932      	ldr	r1, [pc, #200]	@ (8005adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69d9      	ldr	r1, [r3, #28]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	61da      	str	r2, [r3, #28]
      break;
 8005a2c:	e048      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	0011      	movs	r1, r2
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 fbd6 	bl	80061e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2108      	movs	r1, #8
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2104      	movs	r1, #4
 8005a58:	438a      	bics	r2, r1
 8005a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a6e:	e027      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	0011      	movs	r1, r2
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f000 fc15 	bl	80062a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2180      	movs	r1, #128	@ 0x80
 8005a8a:	0109      	lsls	r1, r1, #4
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4910      	ldr	r1, [pc, #64]	@ (8005adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ab4:	e004      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005ab6:	2317      	movs	r3, #23
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
      break;
 8005abe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	223c      	movs	r2, #60	@ 0x3c
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	5499      	strb	r1, [r3, r2]

  return status;
 8005ac8:	2317      	movs	r3, #23
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b006      	add	sp, #24
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	080066bc 	.word	0x080066bc
 8005adc:	fffffbff 	.word	0xfffffbff

08005ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	230f      	movs	r3, #15
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	223c      	movs	r2, #60	@ 0x3c
 8005af6:	5c9b      	ldrb	r3, [r3, r2]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_ConfigClockSource+0x20>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0bc      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x19a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	223c      	movs	r2, #60	@ 0x3c
 8005b04:	2101      	movs	r1, #1
 8005b06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	223d      	movs	r2, #61	@ 0x3d
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a5a      	ldr	r2, [pc, #360]	@ (8005c84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a59      	ldr	r2, [pc, #356]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2280      	movs	r2, #128	@ 0x80
 8005b36:	0192      	lsls	r2, r2, #6
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xde>
 8005b3c:	2280      	movs	r2, #128	@ 0x80
 8005b3e:	0192      	lsls	r2, r2, #6
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d900      	bls.n	8005b46 <HAL_TIM_ConfigClockSource+0x66>
 8005b44:	e088      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	0152      	lsls	r2, r2, #5
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d100      	bne.n	8005b50 <HAL_TIM_ConfigClockSource+0x70>
 8005b4e:	e088      	b.n	8005c62 <HAL_TIM_ConfigClockSource+0x182>
 8005b50:	2280      	movs	r2, #128	@ 0x80
 8005b52:	0152      	lsls	r2, r2, #5
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d900      	bls.n	8005b5a <HAL_TIM_ConfigClockSource+0x7a>
 8005b58:	e07e      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b5a:	2b70      	cmp	r3, #112	@ 0x70
 8005b5c:	d018      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0xb0>
 8005b5e:	d900      	bls.n	8005b62 <HAL_TIM_ConfigClockSource+0x82>
 8005b60:	e07a      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b62:	2b60      	cmp	r3, #96	@ 0x60
 8005b64:	d04f      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x126>
 8005b66:	d900      	bls.n	8005b6a <HAL_TIM_ConfigClockSource+0x8a>
 8005b68:	e076      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b6a:	2b50      	cmp	r3, #80	@ 0x50
 8005b6c:	d03b      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x106>
 8005b6e:	d900      	bls.n	8005b72 <HAL_TIM_ConfigClockSource+0x92>
 8005b70:	e072      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b72:	2b40      	cmp	r3, #64	@ 0x40
 8005b74:	d057      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x146>
 8005b76:	d900      	bls.n	8005b7a <HAL_TIM_ConfigClockSource+0x9a>
 8005b78:	e06e      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b7a:	2b30      	cmp	r3, #48	@ 0x30
 8005b7c:	d063      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x166>
 8005b7e:	d86b      	bhi.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d060      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x166>
 8005b84:	d868      	bhi.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d05d      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x166>
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d05b      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x166>
 8005b8e:	e063      	b.n	8005c58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	f000 fc62 	bl	8006468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2277      	movs	r2, #119	@ 0x77
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e052      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	f000 fc4b 	bl	8006468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2180      	movs	r1, #128	@ 0x80
 8005bde:	01c9      	lsls	r1, r1, #7
 8005be0:	430a      	orrs	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]
      break;
 8005be4:	e03e      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	f000 fbbc 	bl	8006370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2150      	movs	r1, #80	@ 0x50
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 fc16 	bl	8006430 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e02e      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c12:	001a      	movs	r2, r3
 8005c14:	f000 fbda 	bl	80063cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2160      	movs	r1, #96	@ 0x60
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 fc06 	bl	8006430 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e01e      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c32:	001a      	movs	r2, r3
 8005c34:	f000 fb9c 	bl	8006370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2140      	movs	r1, #64	@ 0x40
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 fbf6 	bl	8006430 <TIM_ITRx_SetConfig>
      break;
 8005c44:	e00e      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	0019      	movs	r1, r3
 8005c50:	0010      	movs	r0, r2
 8005c52:	f000 fbed 	bl	8006430 <TIM_ITRx_SetConfig>
      break;
 8005c56:	e005      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c58:	230f      	movs	r3, #15
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	701a      	strb	r2, [r3, #0]
      break;
 8005c60:	e000      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c62:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	223d      	movs	r2, #61	@ 0x3d
 8005c68:	2101      	movs	r1, #1
 8005c6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	223c      	movs	r2, #60	@ 0x3c
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

  return status;
 8005c74:	230f      	movs	r3, #15
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	781b      	ldrb	r3, [r3, #0]
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b004      	add	sp, #16
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	ffceff88 	.word	0xffceff88
 8005c88:	ffff00ff 	.word	0xffff00ff

08005c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b002      	add	sp, #8
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc4:	46c0      	nop			@ (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3b      	ldr	r2, [pc, #236]	@ (8005dcc <TIM_Base_SetConfig+0x100>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d008      	beq.n	8005cf6 <TIM_Base_SetConfig+0x2a>
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	2380      	movs	r3, #128	@ 0x80
 8005ce8:	05db      	lsls	r3, r3, #23
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0x2a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a37      	ldr	r2, [pc, #220]	@ (8005dd0 <TIM_Base_SetConfig+0x104>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2270      	movs	r2, #112	@ 0x70
 8005cfa:	4393      	bics	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <TIM_Base_SetConfig+0x100>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	05db      	lsls	r3, r3, #23
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d013      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd0 <TIM_Base_SetConfig+0x104>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <TIM_Base_SetConfig+0x108>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <TIM_Base_SetConfig+0x10c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <TIM_Base_SetConfig+0x110>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_Base_SetConfig+0x76>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	@ (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d108      	bne.n	8005d54 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a27      	ldr	r2, [pc, #156]	@ (8005de4 <TIM_Base_SetConfig+0x118>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2280      	movs	r2, #128	@ 0x80
 8005d58:	4393      	bics	r3, r2
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <TIM_Base_SetConfig+0x100>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_Base_SetConfig+0xce>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a14      	ldr	r2, [pc, #80]	@ (8005dd8 <TIM_Base_SetConfig+0x10c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_Base_SetConfig+0xce>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <TIM_Base_SetConfig+0x110>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_Base_SetConfig+0xce>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d103      	bne.n	8005da2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2201      	movs	r2, #1
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d106      	bne.n	8005dc2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2201      	movs	r2, #1
 8005dba:	4393      	bics	r3, r2
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	611a      	str	r2, [r3, #16]
  }
}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40002000 	.word	0x40002000
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	fffffcff 	.word	0xfffffcff

08005de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4393      	bics	r3, r2
 8005e00:	001a      	movs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a32      	ldr	r2, [pc, #200]	@ (8005ee0 <TIM_OC1_SetConfig+0xf8>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	4393      	bics	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	4393      	bics	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a28      	ldr	r2, [pc, #160]	@ (8005ee4 <TIM_OC1_SetConfig+0xfc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_OC1_SetConfig+0x76>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a27      	ldr	r2, [pc, #156]	@ (8005ee8 <TIM_OC1_SetConfig+0x100>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_OC1_SetConfig+0x76>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <TIM_OC1_SetConfig+0x104>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC1_SetConfig+0x76>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	@ (8005ef0 <TIM_OC1_SetConfig+0x108>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10c      	bne.n	8005e78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2208      	movs	r2, #8
 8005e62:	4393      	bics	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2204      	movs	r2, #4
 8005e74:	4393      	bics	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee4 <TIM_OC1_SetConfig+0xfc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_OC1_SetConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a19      	ldr	r2, [pc, #100]	@ (8005ee8 <TIM_OC1_SetConfig+0x100>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_OC1_SetConfig+0xb0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a18      	ldr	r2, [pc, #96]	@ (8005eec <TIM_OC1_SetConfig+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC1_SetConfig+0xb0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a17      	ldr	r2, [pc, #92]	@ (8005ef0 <TIM_OC1_SetConfig+0x108>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d111      	bne.n	8005ebc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4a16      	ldr	r2, [pc, #88]	@ (8005ef4 <TIM_OC1_SetConfig+0x10c>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4a15      	ldr	r2, [pc, #84]	@ (8005ef8 <TIM_OC1_SetConfig+0x110>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b006      	add	sp, #24
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	fffeff8f 	.word	0xfffeff8f
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	fffffeff 	.word	0xfffffeff
 8005ef8:	fffffdff 	.word	0xfffffdff

08005efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	2210      	movs	r2, #16
 8005f12:	4393      	bics	r3, r2
 8005f14:	001a      	movs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <TIM_OC2_SetConfig+0xe8>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <TIM_OC2_SetConfig+0xec>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2220      	movs	r2, #32
 8005f46:	4393      	bics	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a24      	ldr	r2, [pc, #144]	@ (8005fec <TIM_OC2_SetConfig+0xf0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10d      	bne.n	8005f7a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2280      	movs	r2, #128	@ 0x80
 8005f62:	4393      	bics	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2240      	movs	r2, #64	@ 0x40
 8005f76:	4393      	bics	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fec <TIM_OC2_SetConfig+0xf0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00b      	beq.n	8005f9a <TIM_OC2_SetConfig+0x9e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff0 <TIM_OC2_SetConfig+0xf4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d007      	beq.n	8005f9a <TIM_OC2_SetConfig+0x9e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ff4 <TIM_OC2_SetConfig+0xf8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC2_SetConfig+0x9e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a18      	ldr	r2, [pc, #96]	@ (8005ff8 <TIM_OC2_SetConfig+0xfc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d113      	bne.n	8005fc2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	@ (8005ffc <TIM_OC2_SetConfig+0x100>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <TIM_OC2_SetConfig+0x104>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b006      	add	sp, #24
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	feff8fff 	.word	0xfeff8fff
 8005fe8:	fffffcff 	.word	0xfffffcff
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800
 8005ffc:	fffffbff 	.word	0xfffffbff
 8006000:	fffff7ff 	.word	0xfffff7ff

08006004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <TIM_OC3_SetConfig+0xe4>)
 800601a:	401a      	ands	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <TIM_OC3_SetConfig+0xe8>)
 8006030:	4013      	ands	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2203      	movs	r2, #3
 8006038:	4393      	bics	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <TIM_OC3_SetConfig+0xec>)
 800604a:	4013      	ands	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a25      	ldr	r2, [pc, #148]	@ (80060f4 <TIM_OC3_SetConfig+0xf0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10d      	bne.n	800607e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4a24      	ldr	r2, [pc, #144]	@ (80060f8 <TIM_OC3_SetConfig+0xf4>)
 8006066:	4013      	ands	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4a20      	ldr	r2, [pc, #128]	@ (80060fc <TIM_OC3_SetConfig+0xf8>)
 800607a:	4013      	ands	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1c      	ldr	r2, [pc, #112]	@ (80060f4 <TIM_OC3_SetConfig+0xf0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_OC3_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <TIM_OC3_SetConfig+0xfc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_OC3_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1c      	ldr	r2, [pc, #112]	@ (8006104 <TIM_OC3_SetConfig+0x100>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_OC3_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1b      	ldr	r2, [pc, #108]	@ (8006108 <TIM_OC3_SetConfig+0x104>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d113      	bne.n	80060c6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	@ (800610c <TIM_OC3_SetConfig+0x108>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <TIM_OC3_SetConfig+0x10c>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b006      	add	sp, #24
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	fffffeff 	.word	0xfffffeff
 80060ec:	fffeff8f 	.word	0xfffeff8f
 80060f0:	fffffdff 	.word	0xfffffdff
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	fffff7ff 	.word	0xfffff7ff
 80060fc:	fffffbff 	.word	0xfffffbff
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	ffffefff 	.word	0xffffefff
 8006110:	ffffdfff 	.word	0xffffdfff

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <TIM_OC4_SetConfig+0xb0>)
 800612a:	401a      	ands	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a22      	ldr	r2, [pc, #136]	@ (80061c8 <TIM_OC4_SetConfig+0xb4>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a21      	ldr	r2, [pc, #132]	@ (80061cc <TIM_OC4_SetConfig+0xb8>)
 8006148:	4013      	ands	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <TIM_OC4_SetConfig+0xbc>)
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <TIM_OC4_SetConfig+0xc0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_OC4_SetConfig+0x78>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <TIM_OC4_SetConfig+0xc4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_OC4_SetConfig+0x78>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <TIM_OC4_SetConfig+0xc8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC4_SetConfig+0x78>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <TIM_OC4_SetConfig+0xcc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d109      	bne.n	80061a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <TIM_OC4_SetConfig+0xd0>)
 8006190:	4013      	ands	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	46c0      	nop			@ (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	ffffefff 	.word	0xffffefff
 80061c8:	feff8fff 	.word	0xfeff8fff
 80061cc:	fffffcff 	.word	0xfffffcff
 80061d0:	ffffdfff 	.word	0xffffdfff
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800
 80061e4:	ffffbfff 	.word	0xffffbfff

080061e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	4a23      	ldr	r2, [pc, #140]	@ (800628c <TIM_OC5_SetConfig+0xa4>)
 80061fe:	401a      	ands	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <TIM_OC5_SetConfig+0xa8>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4a1b      	ldr	r2, [pc, #108]	@ (8006294 <TIM_OC5_SetConfig+0xac>)
 8006226:	4013      	ands	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <TIM_OC5_SetConfig+0xb0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00b      	beq.n	8006256 <TIM_OC5_SetConfig+0x6e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a16      	ldr	r2, [pc, #88]	@ (800629c <TIM_OC5_SetConfig+0xb4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_OC5_SetConfig+0x6e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <TIM_OC5_SetConfig+0xb8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_OC5_SetConfig+0x6e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a14      	ldr	r2, [pc, #80]	@ (80062a4 <TIM_OC5_SetConfig+0xbc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d109      	bne.n	800626a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4a0c      	ldr	r2, [pc, #48]	@ (800628c <TIM_OC5_SetConfig+0xa4>)
 800625a:	4013      	ands	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	621a      	str	r2, [r3, #32]
}
 8006284:	46c0      	nop			@ (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b006      	add	sp, #24
 800628a:	bd80      	pop	{r7, pc}
 800628c:	fffeffff 	.word	0xfffeffff
 8006290:	fffeff8f 	.word	0xfffeff8f
 8006294:	fffdffff 	.word	0xfffdffff
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40014000 	.word	0x40014000
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800

080062a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <TIM_OC6_SetConfig+0xa8>)
 80062be:	401a      	ands	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a20      	ldr	r2, [pc, #128]	@ (8006354 <TIM_OC6_SetConfig+0xac>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <TIM_OC6_SetConfig+0xb0>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	051b      	lsls	r3, r3, #20
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a18      	ldr	r2, [pc, #96]	@ (800635c <TIM_OC6_SetConfig+0xb4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_OC6_SetConfig+0x70>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <TIM_OC6_SetConfig+0xb8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC6_SetConfig+0x70>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <TIM_OC6_SetConfig+0xbc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC6_SetConfig+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <TIM_OC6_SetConfig+0xc0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d109      	bne.n	800632c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4a14      	ldr	r2, [pc, #80]	@ (800636c <TIM_OC6_SetConfig+0xc4>)
 800631c:	4013      	ands	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	029b      	lsls	r3, r3, #10
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	b006      	add	sp, #24
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	ffefffff 	.word	0xffefffff
 8006354:	feff8fff 	.word	0xfeff8fff
 8006358:	ffdfffff 	.word	0xffdfffff
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40014400 	.word	0x40014400
 8006368:	40014800 	.word	0x40014800
 800636c:	fffbffff 	.word	0xfffbffff

08006370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	2201      	movs	r2, #1
 8006388:	4393      	bics	r3, r2
 800638a:	001a      	movs	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	22f0      	movs	r2, #240	@ 0xf0
 800639a:	4393      	bics	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	220a      	movs	r2, #10
 80063ac:	4393      	bics	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	46c0      	nop			@ (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b006      	add	sp, #24
 80063ca:	bd80      	pop	{r7, pc}

080063cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	2210      	movs	r2, #16
 80063e4:	4393      	bics	r3, r2
 80063e6:	001a      	movs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4a0d      	ldr	r2, [pc, #52]	@ (800642c <TIM_TI2_ConfigInputStage+0x60>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	031b      	lsls	r3, r3, #12
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	22a0      	movs	r2, #160	@ 0xa0
 8006408:	4393      	bics	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b006      	add	sp, #24
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	ffff0fff 	.word	0xffff0fff

08006430 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <TIM_ITRx_SetConfig+0x34>)
 8006444:	4013      	ands	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	2207      	movs	r2, #7
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	ffcfff8f 	.word	0xffcfff8f

08006468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <TIM_ETR_SetConfig+0x3c>)
 8006480:	4013      	ands	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	46c0      	nop			@ (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b006      	add	sp, #24
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	ffff00ff 	.word	0xffff00ff

080064a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	221f      	movs	r2, #31
 80064b8:	4013      	ands	r3, r2
 80064ba:	2201      	movs	r2, #1
 80064bc:	409a      	lsls	r2, r3
 80064be:	0013      	movs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	43d2      	mvns	r2, r2
 80064ca:	401a      	ands	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	211f      	movs	r1, #31
 80064d8:	400b      	ands	r3, r1
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	4099      	lsls	r1, r3
 80064de:	000b      	movs	r3, r1
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b006      	add	sp, #24
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	223c      	movs	r2, #60	@ 0x3c
 80064fe:	5c9b      	ldrb	r3, [r3, r2]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e055      	b.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	223c      	movs	r2, #60	@ 0x3c
 800650c:	2101      	movs	r1, #1
 800650e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	223d      	movs	r2, #61	@ 0x3d
 8006514:	2102      	movs	r1, #2
 8006516:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a23      	ldr	r2, [pc, #140]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006536:	4013      	ands	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2270      	movs	r2, #112	@ 0x70
 8006548:	4393      	bics	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00f      	beq.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	2380      	movs	r3, #128	@ 0x80
 800656e:	05db      	lsls	r3, r3, #23
 8006570:	429a      	cmp	r2, r3
 8006572:	d009      	beq.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a11      	ldr	r2, [pc, #68]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10c      	bne.n	80065a2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2280      	movs	r2, #128	@ 0x80
 800658c:	4393      	bics	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	223d      	movs	r2, #61	@ 0x3d
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	223c      	movs	r2, #60	@ 0x3c
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	0018      	movs	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b004      	add	sp, #16
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40012c00 	.word	0x40012c00
 80065c0:	ff0fffff 	.word	0xff0fffff
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40014000 	.word	0x40014000

080065cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d4:	46c0      	nop			@ (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b002      	add	sp, #8
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065f4:	46c0      	nop			@ (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}

080065fc <memset>:
 80065fc:	0003      	movs	r3, r0
 80065fe:	1882      	adds	r2, r0, r2
 8006600:	4293      	cmp	r3, r2
 8006602:	d100      	bne.n	8006606 <memset+0xa>
 8006604:	4770      	bx	lr
 8006606:	7019      	strb	r1, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	e7f9      	b.n	8006600 <memset+0x4>

0800660c <__libc_init_array>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	2600      	movs	r6, #0
 8006610:	4c0c      	ldr	r4, [pc, #48]	@ (8006644 <__libc_init_array+0x38>)
 8006612:	4d0d      	ldr	r5, [pc, #52]	@ (8006648 <__libc_init_array+0x3c>)
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	42a6      	cmp	r6, r4
 800661a:	d109      	bne.n	8006630 <__libc_init_array+0x24>
 800661c:	2600      	movs	r6, #0
 800661e:	f000 f819 	bl	8006654 <_init>
 8006622:	4c0a      	ldr	r4, [pc, #40]	@ (800664c <__libc_init_array+0x40>)
 8006624:	4d0a      	ldr	r5, [pc, #40]	@ (8006650 <__libc_init_array+0x44>)
 8006626:	1b64      	subs	r4, r4, r5
 8006628:	10a4      	asrs	r4, r4, #2
 800662a:	42a6      	cmp	r6, r4
 800662c:	d105      	bne.n	800663a <__libc_init_array+0x2e>
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	00b3      	lsls	r3, r6, #2
 8006632:	58eb      	ldr	r3, [r5, r3]
 8006634:	4798      	blx	r3
 8006636:	3601      	adds	r6, #1
 8006638:	e7ee      	b.n	8006618 <__libc_init_array+0xc>
 800663a:	00b3      	lsls	r3, r6, #2
 800663c:	58eb      	ldr	r3, [r5, r3]
 800663e:	4798      	blx	r3
 8006640:	3601      	adds	r6, #1
 8006642:	e7f2      	b.n	800662a <__libc_init_array+0x1e>
 8006644:	08006710 	.word	0x08006710
 8006648:	08006710 	.word	0x08006710
 800664c:	08006714 	.word	0x08006714
 8006650:	08006710 	.word	0x08006710

08006654 <_init>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	46c0      	nop			@ (mov r8, r8)
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr

08006660 <_fini>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr
