
PRVL.468266.002_adapter_G8U6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005604  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005700  08005700  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005700  08005700  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005704  08005704  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005708  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  08005718  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08005718  00007134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e751  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fb  00000000  00000000  00015789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00017a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba0  00000000  00000000  00018960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e1c  00000000  00000000  00019500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c50  00000000  00000000  0003131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b204  00000000  00000000  00042f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c4  00000000  00000000  000de1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e1778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080056a8 	.word	0x080056a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080056a8 	.word	0x080056a8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <OpenKey>:

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
void OpenKey()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_RESET);
 8000220:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <OpenKey+0x24>)
 8000222:	2200      	movs	r2, #0
 8000224:	2140      	movs	r1, #64	@ 0x40
 8000226:	0018      	movs	r0, r3
 8000228:	f001 fa23 	bl	8001672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <OpenKey+0x24>)
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fa1d 	bl	8001672 <HAL_GPIO_WritePin>

}
 8000238:	46c0      	nop			@ (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	50000400 	.word	0x50000400

08000244 <CloseKey>:

void CloseKey()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, GPIO_PIN_SET);
 8000248:	4b07      	ldr	r3, [pc, #28]	@ (8000268 <CloseKey+0x24>)
 800024a:	2201      	movs	r2, #1
 800024c:	2140      	movs	r1, #64	@ 0x40
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fa0f 	bl	8001672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_SET);
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <CloseKey+0x24>)
 8000256:	2201      	movs	r2, #1
 8000258:	2108      	movs	r1, #8
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fa09 	bl	8001672 <HAL_GPIO_WritePin>

}
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	50000400 	.word	0x50000400

0800026c <SetButton>:
uint8_t command_i2c = 0;
uint8_t TempMode = 1;


void SetButton(GPIO_PinState state)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	0002      	movs	r2, r0
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PWR_SW_GPIO_Port, PWR_SW_Pin, state);
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	23a0      	movs	r3, #160	@ 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2110      	movs	r1, #16
 8000282:	0018      	movs	r0, r3
 8000284:	f001 f9f5 	bl	8001672 <HAL_GPIO_WritePin>
}
 8000288:	46c0      	nop			@ (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <PressButton>:

void PressButton(uint16_t time)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	801a      	strh	r2, [r3, #0]
	SetButton(GPIO_PIN_RESET);
 800029c:	2000      	movs	r0, #0
 800029e:	f7ff ffe5 	bl	800026c <SetButton>
	HAL_Delay(time);
 80002a2:	1dbb      	adds	r3, r7, #6
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fed4 	bl	8001054 <HAL_Delay>
	SetButton(GPIO_PIN_SET);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f7ff ffdd 	bl	800026c <SetButton>
}
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b002      	add	sp, #8
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <SetPWROK>:

void SetPWROK(PWROKState state)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	0002      	movs	r2, r0
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, (state == HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	425a      	negs	r2, r3
 80002d0:	4153      	adcs	r3, r2
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	001a      	movs	r2, r3
 80002d6:	23a0      	movs	r3, #160	@ 0xa0
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2108      	movs	r1, #8
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 f9c8 	bl	8001672 <HAL_GPIO_WritePin>
	PWR_OK_State = state;
 80002e2:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <SetPWROK+0x38>)
 80002e4:	1dfa      	adds	r2, r7, #7
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	701a      	strb	r2, [r3, #0]
}
 80002ea:	46c0      	nop			@ (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b002      	add	sp, #8
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	20000127 	.word	0x20000127

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fe24 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f840 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f9ea 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000308:	f000 f8b0 	bl	800046c <MX_I2C1_Init>
  MX_I2C2_Init();
 800030c:	f000 f8f0 	bl	80004f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000310:	f000 f930 	bl	8000574 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000314:	f000 f894 	bl	8000440 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	SetButton(GPIO_PIN_SET);
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ffa7 	bl	800026c <SetButton>
	SetPWROK(HIGH);
 800031e:	2001      	movs	r0, #1
 8000320:	f7ff ffcc 	bl	80002bc <SetPWROK>
	Fan_Init(&hi2c1, 0xA2);
 8000324:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <main+0x7c>)
 8000326:	21a2      	movs	r1, #162	@ 0xa2
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fa7b 	bl	8000824 <Fan_Init>
	Fan_Init(&hi2c1, 0xA8);
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <main+0x7c>)
 8000330:	21a8      	movs	r1, #168	@ 0xa8
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fa76 	bl	8000824 <Fan_Init>
		{
			HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, RESET);
			HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, SET);
			SetPWROK(HIGH);
		}
*/		HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8000338:	490f      	ldr	r1, [pc, #60]	@ (8000378 <main+0x80>)
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <main+0x84>)
 800033c:	2201      	movs	r2, #1
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fa5a 	bl	80017f8 <HAL_I2C_Slave_Receive_IT>



		// Управление вентиляторами
		if (TempMode == 1) {
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <main+0x88>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <main+0x5e>
			Set_Fan_DutyCycle(_FAN2_DUTYCYCLE_50);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fb1a 	bl	8000988 <Set_Fan_DutyCycle>
 8000354:	e7f0      	b.n	8000338 <main+0x40>
		} else if (TempMode == 2) {
 8000356:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <main+0x88>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d104      	bne.n	8000368 <main+0x70>
			Set_Fan_DutyCycle(_FAN2_DUTYCYCLE_75);
 800035e:	23c0      	movs	r3, #192	@ 0xc0
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fb11 	bl	8000988 <Set_Fan_DutyCycle>
 8000366:	e7e7      	b.n	8000338 <main+0x40>
		} else {
			Set_Fan_DutyCycle(_FAN2_DUTYCYCLE_100);
 8000368:	23ff      	movs	r3, #255	@ 0xff
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fb0c 	bl	8000988 <Set_Fan_DutyCycle>
*/		HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8000370:	e7e2      	b.n	8000338 <main+0x40>
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	20000030 	.word	0x20000030
 8000378:	2000012c 	.word	0x2000012c
 800037c:	20000084 	.word	0x20000084
 8000380:	20000000 	.word	0x20000000

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b093      	sub	sp, #76	@ 0x4c
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	2410      	movs	r4, #16
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	2338      	movs	r3, #56	@ 0x38
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f005 f95b 	bl	8005650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	003b      	movs	r3, r7
 800039c:	0018      	movs	r0, r3
 800039e:	2310      	movs	r3, #16
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f005 f954 	bl	8005650 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003a8:	2380      	movs	r3, #128	@ 0x80
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f003 fba1 	bl	8003af4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2202      	movs	r2, #2
 80003b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	2280      	movs	r2, #128	@ 0x80
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003c0:	0021      	movs	r1, r4
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2240      	movs	r2, #64	@ 0x40
 80003cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2202      	movs	r2, #2
 80003d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2202      	movs	r2, #2
 80003d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2208      	movs	r2, #8
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2280      	movs	r2, #128	@ 0x80
 80003ea:	0292      	lsls	r2, r2, #10
 80003ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	22e0      	movs	r2, #224	@ 0xe0
 80003f2:	0512      	lsls	r2, r2, #20
 80003f4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	0592      	lsls	r2, r2, #22
 80003fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	0018      	movs	r0, r3
 8000402:	f003 fbb7 	bl	8003b74 <HAL_RCC_OscConfig>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800040a:	f000 fbe3 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	003b      	movs	r3, r7
 8000410:	2207      	movs	r2, #7
 8000412:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	003b      	movs	r3, r7
 8000416:	2202      	movs	r2, #2
 8000418:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	003b      	movs	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	003b      	movs	r3, r7
 8000428:	2102      	movs	r1, #2
 800042a:	0018      	movs	r0, r3
 800042c:	f003 febc 	bl	80041a8 <HAL_RCC_ClockConfig>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000434:	f000 fbce 	bl	8000bd4 <Error_Handler>
  }
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b013      	add	sp, #76	@ 0x4c
 800043e:	bd90      	pop	{r4, r7, pc}

08000440 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* I2C1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	2017      	movs	r0, #23
 800044a:	f000 fee9 	bl	8001220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800044e:	2017      	movs	r0, #23
 8000450:	f000 fefb 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	2018      	movs	r0, #24
 800045a:	f000 fee1 	bl	8001220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800045e:	2018      	movs	r0, #24
 8000460:	f000 fef3 	bl	800124a <HAL_NVIC_EnableIRQ>
}
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000472:	4a1d      	ldr	r2, [pc, #116]	@ (80004e8 <MX_I2C1_Init+0x7c>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12469;
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000478:	4a1c      	ldr	r2, [pc, #112]	@ (80004ec <MX_I2C1_Init+0x80>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800047c:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <MX_I2C1_Init+0x78>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000482:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000484:	2201      	movs	r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <MX_I2C1_Init+0x78>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <MX_I2C1_Init+0x78>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a0:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <MX_I2C1_Init+0x78>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_I2C1_Init+0x78>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f8ff 	bl	80016ac <HAL_I2C_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b2:	f000 fb8f 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	015a      	lsls	r2, r3, #5
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <MX_I2C1_Init+0x78>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f003 fa80 	bl	80039c4 <HAL_I2CEx_ConfigAnalogFilter>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80004c8:	f000 fb84 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <MX_I2C1_Init+0x78>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f003 fac3 	bl	8003a5c <HAL_I2CEx_ConfigDigitalFilter>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80004da:	f000 fb7b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000030 	.word	0x20000030
 80004e8:	40005400 	.word	0x40005400
 80004ec:	00c12469 	.word	0x00c12469

080004f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <MX_I2C2_Init+0x78>)
 80004f6:	4a1d      	ldr	r2, [pc, #116]	@ (800056c <MX_I2C2_Init+0x7c>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12469;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <MX_I2C2_Init+0x78>)
 80004fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <MX_I2C2_Init+0x80>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 74;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000502:	224a      	movs	r2, #74	@ 0x4a
 8000504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_I2C2_Init+0x78>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_I2C2_Init+0x78>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_I2C2_Init+0x78>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 f8bd 	bl	80016ac <HAL_I2C_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 fb4d 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	015a      	lsls	r2, r3, #5
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f003 fa3e 	bl	80039c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 800054c:	f000 fb42 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <MX_I2C2_Init+0x78>)
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f003 fa81 	bl	8003a5c <HAL_I2CEx_ConfigDigitalFilter>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 800055e:	f000 fb39 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000084 	.word	0x20000084
 800056c:	40005800 	.word	0x40005800
 8000570:	00c12469 	.word	0x00c12469

08000574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b090      	sub	sp, #64	@ 0x40
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	2330      	movs	r3, #48	@ 0x30
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	0018      	movs	r0, r3
 8000580:	2310      	movs	r3, #16
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f005 f863 	bl	8005650 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800058a:	231c      	movs	r3, #28
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f005 f85b 	bl	8005650 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800059a:	230c      	movs	r3, #12
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2310      	movs	r3, #16
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f005 f853 	bl	8005650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	230c      	movs	r3, #12
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f005 f84c 	bl	8005650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b8:	4b46      	ldr	r3, [pc, #280]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005ba:	4a47      	ldr	r2, [pc, #284]	@ (80006d8 <MX_TIM1_Init+0x164>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80005be:	4b45      	ldr	r3, [pc, #276]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005c0:	221f      	movs	r2, #31
 80005c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b43      	ldr	r3, [pc, #268]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80005ca:	4b42      	ldr	r3, [pc, #264]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005cc:	2231      	movs	r2, #49	@ 0x31
 80005ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	4b40      	ldr	r3, [pc, #256]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d6:	4b3f      	ldr	r3, [pc, #252]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e2:	4b3c      	ldr	r3, [pc, #240]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f004 f921 	bl	800482c <HAL_TIM_Base_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005ee:	f000 faf1 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f2:	2130      	movs	r1, #48	@ 0x30
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0152      	lsls	r2, r2, #5
 80005fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fc:	187a      	adds	r2, r7, r1
 80005fe:	4b35      	ldr	r3, [pc, #212]	@ (80006d4 <MX_TIM1_Init+0x160>)
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f004 fb76 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800060c:	f000 fae2 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000610:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <MX_TIM1_Init+0x160>)
 8000612:	0018      	movs	r0, r3
 8000614:	f004 f962 	bl	80048dc <HAL_TIM_IC_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800061c:	f000 fada 	bl	8000bd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000620:	211c      	movs	r1, #28
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2204      	movs	r2, #4
 8000626:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2250      	movs	r2, #80	@ 0x50
 800062c:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000640:	187a      	adds	r2, r7, r1
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <MX_TIM1_Init+0x160>)
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f004 fc2a 	bl	8004ea0 <HAL_TIM_SlaveConfigSynchro>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000650:	f000 fac0 	bl	8000bd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000654:	210c      	movs	r1, #12
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800066e:	1879      	adds	r1, r7, r1
 8000670:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_TIM1_Init+0x160>)
 8000672:	2200      	movs	r2, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fa99 	bl	8004bac <HAL_TIM_IC_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800067e:	f000 faa9 	bl	8000bd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000682:	210c      	movs	r1, #12
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2202      	movs	r2, #2
 8000688:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2202      	movs	r2, #2
 800068e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000690:	1879      	adds	r1, r7, r1
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_TIM1_Init+0x160>)
 8000694:	2204      	movs	r2, #4
 8000696:	0018      	movs	r0, r3
 8000698:	f004 fa88 	bl	8004bac <HAL_TIM_IC_ConfigChannel>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80006a0:	f000 fa98 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b6:	003a      	movs	r2, r7
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_TIM1_Init+0x160>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f004 ff41 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 80006c6:	f000 fa85 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b010      	add	sp, #64	@ 0x40
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	200000d8 	.word	0x200000d8
 80006d8:	40012c00 	.word	0x40012c00

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	@ 0x24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f004 ffaf 	bl	8005650 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <MX_GPIO_Init+0x100>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <MX_GPIO_Init+0x100>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_GPIO_Init+0x100>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_GPIO_Init+0x100>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <MX_GPIO_Init+0x100>)
 8000710:	2102      	movs	r1, #2
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_GPIO_Init+0x100>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2202      	movs	r2, #2
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_I2C_RES_Pin|PWR_SW_Pin|RST_SW_Pin, GPIO_PIN_SET);
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2201      	movs	r2, #1
 8000728:	2131      	movs	r1, #49	@ 0x31
 800072a:	0018      	movs	r0, r3
 800072c:	f000 ffa1 	bl	8001672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_FAN_TACH_Pin|MB_PWROK_Pin, GPIO_PIN_RESET);
 8000730:	23a0      	movs	r3, #160	@ 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2200      	movs	r2, #0
 8000736:	210a      	movs	r1, #10
 8000738:	0018      	movs	r0, r3
 800073a:	f000 ff9a 	bl	8001672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MB_BITCH_Pin|MCU_HOS_ON_Pin, GPIO_PIN_SET);
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <MX_GPIO_Init+0x104>)
 8000740:	2201      	movs	r2, #1
 8000742:	2148      	movs	r1, #72	@ 0x48
 8000744:	0018      	movs	r0, r3
 8000746:	f000 ff94 	bl	8001672 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_I2C_RES_Pin MB_FAN_TACH_Pin MB_PWROK_Pin PWR_SW_Pin
                           RST_SW_Pin */
  GPIO_InitStruct.Pin = USB_I2C_RES_Pin|MB_FAN_TACH_Pin|MB_PWROK_Pin|PWR_SW_Pin
 800074a:	193b      	adds	r3, r7, r4
 800074c:	223b      	movs	r2, #59	@ 0x3b
 800074e:	601a      	str	r2, [r3, #0]
                          |RST_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2201      	movs	r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	193a      	adds	r2, r7, r4
 8000764:	23a0      	movs	r3, #160	@ 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fe00 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PSON_Pin MCU_ATTACH_IN_Pin */
  GPIO_InitStruct.Pin = MB_PSON_Pin|MCU_ATTACH_IN_Pin;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2284      	movs	r2, #132	@ 0x84
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	193a      	adds	r2, r7, r4
 8000784:	23a0      	movs	r3, #160	@ 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fdf0 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_LED_Pin MB_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|MB_STATUS_LED_Pin;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2211      	movs	r2, #17
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <MX_GPIO_Init+0x104>)
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f000 fde1 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_BITCH_Pin MCU_HOS_ON_Pin */
  GPIO_InitStruct.Pin = MB_BITCH_Pin|MCU_HOS_ON_Pin;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2248      	movs	r2, #72	@ 0x48
 80007b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <MX_GPIO_Init+0x104>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fdce 	bl	8001370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b009      	add	sp, #36	@ 0x24
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	50000400 	.word	0x50000400

080007e4 <WriteRegister.0>:
void Fan_Init(I2C_HandleTypeDef *hi2c, uint16_t slaveAddress)
{
	uint8_t aTxBuffer[1];

	// Функция для записи в регистр
	void WriteRegister(uint8_t reg, uint8_t value) {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	4663      	mov	r3, ip
 80007f8:	4662      	mov	r2, ip
 80007fa:	603a      	str	r2, [r7, #0]

		aTxBuffer[0] = value;
 80007fc:	1dba      	adds	r2, r7, #6
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	719a      	strb	r2, [r3, #6]
		HAL_I2C_Mem_Write_IT(hi2c, slaveAddress, reg, 1, aTxBuffer, 100);
 8000802:	1dfa      	adds	r2, r7, #7
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	b294      	uxth	r4, r2
 8000808:	1d9a      	adds	r2, r3, #6
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	8899      	ldrh	r1, [r3, #4]
 800080e:	2364      	movs	r3, #100	@ 0x64
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	9200      	str	r2, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	0022      	movs	r2, r4
 8000818:	f001 f972 	bl	8001b00 <HAL_I2C_Mem_Write_IT>
	}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}

08000824 <Fan_Init>:
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	000a      	movs	r2, r1
 800082e:	1cbb      	adds	r3, r7, #2
 8000830:	801a      	strh	r2, [r3, #0]
void Fan_Init(I2C_HandleTypeDef *hi2c, uint16_t slaveAddress)
 8000832:	2320      	movs	r3, #32
 8000834:	2208      	movs	r2, #8
 8000836:	189b      	adds	r3, r3, r2
 8000838:	19da      	adds	r2, r3, r7
 800083a:	210c      	movs	r1, #12
 800083c:	187b      	adds	r3, r7, r1
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	187b      	adds	r3, r7, r1
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	187b      	adds	r3, r7, r1
 8000848:	1cba      	adds	r2, r7, #2
 800084a:	8812      	ldrh	r2, [r2, #0]
 800084c:	809a      	strh	r2, [r3, #4]

	// Запись значений в регистры
	WriteRegister(_FAN2_CONTROL_REGISTER_1, 0x19);
 800084e:	2200      	movs	r2, #0
 8000850:	000c      	movs	r4, r1
 8000852:	193b      	adds	r3, r7, r4
 8000854:	469c      	mov	ip, r3
 8000856:	2119      	movs	r1, #25
 8000858:	0010      	movs	r0, r2
 800085a:	f7ff ffc3 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_CONTROL_REGISTER_2, 0x11);
 800085e:	2201      	movs	r2, #1
 8000860:	193b      	adds	r3, r7, r4
 8000862:	469c      	mov	ip, r3
 8000864:	2111      	movs	r1, #17
 8000866:	0010      	movs	r0, r2
 8000868:	f7ff ffbc 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_CONTROL_REGISTER_3, 0xA3);
 800086c:	2202      	movs	r2, #2
 800086e:	193b      	adds	r3, r7, r4
 8000870:	469c      	mov	ip, r3
 8000872:	21a3      	movs	r1, #163	@ 0xa3
 8000874:	0010      	movs	r0, r2
 8000876:	f7ff ffb5 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_FAIL_DUTY_REGISTER, 0xFF);
 800087a:	2203      	movs	r2, #3
 800087c:	193b      	adds	r3, r7, r4
 800087e:	469c      	mov	ip, r3
 8000880:	21ff      	movs	r1, #255	@ 0xff
 8000882:	0010      	movs	r0, r2
 8000884:	f7ff ffae 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_ALERT_MASK_REGISTER, 0xC0);
 8000888:	2204      	movs	r2, #4
 800088a:	193b      	adds	r3, r7, r4
 800088c:	469c      	mov	ip, r3
 800088e:	21c0      	movs	r1, #192	@ 0xc0
 8000890:	0010      	movs	r0, r2
 8000892:	f7ff ffa7 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_IDEALITY_FACTOR_REGISTER, 0x18);
 8000896:	2205      	movs	r2, #5
 8000898:	193b      	adds	r3, r7, r4
 800089a:	469c      	mov	ip, r3
 800089c:	2118      	movs	r1, #24
 800089e:	0010      	movs	r0, r2
 80008a0:	f7ff ffa0 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x06, 0x55);
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	469c      	mov	ip, r3
 80008a8:	2155      	movs	r1, #85	@ 0x55
 80008aa:	2006      	movs	r0, #6
 80008ac:	f7ff ff9a 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x07, 0x00);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	469c      	mov	ip, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	2007      	movs	r0, #7
 80008b8:	f7ff ff94 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x08, 0x55);
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	469c      	mov	ip, r3
 80008c0:	2155      	movs	r1, #85	@ 0x55
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff ff8e 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x09, 0x00);
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	469c      	mov	ip, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	2009      	movs	r0, #9
 80008d0:	f7ff ff88 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0A, 0x6E);
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	469c      	mov	ip, r3
 80008d8:	216e      	movs	r1, #110	@ 0x6e
 80008da:	200a      	movs	r0, #10
 80008dc:	f7ff ff82 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0B, 0x00);
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	469c      	mov	ip, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	200b      	movs	r0, #11
 80008e8:	f7ff ff7c 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0C, 0x46);
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	469c      	mov	ip, r3
 80008f0:	2146      	movs	r1, #70	@ 0x46
 80008f2:	200c      	movs	r0, #12
 80008f4:	f7ff ff76 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0D, 0x00);
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	469c      	mov	ip, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	200d      	movs	r0, #13
 8000900:	f7ff ff70 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0E, 0xFF);
 8000904:	193b      	adds	r3, r7, r4
 8000906:	469c      	mov	ip, r3
 8000908:	21ff      	movs	r1, #255	@ 0xff
 800090a:	200e      	movs	r0, #14
 800090c:	f7ff ff6a 	bl	80007e4 <WriteRegister.0>
	WriteRegister(0x0F, 0xFE);
 8000910:	193b      	adds	r3, r7, r4
 8000912:	469c      	mov	ip, r3
 8000914:	21fe      	movs	r1, #254	@ 0xfe
 8000916:	200f      	movs	r0, #15
 8000918:	f7ff ff64 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_DIRECT_CONTROL_REGISTER, _FAN2_DUTYCYCLE_50);
 800091c:	2250      	movs	r2, #80	@ 0x50
 800091e:	2180      	movs	r1, #128	@ 0x80
 8000920:	193b      	adds	r3, r7, r4
 8000922:	469c      	mov	ip, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f7ff ff5d 	bl	80007e4 <WriteRegister.0>
	WriteRegister(_FAN2_FAIL_DUTY_REGISTER, _FAN2_DUTYCYCLE_50);
 800092a:	2203      	movs	r2, #3
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	193b      	adds	r3, r7, r4
 8000930:	469c      	mov	ip, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f7ff ff56 	bl	80007e4 <WriteRegister.0>



}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b007      	add	sp, #28
 800093e:	bd90      	pop	{r4, r7, pc}

08000940 <WriteRegister_1.1>:
void Set_Fan_DutyCycle(uint8_t duty_cycle)
{
	uint8_t aTxBuffer[1];

	// Функция для записи в регистр
	HAL_StatusTypeDef WriteRegister_1(uint8_t reg, uint8_t value) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af04      	add	r7, sp, #16
 8000946:	0002      	movs	r2, r0
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	1c0a      	adds	r2, r1, #0
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	4663      	mov	r3, ip
 8000954:	4662      	mov	r2, ip
 8000956:	603a      	str	r2, [r7, #0]
		// Проверка доступности устройства

		aTxBuffer[0] = value;
 8000958:	1dba      	adds	r2, r7, #6
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	701a      	strb	r2, [r3, #0]
		return HAL_I2C_Mem_Write(&hi2c1, 0xA2, reg, 1, aTxBuffer, 1, 100); // Синхронная запись
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	b292      	uxth	r2, r2
 8000964:	0019      	movs	r1, r3
 8000966:	4807      	ldr	r0, [pc, #28]	@ (8000984 <WriteRegister_1.1+0x44>)
 8000968:	2364      	movs	r3, #100	@ 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9100      	str	r1, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	21a2      	movs	r1, #162	@ 0xa2
 8000976:	f000 ff95 	bl	80018a4 <HAL_I2C_Mem_Write>
 800097a:	0003      	movs	r3, r0
	}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000030 	.word	0x20000030

08000988 <Set_Fan_DutyCycle>:
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	701a      	strb	r2, [r3, #0]
void Set_Fan_DutyCycle(uint8_t duty_cycle)
 8000994:	2318      	movs	r3, #24
 8000996:	2208      	movs	r2, #8
 8000998:	189b      	adds	r3, r3, r2
 800099a:	19da      	adds	r2, r3, r7
 800099c:	2408      	movs	r4, #8
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	605a      	str	r2, [r3, #4]
		aTxBuffer[0] = value;
		return HAL_I2C_Mem_Write(&hi2c1, 0xA8, reg, 1, aTxBuffer, 1, 100); // Синхронная запись
	}

	// Установка скважности в регистр прямого управления
	WriteRegister_1(_FAN2_DIRECT_CONTROL_REGISTER, duty_cycle);
 80009a2:	2050      	movs	r0, #80	@ 0x50
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	469c      	mov	ip, r3
 80009ac:	0011      	movs	r1, r2
 80009ae:	f7ff ffc7 	bl	8000940 <WriteRegister_1.1>
	// Установка скважности в регистр прямого управления
	WriteRegister_2(_FAN2_DIRECT_CONTROL_REGISTER, duty_cycle) ;
 80009b2:	2050      	movs	r0, #80	@ 0x50
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	469c      	mov	ip, r3
 80009bc:	0011      	movs	r1, r2
 80009be:	f000 f805 	bl	80009cc <WriteRegister_2.2>

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b005      	add	sp, #20
 80009c8:	bd90      	pop	{r4, r7, pc}
	...

080009cc <WriteRegister_2.2>:
	HAL_StatusTypeDef WriteRegister_2(uint8_t reg, uint8_t value) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	1c0a      	adds	r2, r1, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	4663      	mov	r3, ip
 80009e0:	4662      	mov	r2, ip
 80009e2:	603a      	str	r2, [r7, #0]
		aTxBuffer[0] = value;
 80009e4:	1dba      	adds	r2, r7, #6
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	701a      	strb	r2, [r3, #0]
		return HAL_I2C_Mem_Write(&hi2c1, 0xA8, reg, 1, aTxBuffer, 1, 100); // Синхронная запись
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	b292      	uxth	r2, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <WriteRegister_2.2+0x44>)
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	9100      	str	r1, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	21a8      	movs	r1, #168	@ 0xa8
 8000a02:	f000 ff4f 	bl	80018a4 <HAL_I2C_Mem_Write>
 8000a06:	0003      	movs	r3, r0
	}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000030 	.word	0x20000030

08000a14 <ProcessComand>:
void ProcessComand(uint8_t command)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
	Command = command;
 8000a20:	4b54      	ldr	r3, [pc, #336]	@ (8000b74 <ProcessComand+0x160>)
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
	MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8000a28:	23a0      	movs	r3, #160	@ 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fe02 	bl	8001638 <HAL_GPIO_ReadPin>
 8000a34:	0003      	movs	r3, r0
 8000a36:	001a      	movs	r2, r3
 8000a38:	4b4f      	ldr	r3, [pc, #316]	@ (8000b78 <ProcessComand+0x164>)
 8000a3a:	701a      	strb	r2, [r3, #0]
	if (Command == PWR_OFF && MB_State == 1) {
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b74 <ProcessComand+0x160>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d127      	bne.n	8000a94 <ProcessComand+0x80>
 8000a44:	4b4c      	ldr	r3, [pc, #304]	@ (8000b78 <ProcessComand+0x164>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d123      	bne.n	8000a94 <ProcessComand+0x80>
		//SetPWROK(HIGH);
		//HAL_Delay(400);
		SetButton(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fc0d 	bl	800026c <SetButton>
		while(MB_State != 0)
 8000a52:	e009      	b.n	8000a68 <ProcessComand+0x54>
		{
			MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8000a54:	23a0      	movs	r3, #160	@ 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2104      	movs	r1, #4
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fdec 	bl	8001638 <HAL_GPIO_ReadPin>
 8000a60:	0003      	movs	r3, r0
 8000a62:	001a      	movs	r2, r3
 8000a64:	4b44      	ldr	r3, [pc, #272]	@ (8000b78 <ProcessComand+0x164>)
 8000a66:	701a      	strb	r2, [r3, #0]
		while(MB_State != 0)
 8000a68:	4b43      	ldr	r3, [pc, #268]	@ (8000b78 <ProcessComand+0x164>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f1      	bne.n	8000a54 <ProcessComand+0x40>
		}
		SetButton(1);// Короткое нажатие
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fbfb 	bl	800026c <SetButton>
		CloseKey();
 8000a76:	f7ff fbe5 	bl	8000244 <CloseKey>
		HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	@ 0x64
 8000a7c:	f000 faea 	bl	8001054 <HAL_Delay>
		// HAL_GPIO_WritePin(MCU_HOS_ON_GPIO_Port, MCU_HOS_ON_Pin, SET);
		//HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
		flag_receive = 0;
 8000a80:	4b3e      	ldr	r3, [pc, #248]	@ (8000b7c <ProcessComand+0x168>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		Adapter_State = 0;
 8000a86:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <ProcessComand+0x16c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
		SetPWROK(HIGH);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fc15 	bl	80002bc <SetPWROK>
 8000a92:	e06c      	b.n	8000b6e <ProcessComand+0x15a>
	} else if (Command == PWR_ON && MB_State == 0)
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <ProcessComand+0x160>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d12f      	bne.n	8000afc <ProcessComand+0xe8>
 8000a9c:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <ProcessComand+0x164>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d12b      	bne.n	8000afc <ProcessComand+0xe8>
	{
		OpenKey();
 8000aa4:	f7ff fbba 	bl	800021c <OpenKey>
		HAL_Delay(500);
 8000aa8:	23fa      	movs	r3, #250	@ 0xfa
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fad1 	bl	8001054 <HAL_Delay>
		PressButton(200);
 8000ab2:	20c8      	movs	r0, #200	@ 0xc8
 8000ab4:	f7ff fbec 	bl	8000290 <PressButton>
		while(MB_State != 1)
 8000ab8:	e009      	b.n	8000ace <ProcessComand+0xba>
		{
			MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 8000aba:	23a0      	movs	r3, #160	@ 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	2104      	movs	r1, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fdb9 	bl	8001638 <HAL_GPIO_ReadPin>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <ProcessComand+0x164>)
 8000acc:	701a      	strb	r2, [r3, #0]
		while(MB_State != 1)
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <ProcessComand+0x164>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d1f1      	bne.n	8000aba <ProcessComand+0xa6>
		}
		SetPWROK(LOW);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fbf0 	bl	80002bc <SetPWROK>
		HAL_Delay(500);
 8000adc:	23fa      	movs	r3, #250	@ 0xfa
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fab7 	bl	8001054 <HAL_Delay>
		Adapter_State = 1;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <ProcessComand+0x16c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
		HAL_Delay(7000);
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <ProcessComand+0x170>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fab0 	bl	8001054 <HAL_Delay>
		flag_receive = 0;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <ProcessComand+0x168>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e038      	b.n	8000b6e <ProcessComand+0x15a>
	} else if (Command == REBOOT && MB_State == 1) {
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <ProcessComand+0x160>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d11d      	bne.n	8000b40 <ProcessComand+0x12c>
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <ProcessComand+0x164>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <ProcessComand+0x12c>
		SetButton(0); // Короткое нажатие
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fbad 	bl	800026c <SetButton>
		HAL_Delay(500);
 8000b12:	23fa      	movs	r3, #250	@ 0xfa
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fa9c 	bl	8001054 <HAL_Delay>
		SetPWROK(HIGH);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff fbcd 	bl	80002bc <SetPWROK>
		HAL_Delay(500);
 8000b22:	23fa      	movs	r3, #250	@ 0xfa
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fa94 	bl	8001054 <HAL_Delay>
		SetButton(GPIO_PIN_SET);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fb9d 	bl	800026c <SetButton>
		HAL_Delay(150);
 8000b32:	2096      	movs	r0, #150	@ 0x96
 8000b34:	f000 fa8e 	bl	8001054 <HAL_Delay>
		SetPWROK(LOW);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fbbf 	bl	80002bc <SetPWROK>
 8000b3e:	e016      	b.n	8000b6e <ProcessComand+0x15a>
	} else if (Command == HARD_RESET && MB_State == 1) {
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <ProcessComand+0x160>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d109      	bne.n	8000b5c <ProcessComand+0x148>
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <ProcessComand+0x164>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d105      	bne.n	8000b5c <ProcessComand+0x148>
		CloseKey();
 8000b50:	f7ff fb78 	bl	8000244 <CloseKey>
		SetPWROK(HIGH);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fbb1 	bl	80002bc <SetPWROK>
 8000b5a:	e008      	b.n	8000b6e <ProcessComand+0x15a>
	}else {
		HAL_Delay(300);
 8000b5c:	2396      	movs	r3, #150	@ 0x96
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fa77 	bl	8001054 <HAL_Delay>
		flag_receive = 0;
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <ProcessComand+0x168>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		return;
 8000b6c:	46c0      	nop			@ (mov r8, r8)
		}
}
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000124 	.word	0x20000124
 8000b78:	20000126 	.word	0x20000126
 8000b7c:	2000002c 	.word	0x2000002c
 8000b80:	20000125 	.word	0x20000125
 8000b84:	00001b58 	.word	0x00001b58

08000b88 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	flag_receive = 1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
	command_i2c = i2c_rx_buffer[0] & 0b11;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8000ba2:	701a      	strb	r2, [r3, #0]
	ProcessComand(command_i2c);
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <ProcessComand>
	HAL_I2C_Slave_Receive_IT(&hi2c2, i2c_rx_buffer, 1);
 8000bae:	4906      	ldr	r1, [pc, #24]	@ (8000bc8 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fe1f 	bl	80017f8 <HAL_I2C_Slave_Receive_IT>
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	2000012c 	.word	0x2000012c
 8000bcc:	20000128 	.word	0x20000128
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0549      	lsls	r1, r1, #21
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	055b      	lsls	r3, r3, #21
 8000c14:	4013      	ands	r3, r2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 fa3c 	bl	800109c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b099      	sub	sp, #100	@ 0x64
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	234c      	movs	r3, #76	@ 0x4c
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2314      	movs	r3, #20
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f004 fd04 	bl	8005650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	2418      	movs	r4, #24
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2334      	movs	r3, #52	@ 0x34
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f004 fcfc 	bl	8005650 <memset>
  if(hi2c->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d58 <HAL_I2C_MspInit+0x128>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d13f      	bne.n	8000ce2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2220      	movs	r2, #32
 8000c66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 fc23 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c7a:	f7ff ffab 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c82:	4b36      	ldr	r3, [pc, #216]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000c84:	2102      	movs	r1, #2
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c8a:	4b34      	ldr	r3, [pc, #208]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = FAN_I2C1_SDA_Pin|FAN_I2C1_SCL_Pin;
 8000c96:	214c      	movs	r1, #76	@ 0x4c
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	22c0      	movs	r2, #192	@ 0xc0
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2212      	movs	r2, #18
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <HAL_I2C_MspInit+0x130>)
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f000 fb56 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0389      	lsls	r1, r1, #14
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd2:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	039b      	lsls	r3, r3, #14
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ce0:	e036      	b.n	8000d50 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <HAL_I2C_MspInit+0x134>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d131      	bne.n	8000d50 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3_FAN_I2C2_SCL_Pin|U3_FAN_I2C2_SDA_Pin;
 8000d04:	214c      	movs	r1, #76	@ 0x4c
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	22c0      	movs	r2, #192	@ 0xc0
 8000d0a:	0152      	lsls	r2, r2, #5
 8000d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2212      	movs	r2, #18
 8000d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2206      	movs	r2, #6
 8000d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	23a0      	movs	r3, #160	@ 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fb1e 	bl	8001370 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	03c9      	lsls	r1, r1, #15
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_I2C_MspInit+0x12c>)
 8000d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d46:	2380      	movs	r3, #128	@ 0x80
 8000d48:	03db      	lsls	r3, r3, #15
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b019      	add	sp, #100	@ 0x64
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	50000400 	.word	0x50000400
 8000d64:	40005800 	.word	0x40005800

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b097      	sub	sp, #92	@ 0x5c
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	2344      	movs	r3, #68	@ 0x44
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	0018      	movs	r0, r3
 8000d76:	2314      	movs	r3, #20
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f004 fc68 	bl	8005650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	2410      	movs	r4, #16
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	2334      	movs	r3, #52	@ 0x34
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f004 fc60 	bl	8005650 <memset>
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a27      	ldr	r2, [pc, #156]	@ (8000e34 <HAL_TIM_Base_MspInit+0xcc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d148      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0xc4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	0392      	lsls	r2, r2, #14
 8000da0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	0018      	movs	r0, r3
 8000dac:	f003 fb86 	bl	80044bc <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000db4:	f7ff ff0e 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	0109      	lsls	r1, r1, #4
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_TIM_Base_MspInit+0xd0>)
 8000de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de4:	2201      	movs	r2, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dec:	2144      	movs	r1, #68	@ 0x44
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	0052      	lsls	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2202      	movs	r2, #2
 8000dfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	187a      	adds	r2, r7, r1
 8000e10:	23a0      	movs	r3, #160	@ 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 faaa 	bl	8001370 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	200e      	movs	r0, #14
 8000e22:	f000 f9fd 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e26:	200e      	movs	r0, #14
 8000e28:	f000 fa0f 	bl	800124a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b017      	add	sp, #92	@ 0x5c
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	40012c00 	.word	0x40012c00
 8000e38:	40021000 	.word	0x40021000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	e7fd      	b.n	8000e40 <NMI_Handler+0x4>

08000e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	e7fd      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f8da 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <TIM1_CC_IRQHandler+0x14>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f003 fd90 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	200000d8 	.word	0x200000d8

08000e88 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <I2C1_IRQHandler+0x2c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	23e0      	movs	r3, #224	@ 0xe0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	d004      	beq.n	8000ea4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <I2C1_IRQHandler+0x2c>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 feeb 	bl	8001c78 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000ea2:	e003      	b.n	8000eac <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <I2C1_IRQHandler+0x2c>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fecc 	bl	8001c44 <HAL_I2C_EV_IRQHandler>
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	20000030 	.word	0x20000030

08000eb8 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <I2C2_IRQHandler+0x2c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	23e0      	movs	r3, #224	@ 0xe0
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d004      	beq.n	8000ed4 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <I2C2_IRQHandler+0x2c>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fed3 	bl	8001c78 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000ed2:	e003      	b.n	8000edc <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <I2C2_IRQHandler+0x2c>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 feb4 	bl	8001c44 <HAL_I2C_EV_IRQHandler>
}
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	20000084 	.word	0x20000084

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef4:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef8:	f7ff fff6 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	@ (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	@ (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f22:	f004 fb9d 	bl	8005660 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f26:	f7ff f9e7 	bl	80002f8 <main>

08000f2a <LoopForever>:

LoopForever:
  b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f38:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8000f3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f40:	20000134 	.word	0x20000134

08000f44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_COMP_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_Init+0x3c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_Init+0x3c>)
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f810 	bl	8000f88 <HAL_InitTick>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fe34 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <HAL_InitTick+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d02b      	beq.n	8000ff8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_InitTick+0x8c>)
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_InitTick+0x88>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	0019      	movs	r1, r3
 8000faa:	23fa      	movs	r3, #250	@ 0xfa
 8000fac:	0098      	lsls	r0, r3, #2
 8000fae:	f7ff f8a9 	bl	8000104 <__udivsi3>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0020      	movs	r0, r4
 8000fb8:	f7ff f8a4 	bl	8000104 <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f953 	bl	800126a <HAL_SYSTICK_Config>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d112      	bne.n	8000fee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d80a      	bhi.n	8000fe4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 f922 	bl	8001220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_InitTick+0x90>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e00d      	b.n	8001000 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e008      	b.n	8001000 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e003      	b.n	8001000 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b005      	add	sp, #20
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000004 	.word	0x20000004
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	18d2      	adds	r2, r2, r3
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_IncTick+0x20>)
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000130 	.word	0x20000130

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	20000130 	.word	0x20000130

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff fff0 	bl	8001040 <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	189b      	adds	r3, r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	f7ff ffe0 	bl	8001040 <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	40010000 	.word	0x40010000
 80010c4:	fffff9ff 	.word	0xfffff9ff

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010da:	d809      	bhi.n	80010f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	231f      	movs	r3, #31
 80010e4:	401a      	ands	r2, r3
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <__NVIC_EnableIRQ+0x30>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	4091      	lsls	r1, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001110:	d828      	bhi.n	8001164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001112:	4a2f      	ldr	r2, [pc, #188]	@ (80011d0 <__NVIC_SetPriority+0xd4>)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	33c0      	adds	r3, #192	@ 0xc0
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	589b      	ldr	r3, [r3, r2]
 8001122:	1dfa      	adds	r2, r7, #7
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	0011      	movs	r1, r2
 8001128:	2203      	movs	r2, #3
 800112a:	400a      	ands	r2, r1
 800112c:	00d2      	lsls	r2, r2, #3
 800112e:	21ff      	movs	r1, #255	@ 0xff
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	43d2      	mvns	r2, r2
 8001136:	401a      	ands	r2, r3
 8001138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	401a      	ands	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	2303      	movs	r3, #3
 800114a:	4003      	ands	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <__NVIC_SetPriority+0xd4>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	430a      	orrs	r2, r1
 800115c:	33c0      	adds	r3, #192	@ 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001162:	e031      	b.n	80011c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0019      	movs	r1, r3
 800116c:	230f      	movs	r3, #15
 800116e:	400b      	ands	r3, r1
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3306      	adds	r3, #6
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	@ 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001c      	movs	r4, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	4023      	ands	r3, r4
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	430a      	orrs	r2, r1
 80011be:	3306      	adds	r3, #6
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	18c3      	adds	r3, r0, r3
 80011c4:	3304      	adds	r3, #4
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d301      	bcc.n	80011f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ec:	2301      	movs	r3, #1
 80011ee:	e010      	b.n	8001212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <SysTick_Config+0x44>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2103      	movs	r1, #3
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff7c 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x44>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	210f      	movs	r1, #15
 800122c:	187b      	adds	r3, r7, r1
 800122e:	1c02      	adds	r2, r0, #0
 8001230:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	0002      	movs	r2, r0
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ff33 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ffaf 	bl	80011d8 <SysTick_Config>
 800127a:	0003      	movs	r3, r0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128c:	210f      	movs	r1, #15
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2225      	movs	r2, #37	@ 0x25
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d006      	beq.n	80012ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2204      	movs	r2, #4
 80012a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e049      	b.n	8001342 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	210e      	movs	r1, #14
 80012ba:	438a      	bics	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	491d      	ldr	r1, [pc, #116]	@ (8001350 <HAL_DMA_Abort_IT+0xcc>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012de:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_DMA_Abort_IT+0xd0>)
 80012e0:	6859      	ldr	r1, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	221c      	movs	r2, #28
 80012e8:	4013      	ands	r3, r2
 80012ea:	2201      	movs	r2, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_DMA_Abort_IT+0xd0>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001310:	490f      	ldr	r1, [pc, #60]	@ (8001350 <HAL_DMA_Abort_IT+0xcc>)
 8001312:	400a      	ands	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800131e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2225      	movs	r2, #37	@ 0x25
 8001324:	2101      	movs	r1, #1
 8001326:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2224      	movs	r2, #36	@ 0x24
 800132c:	2100      	movs	r1, #0
 800132e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	0010      	movs	r0, r2
 8001340:	4798      	blx	r3
    }
  }
  return status;
 8001342:	230f      	movs	r3, #15
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b004      	add	sp, #16
 800134e:	bd80      	pop	{r7, pc}
 8001350:	fffffeff 	.word	0xfffffeff
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2225      	movs	r2, #37	@ 0x25
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2db      	uxtb	r3, r3
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e147      	b.n	8001610 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4091      	lsls	r1, r2
 800138a:	000a      	movs	r2, r1
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d100      	bne.n	8001398 <HAL_GPIO_Init+0x28>
 8001396:	e138      	b.n	800160a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	2201      	movs	r2, #1
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	4013      	ands	r3, r2
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	58d3      	ldr	r3, [r2, r3]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2207      	movs	r2, #7
 800146c:	4013      	ands	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2107      	movs	r1, #7
 8001486:	400b      	ands	r3, r1
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	6939      	ldr	r1, [r7, #16]
 80014a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	401a      	ands	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	23c0      	movs	r3, #192	@ 0xc0
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	4013      	ands	r3, r2
 80014e0:	d100      	bne.n	80014e4 <HAL_GPIO_Init+0x174>
 80014e2:	e092      	b.n	800160a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014e4:	4a50      	ldr	r2, [pc, #320]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3318      	adds	r3, #24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	589b      	ldr	r3, [r3, r2]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	220f      	movs	r2, #15
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	23a0      	movs	r3, #160	@ 0xa0
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	429a      	cmp	r2, r3
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x1ca>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a45      	ldr	r2, [pc, #276]	@ (800162c <HAL_GPIO_Init+0x2bc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x1c6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a44      	ldr	r2, [pc, #272]	@ (8001630 <HAL_GPIO_Init+0x2c0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x1c2>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a43      	ldr	r2, [pc, #268]	@ (8001634 <HAL_GPIO_Init+0x2c4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x1be>
 800152a:	2303      	movs	r3, #3
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x1cc>
 800152e:	2305      	movs	r3, #5
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x1cc>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x1cc>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x1cc>
 800153a:	2300      	movs	r3, #0
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	2103      	movs	r1, #3
 8001540:	400a      	ands	r2, r1
 8001542:	00d2      	lsls	r2, r2, #3
 8001544:	4093      	lsls	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800154c:	4936      	ldr	r1, [pc, #216]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3318      	adds	r3, #24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	035b      	lsls	r3, r3, #13
 8001572:	4013      	ands	r3, r2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157e:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	039b      	lsls	r3, r3, #14
 800159c:	4013      	ands	r3, r2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 80015b0:	2384      	movs	r3, #132	@ 0x84
 80015b2:	58d3      	ldr	r3, [r2, r3]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	4013      	ands	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d4:	4914      	ldr	r1, [pc, #80]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 80015d6:	2284      	movs	r2, #132	@ 0x84
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	58d3      	ldr	r3, [r2, r3]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001602:	4909      	ldr	r1, [pc, #36]	@ (8001628 <HAL_GPIO_Init+0x2b8>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	40da      	lsrs	r2, r3
 8001618:	1e13      	subs	r3, r2, #0
 800161a:	d000      	beq.n	800161e <HAL_GPIO_Init+0x2ae>
 800161c:	e6b0      	b.n	8001380 <HAL_GPIO_Init+0x10>
  }
}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021800 	.word	0x40021800
 800162c:	50000400 	.word	0x50000400
 8001630:	50000800 	.word	0x50000800
 8001634:	50000c00 	.word	0x50000c00

08001638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	000a      	movs	r2, r1
 8001642:	1cbb      	adds	r3, r7, #2
 8001644:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	1cba      	adds	r2, r7, #2
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	4013      	ands	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001652:	230f      	movs	r3, #15
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	e003      	b.n	8001664 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	0008      	movs	r0, r1
 800167c:	0011      	movs	r1, r2
 800167e:	1cbb      	adds	r3, r7, #2
 8001680:	1c02      	adds	r2, r0, #0
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	1c7b      	adds	r3, r7, #1
 8001686:	1c0a      	adds	r2, r1, #0
 8001688:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168a:	1c7b      	adds	r3, r7, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169a:	e003      	b.n	80016a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016a4:	46c0      	nop			@ (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e08f      	b.n	80017de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2241      	movs	r2, #65	@ 0x41
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2240      	movs	r2, #64	@ 0x40
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff faab 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2241      	movs	r2, #65	@ 0x41
 80016de:	2124      	movs	r1, #36	@ 0x24
 80016e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	493b      	ldr	r1, [pc, #236]	@ (80017e8 <HAL_I2C_Init+0x13c>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4938      	ldr	r1, [pc, #224]	@ (80017ec <HAL_I2C_Init+0x140>)
 800170c:	400a      	ands	r2, r1
 800170e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2180      	movs	r1, #128	@ 0x80
 8001722:	0209      	lsls	r1, r1, #8
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e007      	b.n	800173a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2184      	movs	r1, #132	@ 0x84
 8001734:	0209      	lsls	r1, r1, #8
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d109      	bne.n	8001756 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0109      	lsls	r1, r1, #4
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	e007      	b.n	8001766 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4923      	ldr	r1, [pc, #140]	@ (80017f0 <HAL_I2C_Init+0x144>)
 8001762:	400a      	ands	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4920      	ldr	r1, [pc, #128]	@ (80017f4 <HAL_I2C_Init+0x148>)
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	491a      	ldr	r1, [pc, #104]	@ (80017ec <HAL_I2C_Init+0x140>)
 8001782:	400a      	ands	r2, r1
 8001784:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	431a      	orrs	r2, r3
 8001790:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69d9      	ldr	r1, [r3, #28]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1a      	ldr	r2, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2241      	movs	r2, #65	@ 0x41
 80017ca:	2120      	movs	r1, #32
 80017cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2242      	movs	r2, #66	@ 0x42
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	f0ffffff 	.word	0xf0ffffff
 80017ec:	ffff7fff 	.word	0xffff7fff
 80017f0:	fffff7ff 	.word	0xfffff7ff
 80017f4:	02008000 	.word	0x02008000

080017f8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	1dbb      	adds	r3, r7, #6
 8001804:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2241      	movs	r2, #65	@ 0x41
 800180a:	5c9b      	ldrb	r3, [r3, r2]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	d13b      	bne.n	800188a <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2240      	movs	r2, #64	@ 0x40
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_I2C_Slave_Receive_IT+0x28>
 800181c:	2302      	movs	r3, #2
 800181e:	e035      	b.n	800188c <HAL_I2C_Slave_Receive_IT+0x94>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	2101      	movs	r1, #1
 8001826:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2241      	movs	r2, #65	@ 0x41
 800182c:	2122      	movs	r1, #34	@ 0x22
 800182e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2242      	movs	r2, #66	@ 0x42
 8001834:	2120      	movs	r1, #32
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4912      	ldr	r1, [pc, #72]	@ (8001894 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800184a:	400a      	ands	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1dba      	adds	r2, r7, #6
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <HAL_I2C_Slave_Receive_IT+0xa0>)
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_I2C_Slave_Receive_IT+0xa4>)
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2240      	movs	r2, #64	@ 0x40
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_I2C_Slave_Receive_IT+0xa8>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f001 ffb1 	bl	80037e8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800188a:	2302      	movs	r3, #2
  }
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b004      	add	sp, #16
 8001892:	bd80      	pop	{r7, pc}
 8001894:	ffff7fff 	.word	0xffff7fff
 8001898:	ffff0000 	.word	0xffff0000
 800189c:	08002011 	.word	0x08002011
 80018a0:	00008002 	.word	0x00008002

080018a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	000c      	movs	r4, r1
 80018ae:	0010      	movs	r0, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	230a      	movs	r3, #10
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	1c22      	adds	r2, r4, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	2308      	movs	r3, #8
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	1c0a      	adds	r2, r1, #0
 80018c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2241      	movs	r2, #65	@ 0x41
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d000      	beq.n	80018d6 <HAL_I2C_Mem_Write+0x32>
 80018d4:	e10c      	b.n	8001af0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_I2C_Mem_Write+0x42>
 80018dc:	232c      	movs	r3, #44	@ 0x2c
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0ff      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2240      	movs	r2, #64	@ 0x40
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_I2C_Mem_Write+0x5c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e0f8      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2240      	movs	r2, #64	@ 0x40
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001908:	f7ff fb9a 	bl	8001040 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	0219      	lsls	r1, r3, #8
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2319      	movs	r3, #25
 800191c:	2201      	movs	r2, #1
 800191e:	f001 fd4f 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8001922:	1e03      	subs	r3, r0, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e3      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2241      	movs	r2, #65	@ 0x41
 800192e:	2121      	movs	r1, #33	@ 0x21
 8001930:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2242      	movs	r2, #66	@ 0x42
 8001936:	2140      	movs	r1, #64	@ 0x40
 8001938:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	222c      	movs	r2, #44	@ 0x2c
 800194a:	18ba      	adds	r2, r7, r2
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001956:	1dbb      	adds	r3, r7, #6
 8001958:	881c      	ldrh	r4, [r3, #0]
 800195a:	2308      	movs	r3, #8
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	881a      	ldrh	r2, [r3, #0]
 8001960:	230a      	movs	r3, #10
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f000 ff5d 	bl	8002830 <I2C_RequestMemoryWrite>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d005      	beq.n	8001986 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2240      	movs	r2, #64	@ 0x40
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0b5      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	2bff      	cmp	r3, #255	@ 0xff
 800198e:	d911      	bls.n	80019b4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	22ff      	movs	r2, #255	@ 0xff
 8001994:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199a:	b2da      	uxtb	r2, r3
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	045c      	lsls	r4, r3, #17
 80019a0:	230a      	movs	r3, #10
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	0023      	movs	r3, r4
 80019ae:	f001 fee1 	bl	8003774 <I2C_TransferConfig>
 80019b2:	e012      	b.n	80019da <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	049c      	lsls	r4, r3, #18
 80019c8:	230a      	movs	r3, #10
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	8819      	ldrh	r1, [r3, #0]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	0023      	movs	r3, r4
 80019d6:	f001 fecd 	bl	8003774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f001 fd45 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e081      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d03a      	beq.n	8001a9e <HAL_I2C_Mem_Write+0x1fa>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d136      	bne.n	8001a9e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	0013      	movs	r3, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	f001 fcbf 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e053      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2bff      	cmp	r3, #255	@ 0xff
 8001a52:	d911      	bls.n	8001a78 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	22ff      	movs	r2, #255	@ 0xff
 8001a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	045c      	lsls	r4, r3, #17
 8001a64:	230a      	movs	r3, #10
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	0023      	movs	r3, r4
 8001a72:	f001 fe7f 	bl	8003774 <I2C_TransferConfig>
 8001a76:	e012      	b.n	8001a9e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	049c      	lsls	r4, r3, #18
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	8819      	ldrh	r1, [r3, #0]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	0023      	movs	r3, r4
 8001a9a:	f001 fe6b 	bl	8003774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d198      	bne.n	80019da <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f001 fd24 	bl	80034fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e01a      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	490b      	ldr	r1, [pc, #44]	@ (8001afc <HAL_I2C_Mem_Write+0x258>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2241      	movs	r2, #65	@ 0x41
 8001ad8:	2120      	movs	r1, #32
 8001ada:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2242      	movs	r2, #66	@ 0x42
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b007      	add	sp, #28
 8001af8:	bd90      	pop	{r4, r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	fe00e800 	.word	0xfe00e800

08001b00 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	000c      	movs	r4, r1
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	230a      	movs	r3, #10
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	1c22      	adds	r2, r4, #0
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	1c02      	adds	r2, r0, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	1c0a      	adds	r2, r1, #0
 8001b22:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2241      	movs	r2, #65	@ 0x41
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d000      	beq.n	8001b32 <HAL_I2C_Mem_Write_IT+0x32>
 8001b30:	e07d      	b.n	8001c2e <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_I2C_Mem_Write_IT+0x42>
 8001b38:	2324      	movs	r3, #36	@ 0x24
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e070      	b.n	8001c30 <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e064      	b.n	8001c30 <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2240      	movs	r2, #64	@ 0x40
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2C_Mem_Write_IT+0x74>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e05d      	b.n	8001c30 <HAL_I2C_Mem_Write_IT+0x130>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2241      	movs	r2, #65	@ 0x41
 8001b80:	2121      	movs	r1, #33	@ 0x21
 8001b82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2242      	movs	r2, #66	@ 0x42
 8001b88:	2140      	movs	r1, #64	@ 0x40
 8001b8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a3a      	ldr	r2, [r7, #32]
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2224      	movs	r2, #36	@ 0x24
 8001ba2:	18ba      	adds	r2, r7, r2
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <HAL_I2C_Mem_Write_IT+0x138>)
 8001bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <HAL_I2C_Mem_Write_IT+0x13c>)
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10b      	bne.n	8001bde <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4252      	negs	r2, r2
 8001bda:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bdc:	e00e      	b.n	8001bfc <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bde:	2108      	movs	r1, #8
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bfc:	1dbb      	adds	r3, r7, #6
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	045c      	lsls	r4, r3, #17
 8001c06:	230a      	movs	r3, #10
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	8819      	ldrh	r1, [r3, #0]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_I2C_Mem_Write_IT+0x140>)
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	0023      	movs	r3, r4
 8001c14:	f001 fdae 	bl	8003774 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2101      	movs	r1, #1
 8001c24:	0018      	movs	r0, r3
 8001c26:	f001 fddf 	bl	80037e8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b005      	add	sp, #20
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	ffff0000 	.word	0xffff0000
 8001c3c:	08001dcd 	.word	0x08001dcd
 8001c40:	80002000 	.word	0x80002000

08001c44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	68f9      	ldr	r1, [r7, #12]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
  }
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b004      	add	sp, #16
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2280      	movs	r2, #128	@ 0x80
 8001c9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	0052      	lsls	r2, r2, #1
 8001cb6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	2208      	movs	r2, #8
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	00d2      	lsls	r2, r2, #3
 8001cde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001cf0:	d00a      	beq.n	8001d08 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	220b      	movs	r2, #11
 8001d12:	4013      	ands	r3, r2
 8001d14:	d005      	beq.n	8001d22 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f001 f9e3 	bl	80030e8 <I2C_ITError>
  }
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b006      	add	sp, #24
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	0008      	movs	r0, r1
 8001d64:	0011      	movs	r1, r2
 8001d66:	1cfb      	adds	r3, r7, #3
 8001d68:	1c02      	adds	r2, r0, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	003b      	movs	r3, r7
 8001d6e:	1c0a      	adds	r2, r1, #0
 8001d70:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b002      	add	sp, #8
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001dd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002008 <I2C_Mem_ISR_IT+0x23c>)
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	5c9b      	ldrb	r3, [r3, r2]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <I2C_Mem_ISR_IT+0x22>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e107      	b.n	8001ffe <I2C_Mem_ISR_IT+0x232>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2240      	movs	r2, #64	@ 0x40
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d012      	beq.n	8001e24 <I2C_Mem_ISR_IT+0x58>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2210      	movs	r2, #16
 8001e02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e04:	d00e      	beq.n	8001e24 <I2C_Mem_ISR_IT+0x58>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	2204      	movs	r2, #4
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f001 fa8e 	bl	800333e <I2C_Flush_TXDR>
 8001e22:	e0d9      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d021      	beq.n	8001e70 <I2C_Mem_ISR_IT+0xa4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e32:	d01d      	beq.n	8001e70 <I2C_Mem_ISR_IT+0xa4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2204      	movs	r2, #4
 8001e38:	4393      	bics	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e6e:	e0b3      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d02a      	beq.n	8001ece <I2C_Mem_ISR_IT+0x102>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e7e:	d026      	beq.n	8001ece <I2C_Mem_ISR_IT+0x102>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e84:	3301      	adds	r3, #1
 8001e86:	d118      	bne.n	8001eba <I2C_Mem_ISR_IT+0xee>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001eb8:	e08e      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4252      	negs	r2, r2
 8001eca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8001ecc:	e084      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d03c      	beq.n	8001f50 <I2C_Mem_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2240      	movs	r2, #64	@ 0x40
 8001eda:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001edc:	d038      	beq.n	8001f50 <I2C_Mem_ISR_IT+0x184>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02c      	beq.n	8001f42 <I2C_Mem_ISR_IT+0x176>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d128      	bne.n	8001f42 <I2C_Mem_ISR_IT+0x176>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2bff      	cmp	r3, #255	@ 0xff
 8001ef8:	d910      	bls.n	8001f1c <I2C_Mem_ISR_IT+0x150>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	22ff      	movs	r2, #255	@ 0xff
 8001efe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f04:	b299      	uxth	r1, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	045b      	lsls	r3, r3, #17
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	2400      	movs	r4, #0
 8001f14:	9400      	str	r4, [sp, #0]
 8001f16:	f001 fc2d 	bl	8003774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f1a:	e018      	b.n	8001f4e <I2C_Mem_ISR_IT+0x182>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	2400      	movs	r4, #0
 8001f3a:	9400      	str	r4, [sp, #0]
 8001f3c:	f001 fc1a 	bl	8003774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	e005      	b.n	8001f4e <I2C_Mem_ISR_IT+0x182>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2140      	movs	r1, #64	@ 0x40
 8001f46:	0018      	movs	r0, r3
 8001f48:	f001 f8ce 	bl	80030e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f4c:	e044      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
 8001f4e:	e043      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	4013      	ands	r3, r2
 8001f56:	d03f      	beq.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	@ 0x40
 8001f5c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001f5e:	d03b      	beq.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2101      	movs	r1, #1
 8001f64:	0018      	movs	r0, r3
 8001f66:	f001 fcc9 	bl	80038fc <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f001 fc3a 	bl	80037e8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2241      	movs	r2, #65	@ 0x41
 8001f78:	5c9b      	ldrb	r3, [r3, r2]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b22      	cmp	r3, #34	@ 0x22
 8001f7e:	d101      	bne.n	8001f84 <I2C_Mem_ISR_IT+0x1b8>
    {
      direction = I2C_GENERATE_START_READ;
 8001f80:	4b22      	ldr	r3, [pc, #136]	@ (800200c <I2C_Mem_ISR_IT+0x240>)
 8001f82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2bff      	cmp	r3, #255	@ 0xff
 8001f8c:	d911      	bls.n	8001fb2 <I2C_Mem_ISR_IT+0x1e6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	@ 0xff
 8001f92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	045c      	lsls	r4, r3, #17
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	0023      	movs	r3, r4
 8001fac:	f001 fbe2 	bl	8003774 <I2C_TransferConfig>
 8001fb0:	e012      	b.n	8001fd8 <I2C_Mem_ISR_IT+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	049c      	lsls	r4, r3, #18
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	0023      	movs	r3, r4
 8001fd4:	f001 fbce 	bl	8003774 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <I2C_Mem_ISR_IT+0x228>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fe6:	d005      	beq.n	8001ff4 <I2C_Mem_ISR_IT+0x228>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0011      	movs	r1, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 fdcc 	bl	8002b8c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2240      	movs	r2, #64	@ 0x40
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b007      	add	sp, #28
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	80002000 	.word	0x80002000
 800200c:	80002400 	.word	0x80002400

08002010 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <I2C_Slave_ISR_IT+0x24>
 8002030:	2302      	movs	r3, #2
 8002032:	e0e7      	b.n	8002204 <I2C_Slave_ISR_IT+0x1f4>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2220      	movs	r2, #32
 8002040:	4013      	ands	r3, r2
 8002042:	d00a      	beq.n	800205a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800204a:	d006      	beq.n	800205a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fe68 	bl	8002d28 <I2C_ITSlaveCplt>
 8002058:	e0cf      	b.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2210      	movs	r2, #16
 800205e:	4013      	ands	r3, r2
 8002060:	d052      	beq.n	8002108 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2210      	movs	r2, #16
 8002066:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002068:	d04e      	beq.n	8002108 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12d      	bne.n	80020d0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2241      	movs	r2, #65	@ 0x41
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b28      	cmp	r3, #40	@ 0x28
 800207e:	d10b      	bne.n	8002098 <I2C_Slave_ISR_IT+0x88>
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	049b      	lsls	r3, r3, #18
 8002086:	429a      	cmp	r2, r3
 8002088:	d106      	bne.n	8002098 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f000 ffd1 	bl	8003038 <I2C_ITListenCplt>
 8002096:	e036      	b.n	8002106 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	@ 0x41
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b29      	cmp	r3, #41	@ 0x29
 80020a2:	d110      	bne.n	80020c6 <I2C_Slave_ISR_IT+0xb6>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4a59      	ldr	r2, [pc, #356]	@ (800220c <I2C_Slave_ISR_IT+0x1fc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00c      	beq.n	80020c6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f001 f941 	bl	800333e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fd00 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
 80020c4:	e01f      	b.n	8002106 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2210      	movs	r2, #16
 80020cc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80020ce:	e091      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2210      	movs	r2, #16
 80020d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	2204      	movs	r2, #4
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <I2C_Slave_ISR_IT+0xe6>
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	2380      	movs	r3, #128	@ 0x80
 80020ee:	045b      	lsls	r3, r3, #17
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d000      	beq.n	80020f6 <I2C_Slave_ISR_IT+0xe6>
 80020f4:	e07e      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 fff2 	bl	80030e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002104:	e076      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e4>
 8002106:	e075      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d02f      	beq.n	8002170 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2204      	movs	r2, #4
 8002114:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002116:	d02b      	beq.n	8002170 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d018      	beq.n	8002154 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d14c      	bne.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4a2a      	ldr	r2, [pc, #168]	@ (800220c <I2C_Slave_ISR_IT+0x1fc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d048      	beq.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 fcab 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800216e:	e043      	b.n	80021f8 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2208      	movs	r2, #8
 8002174:	4013      	ands	r3, r2
 8002176:	d00a      	beq.n	800218e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2208      	movs	r2, #8
 800217c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800217e:	d006      	beq.n	800218e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0011      	movs	r1, r2
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fbb6 	bl	80028f8 <I2C_ITAddrCplt>
 800218c:	e035      	b.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d031      	beq.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800219c:	d02d      	beq.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80021d8:	e00f      	b.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	045b      	lsls	r3, r3, #17
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d002      	beq.n	80021ea <I2C_Slave_ISR_IT+0x1da>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fc69 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
 80021f2:	e002      	b.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	e000      	b.n	80021fa <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80021f8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2240      	movs	r2, #64	@ 0x40
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b006      	add	sp, #24
 800220a:	bd80      	pop	{r7, pc}
 800220c:	ffff0000 	.word	0xffff0000

08002210 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <I2C_Master_ISR_DMA+0x1a>
 8002226:	2302      	movs	r3, #2
 8002228:	e0e7      	b.n	80023fa <I2C_Master_ISR_DMA+0x1ea>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2240      	movs	r2, #64	@ 0x40
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2210      	movs	r2, #16
 8002236:	4013      	ands	r3, r2
 8002238:	d017      	beq.n	800226a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2210      	movs	r2, #16
 800223e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002240:	d013      	beq.n	800226a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2210      	movs	r2, #16
 8002248:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	2204      	movs	r2, #4
 8002250:	431a      	orrs	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2120      	movs	r1, #32
 800225a:	0018      	movs	r0, r3
 800225c:	f001 fac4 	bl	80037e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	0018      	movs	r0, r3
 8002264:	f001 f86b 	bl	800333e <I2C_Flush_TXDR>
 8002268:	e0c2      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	4013      	ands	r3, r2
 8002270:	d100      	bne.n	8002274 <I2C_Master_ISR_DMA+0x64>
 8002272:	e07c      	b.n	800236e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800227a:	d100      	bne.n	800227e <I2C_Master_ISR_DMA+0x6e>
 800227c:	e077      	b.n	800236e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2140      	movs	r1, #64	@ 0x40
 800228a:	438a      	bics	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d055      	beq.n	8002344 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2312      	movs	r3, #18
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	0592      	lsls	r2, r2, #22
 80022a6:	0d92      	lsrs	r2, r2, #22
 80022a8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2bff      	cmp	r3, #255	@ 0xff
 80022b2:	d906      	bls.n	80022c2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	@ 0xff
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	045b      	lsls	r3, r3, #17
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e010      	b.n	80022e4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002404 <I2C_Master_ISR_DMA+0x1f4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e002      	b.n	80022e4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	049b      	lsls	r3, r3, #18
 80022e2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	697c      	ldr	r4, [r7, #20]
 80022ec:	2312      	movs	r3, #18
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	8819      	ldrh	r1, [r3, #0]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	0023      	movs	r3, r4
 80022fa:	f001 fa3b 	bl	8003774 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2241      	movs	r2, #65	@ 0x41
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b22      	cmp	r3, #34	@ 0x22
 800231a:	d109      	bne.n	8002330 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2180      	movs	r1, #128	@ 0x80
 8002328:	0209      	lsls	r1, r1, #8
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800232e:	e05f      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	01c9      	lsls	r1, r1, #7
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002342:	e055      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	049b      	lsls	r3, r3, #18
 800234e:	401a      	ands	r2, r3
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	049b      	lsls	r3, r3, #18
 8002354:	429a      	cmp	r2, r3
 8002356:	d004      	beq.n	8002362 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 fb70 	bl	8002a40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002360:	e046      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2140      	movs	r1, #64	@ 0x40
 8002366:	0018      	movs	r0, r3
 8002368:	f000 febe 	bl	80030e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800236c:	e040      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2240      	movs	r2, #64	@ 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	d02c      	beq.n	80023d0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2240      	movs	r2, #64	@ 0x40
 800237a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800237c:	d028      	beq.n	80023d0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	049b      	lsls	r3, r3, #18
 8002392:	401a      	ands	r2, r3
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	049b      	lsls	r3, r3, #18
 8002398:	429a      	cmp	r2, r3
 800239a:	d028      	beq.n	80023ee <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	4a18      	ldr	r2, [pc, #96]	@ (8002404 <I2C_Master_ISR_DMA+0x1f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d109      	bne.n	80023ba <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	01c9      	lsls	r1, r1, #7
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80023b8:	e019      	b.n	80023ee <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fb3f 	bl	8002a40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80023c2:	e014      	b.n	80023ee <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2140      	movs	r1, #64	@ 0x40
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fe8d 	bl	80030e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023ce:	e00e      	b.n	80023ee <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2220      	movs	r2, #32
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023de:	d007      	beq.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fbd0 	bl	8002b8c <I2C_ITMasterCplt>
 80023ec:	e000      	b.n	80023f0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80023ee:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b007      	add	sp, #28
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	ffff0000 	.word	0xffff0000

08002408 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002414:	4b90      	ldr	r3, [pc, #576]	@ (8002658 <I2C_Mem_ISR_DMA+0x250>)
 8002416:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <I2C_Mem_ISR_DMA+0x1e>
 8002422:	2302      	movs	r3, #2
 8002424:	e113      	b.n	800264e <I2C_Mem_ISR_DMA+0x246>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2210      	movs	r2, #16
 8002432:	4013      	ands	r3, r2
 8002434:	d017      	beq.n	8002466 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2210      	movs	r2, #16
 800243a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800243c:	d013      	beq.n	8002466 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	2204      	movs	r2, #4
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2120      	movs	r1, #32
 8002456:	0018      	movs	r0, r3
 8002458:	f001 f9c6 	bl	80037e8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 ff6d 	bl	800333e <I2C_Flush_TXDR>
 8002464:	e0ee      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d00d      	beq.n	800248a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002474:	d009      	beq.n	800248a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	4252      	negs	r2, r2
 8002486:	651a      	str	r2, [r3, #80]	@ 0x50
 8002488:	e0dc      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	4013      	ands	r3, r2
 8002490:	d063      	beq.n	800255a <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2240      	movs	r2, #64	@ 0x40
 8002496:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002498:	d05f      	beq.n	800255a <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2101      	movs	r1, #1
 800249e:	0018      	movs	r0, r3
 80024a0:	f001 fa2c 	bl	80038fc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2110      	movs	r1, #16
 80024a8:	0018      	movs	r0, r3
 80024aa:	f001 f99d 	bl	80037e8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d04a      	beq.n	800254e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	@ 0xff
 80024c0:	d910      	bls.n	80024e4 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	22ff      	movs	r2, #255	@ 0xff
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024cc:	b299      	uxth	r1, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	045b      	lsls	r3, r3, #17
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	2400      	movs	r4, #0
 80024dc:	9400      	str	r4, [sp, #0]
 80024de:	f001 f949 	bl	8003774 <I2C_TransferConfig>
 80024e2:	e011      	b.n	8002508 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	b299      	uxth	r1, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	2400      	movs	r4, #0
 8002502:	9400      	str	r4, [sp, #0]
 8002504:	f001 f936 	bl	8003774 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2241      	movs	r2, #65	@ 0x41
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b22      	cmp	r3, #34	@ 0x22
 8002524:	d109      	bne.n	800253a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2180      	movs	r1, #128	@ 0x80
 8002532:	0209      	lsls	r1, r1, #8
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002538:	e084      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	01c9      	lsls	r1, r1, #7
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800254c:	e07a      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2140      	movs	r1, #64	@ 0x40
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fdc8 	bl	80030e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002558:	e074      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2240      	movs	r2, #64	@ 0x40
 800255e:	4013      	ands	r3, r2
 8002560:	d062      	beq.n	8002628 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2240      	movs	r2, #64	@ 0x40
 8002566:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002568:	d05e      	beq.n	8002628 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2101      	movs	r1, #1
 800256e:	0018      	movs	r0, r3
 8002570:	f001 f9c4 	bl	80038fc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2110      	movs	r1, #16
 8002578:	0018      	movs	r0, r3
 800257a:	f001 f935 	bl	80037e8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2241      	movs	r2, #65	@ 0x41
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b22      	cmp	r3, #34	@ 0x22
 8002588:	d101      	bne.n	800258e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <I2C_Mem_ISR_DMA+0x254>)
 800258c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2bff      	cmp	r3, #255	@ 0xff
 8002596:	d911      	bls.n	80025bc <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	22ff      	movs	r2, #255	@ 0xff
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	b299      	uxth	r1, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	045c      	lsls	r4, r3, #17
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0023      	movs	r3, r4
 80025b6:	f001 f8dd 	bl	8003774 <I2C_TransferConfig>
 80025ba:	e012      	b.n	80025e2 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	b299      	uxth	r1, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	049c      	lsls	r4, r3, #18
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	0023      	movs	r3, r4
 80025de:	f001 f8c9 	bl	8003774 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2241      	movs	r2, #65	@ 0x41
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b22      	cmp	r3, #34	@ 0x22
 80025fe:	d109      	bne.n	8002614 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	0209      	lsls	r1, r1, #8
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002612:	e017      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	01c9      	lsls	r1, r1, #7
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002626:	e00d      	b.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2220      	movs	r2, #32
 800262c:	4013      	ands	r3, r2
 800262e:	d009      	beq.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002636:	d005      	beq.n	8002644 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0011      	movs	r1, r2
 800263e:	0018      	movs	r0, r3
 8002640:	f000 faa4 	bl	8002b8c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b007      	add	sp, #28
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	80002000 	.word	0x80002000
 800265c:	80002400 	.word	0x80002400

08002660 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2240      	movs	r2, #64	@ 0x40
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <I2C_Slave_ISR_DMA+0x24>
 8002680:	2302      	movs	r3, #2
 8002682:	e0ce      	b.n	8002822 <I2C_Slave_ISR_DMA+0x1c2>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2240      	movs	r2, #64	@ 0x40
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d00a      	beq.n	80026aa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800269a:	d006      	beq.n	80026aa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 fb40 	bl	8002d28 <I2C_ITSlaveCplt>
 80026a8:	e0b6      	b.n	8002818 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2210      	movs	r2, #16
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <I2C_Slave_ISR_DMA+0x54>
 80026b2:	e0a3      	b.n	80027fc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2210      	movs	r2, #16
 80026b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026ba:	d100      	bne.n	80026be <I2C_Slave_ISR_DMA+0x5e>
 80026bc:	e09e      	b.n	80027fc <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	01db      	lsls	r3, r3, #7
 80026c4:	4013      	ands	r3, r2
 80026c6:	d105      	bne.n	80026d4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026d0:	d100      	bne.n	80026d4 <I2C_Slave_ISR_DMA+0x74>
 80026d2:	e08c      	b.n	80027ee <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4013      	ands	r3, r2
 80026e4:	d007      	beq.n	80026f6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	01db      	lsls	r3, r3, #7
 8002704:	4013      	ands	r3, r2
 8002706:	d007      	beq.n	8002718 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d12d      	bne.n	800277a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2241      	movs	r2, #65	@ 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b28      	cmp	r3, #40	@ 0x28
 8002728:	d10b      	bne.n	8002742 <I2C_Slave_ISR_DMA+0xe2>
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fc7c 	bl	8003038 <I2C_ITListenCplt>
 8002740:	e054      	b.n	80027ec <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2241      	movs	r2, #65	@ 0x41
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b29      	cmp	r3, #41	@ 0x29
 800274c:	d110      	bne.n	8002770 <I2C_Slave_ISR_DMA+0x110>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4a36      	ldr	r2, [pc, #216]	@ (800282c <I2C_Slave_ISR_DMA+0x1cc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00c      	beq.n	8002770 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fdec 	bl	800333e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f9ab 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
 800276e:	e03d      	b.n	80027ec <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002778:	e03e      	b.n	80027f8 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2210      	movs	r2, #16
 8002780:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	2204      	movs	r2, #4
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800278e:	2317      	movs	r3, #23
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	2141      	movs	r1, #65	@ 0x41
 8002796:	5c52      	ldrb	r2, [r2, r1]
 8002798:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <I2C_Slave_ISR_DMA+0x14a>
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	045b      	lsls	r3, r3, #17
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d126      	bne.n	80027f8 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027aa:	2217      	movs	r2, #23
 80027ac:	18bb      	adds	r3, r7, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b21      	cmp	r3, #33	@ 0x21
 80027b2:	d003      	beq.n	80027bc <I2C_Slave_ISR_DMA+0x15c>
 80027b4:	18bb      	adds	r3, r7, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b29      	cmp	r3, #41	@ 0x29
 80027ba:	d103      	bne.n	80027c4 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	@ 0x21
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c2:	e00b      	b.n	80027dc <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027c4:	2217      	movs	r2, #23
 80027c6:	18bb      	adds	r3, r7, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b22      	cmp	r3, #34	@ 0x22
 80027cc:	d003      	beq.n	80027d6 <I2C_Slave_ISR_DMA+0x176>
 80027ce:	18bb      	adds	r3, r7, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027d4:	d102      	bne.n	80027dc <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2222      	movs	r2, #34	@ 0x22
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fc7f 	bl	80030e8 <I2C_ITError>
      if (treatdmanack == 1U)
 80027ea:	e005      	b.n	80027f8 <I2C_Slave_ISR_DMA+0x198>
 80027ec:	e004      	b.n	80027f8 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027f6:	e00f      	b.n	8002818 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 80027f8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027fa:	e00d      	b.n	8002818 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2208      	movs	r2, #8
 8002800:	4013      	ands	r3, r2
 8002802:	d009      	beq.n	8002818 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2208      	movs	r2, #8
 8002808:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800280a:	d005      	beq.n	8002818 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0011      	movs	r1, r2
 8002812:	0018      	movs	r0, r3
 8002814:	f000 f870 	bl	80028f8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	@ 0x40
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b008      	add	sp, #32
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	ffff0000 	.word	0xffff0000

08002830 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	000c      	movs	r4, r1
 800283a:	0010      	movs	r0, r2
 800283c:	0019      	movs	r1, r3
 800283e:	250a      	movs	r5, #10
 8002840:	197b      	adds	r3, r7, r5
 8002842:	1c22      	adds	r2, r4, #0
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	2308      	movs	r3, #8
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	1c02      	adds	r2, r0, #0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	1dbb      	adds	r3, r7, #6
 8002850:	1c0a      	adds	r2, r1, #0
 8002852:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002854:	1dbb      	adds	r3, r7, #6
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	045c      	lsls	r4, r3, #17
 800285e:	197b      	adds	r3, r7, r5
 8002860:	8819      	ldrh	r1, [r3, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <I2C_RequestMemoryWrite+0xc4>)
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	0023      	movs	r3, r4
 800286a:	f000 ff83 	bl	8003774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fdfb 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d001      	beq.n	8002882 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e033      	b.n	80028ea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002882:	1dbb      	adds	r3, r7, #6
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800288a:	2308      	movs	r3, #8
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
 8002898:	e019      	b.n	80028ce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800289a:	2308      	movs	r3, #8
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ae:	6a39      	ldr	r1, [r7, #32]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 fddc 	bl	8003470 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e014      	b.n	80028ea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	2308      	movs	r3, #8
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	0013      	movs	r3, r2
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	@ 0x80
 80028dc:	f000 fd70 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bdb0      	pop	{r4, r5, r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	80002000 	.word	0x80002000

080028f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2241      	movs	r2, #65	@ 0x41
 8002906:	5c9b      	ldrb	r3, [r3, r2]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	001a      	movs	r2, r3
 800290c:	2328      	movs	r3, #40	@ 0x28
 800290e:	4013      	ands	r3, r2
 8002910:	2b28      	cmp	r3, #40	@ 0x28
 8002912:	d000      	beq.n	8002916 <I2C_ITAddrCplt+0x1e>
 8002914:	e088      	b.n	8002a28 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	b2da      	uxtb	r2, r3
 8002920:	250f      	movs	r5, #15
 8002922:	197b      	adds	r3, r7, r5
 8002924:	2101      	movs	r1, #1
 8002926:	400a      	ands	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	200c      	movs	r0, #12
 8002936:	183b      	adds	r3, r7, r0
 8002938:	21fe      	movs	r1, #254	@ 0xfe
 800293a:	400a      	ands	r2, r1
 800293c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	b29a      	uxth	r2, r3
 8002946:	240a      	movs	r4, #10
 8002948:	193b      	adds	r3, r7, r4
 800294a:	0592      	lsls	r2, r2, #22
 800294c:	0d92      	lsrs	r2, r2, #22
 800294e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	b29a      	uxth	r2, r3
 8002958:	2308      	movs	r3, #8
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	21fe      	movs	r1, #254	@ 0xfe
 800295e:	400a      	ands	r2, r1
 8002960:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d148      	bne.n	80029fc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800296a:	0021      	movs	r1, r4
 800296c:	187b      	adds	r3, r7, r1
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	09db      	lsrs	r3, r3, #7
 8002972:	b29a      	uxth	r2, r3
 8002974:	183b      	adds	r3, r7, r0
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	4053      	eors	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	001a      	movs	r2, r3
 800297e:	2306      	movs	r3, #6
 8002980:	4013      	ands	r3, r2
 8002982:	d120      	bne.n	80029c6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002984:	183b      	adds	r3, r7, r0
 8002986:	187a      	adds	r2, r7, r1
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299a:	2b02      	cmp	r3, #2
 800299c:	d14c      	bne.n	8002a38 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029b4:	183b      	adds	r3, r7, r0
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	197b      	adds	r3, r7, r5
 80029ba:	7819      	ldrb	r1, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff f9cb 	bl	8001d5a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029c4:	e038      	b.n	8002a38 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80029c6:	240c      	movs	r4, #12
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2208      	movs	r2, #8
 80029cc:	18ba      	adds	r2, r7, r2
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0011      	movs	r1, r2
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 ff8e 	bl	80038fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2240      	movs	r2, #64	@ 0x40
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	7819      	ldrb	r1, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff f9b0 	bl	8001d5a <HAL_I2C_AddrCallback>
}
 80029fa:	e01d      	b.n	8002a38 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 ff79 	bl	80038fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a12:	230c      	movs	r3, #12
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	7819      	ldrb	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff f99a 	bl	8001d5a <HAL_I2C_AddrCallback>
}
 8002a26:	e007      	b.n	8002a38 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]
}
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}

08002a40 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2242      	movs	r2, #66	@ 0x42
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2241      	movs	r2, #65	@ 0x41
 8002a54:	5c9b      	ldrb	r3, [r3, r2]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b21      	cmp	r3, #33	@ 0x21
 8002a5a:	d117      	bne.n	8002a8c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2241      	movs	r2, #65	@ 0x41
 8002a60:	2120      	movs	r1, #32
 8002a62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2211      	movs	r2, #17
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2101      	movs	r1, #1
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 ff41 	bl	80038fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff f950 	bl	8001d2a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a8a:	e016      	b.n	8002aba <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2241      	movs	r2, #65	@ 0x41
 8002a90:	2120      	movs	r1, #32
 8002a92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2212      	movs	r2, #18
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 ff29 	bl	80038fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2240      	movs	r2, #64	@ 0x40
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7ff f940 	bl	8001d3a <HAL_I2C_MasterRxCpltCallback>
}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2242      	movs	r2, #66	@ 0x42
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	01db      	lsls	r3, r3, #7
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d008      	beq.n	8002af8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4924      	ldr	r1, [pc, #144]	@ (8002b84 <I2C_ITSlaveSeqCplt+0xc0>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e00c      	b.n	8002b12 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4013      	ands	r3, r2
 8002b00:	d007      	beq.n	8002b12 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	491e      	ldr	r1, [pc, #120]	@ (8002b88 <I2C_ITSlaveSeqCplt+0xc4>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2241      	movs	r2, #65	@ 0x41
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b29      	cmp	r3, #41	@ 0x29
 8002b1c:	d114      	bne.n	8002b48 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2241      	movs	r2, #65	@ 0x41
 8002b22:	2128      	movs	r1, #40	@ 0x28
 8002b24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2221      	movs	r2, #33	@ 0x21
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fee3 	bl	80038fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2240      	movs	r2, #64	@ 0x40
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff f902 	bl	8001d4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b46:	e019      	b.n	8002b7c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2241      	movs	r2, #65	@ 0x41
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b52:	d113      	bne.n	8002b7c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2241      	movs	r2, #65	@ 0x41
 8002b58:	2128      	movs	r1, #40	@ 0x28
 8002b5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2222      	movs	r2, #34	@ 0x22
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2102      	movs	r1, #2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fec8 	bl	80038fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7fe f806 	bl	8000b88 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	ffffbfff 	.word	0xffffbfff
 8002b88:	ffff7fff 	.word	0xffff7fff

08002b8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2241      	movs	r2, #65	@ 0x41
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b21      	cmp	r3, #33	@ 0x21
 8002bac:	d108      	bne.n	8002bc0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fea2 	bl	80038fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2211      	movs	r2, #17
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbe:	e00d      	b.n	8002bdc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2241      	movs	r2, #65	@ 0x41
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b22      	cmp	r3, #34	@ 0x22
 8002bca:	d107      	bne.n	8002bdc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2102      	movs	r1, #2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fe93 	bl	80038fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2212      	movs	r2, #18
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	494e      	ldr	r1, [pc, #312]	@ (8002d20 <I2C_ITMasterCplt+0x194>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <I2C_ITMasterCplt+0x198>)
 8002bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	@ 0x41
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b60      	cmp	r3, #96	@ 0x60
 8002c1e:	d109      	bne.n	8002c34 <I2C_ITMasterCplt+0xa8>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	d005      	beq.n	8002c34 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002c32:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fb81 	bl	800333e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2241      	movs	r2, #65	@ 0x41
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b60      	cmp	r3, #96	@ 0x60
 8002c4c:	d002      	beq.n	8002c54 <I2C_ITMasterCplt+0xc8>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fa43 	bl	80030e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c62:	e058      	b.n	8002d16 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2241      	movs	r2, #65	@ 0x41
 8002c68:	5c9b      	ldrb	r3, [r3, r2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b21      	cmp	r3, #33	@ 0x21
 8002c6e:	d126      	bne.n	8002cbe <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2241      	movs	r2, #65	@ 0x41
 8002c74:	2120      	movs	r1, #32
 8002c76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2242      	movs	r2, #66	@ 0x42
 8002c82:	5c9b      	ldrb	r3, [r3, r2]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b40      	cmp	r3, #64	@ 0x40
 8002c88:	d10c      	bne.n	8002ca4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2242      	movs	r2, #66	@ 0x42
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2240      	movs	r2, #64	@ 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff f874 	bl	8001d8a <HAL_I2C_MemTxCpltCallback>
}
 8002ca2:	e038      	b.n	8002d16 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2242      	movs	r2, #66	@ 0x42
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2240      	movs	r2, #64	@ 0x40
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7ff f837 	bl	8001d2a <HAL_I2C_MasterTxCpltCallback>
}
 8002cbc:	e02b      	b.n	8002d16 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2241      	movs	r2, #65	@ 0x41
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b22      	cmp	r3, #34	@ 0x22
 8002cc8:	d125      	bne.n	8002d16 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2241      	movs	r2, #65	@ 0x41
 8002cce:	2120      	movs	r1, #32
 8002cd0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2242      	movs	r2, #66	@ 0x42
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d10c      	bne.n	8002cfe <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2242      	movs	r2, #66	@ 0x42
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2240      	movs	r2, #64	@ 0x40
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff f84f 	bl	8001d9a <HAL_I2C_MemRxCpltCallback>
}
 8002cfc:	e00b      	b.n	8002d16 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2242      	movs	r2, #66	@ 0x42
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff f812 	bl	8001d3a <HAL_I2C_MasterRxCpltCallback>
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	fe00e800 	.word	0xfe00e800
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d44:	200b      	movs	r0, #11
 8002d46:	183b      	adds	r3, r7, r0
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	2141      	movs	r1, #65	@ 0x41
 8002d4c:	5c52      	ldrb	r2, [r2, r1]
 8002d4e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2220      	movs	r2, #32
 8002d56:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b21      	cmp	r3, #33	@ 0x21
 8002d5e:	d003      	beq.n	8002d68 <I2C_ITSlaveCplt+0x40>
 8002d60:	183b      	adds	r3, r7, r0
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b29      	cmp	r3, #41	@ 0x29
 8002d66:	d109      	bne.n	8002d7c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d68:	4aac      	ldr	r2, [pc, #688]	@ (800301c <I2C_ITSlaveCplt+0x2f4>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 fdc4 	bl	80038fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2221      	movs	r2, #33	@ 0x21
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d7a:	e020      	b.n	8002dbe <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d7c:	220b      	movs	r2, #11
 8002d7e:	18bb      	adds	r3, r7, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b22      	cmp	r3, #34	@ 0x22
 8002d84:	d003      	beq.n	8002d8e <I2C_ITSlaveCplt+0x66>
 8002d86:	18bb      	adds	r3, r7, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d8c:	d109      	bne.n	8002da2 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002d8e:	4aa4      	ldr	r2, [pc, #656]	@ (8003020 <I2C_ITSlaveCplt+0x2f8>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 fdb1 	bl	80038fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2222      	movs	r2, #34	@ 0x22
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da0:	e00d      	b.n	8002dbe <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002da2:	230b      	movs	r3, #11
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b28      	cmp	r3, #40	@ 0x28
 8002daa:	d108      	bne.n	8002dbe <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002dac:	4a9d      	ldr	r2, [pc, #628]	@ (8003024 <I2C_ITSlaveCplt+0x2fc>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0011      	movs	r1, r2
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fda2 	bl	80038fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2180      	movs	r1, #128	@ 0x80
 8002dca:	0209      	lsls	r1, r1, #8
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4993      	ldr	r1, [pc, #588]	@ (8003028 <I2C_ITSlaveCplt+0x300>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 faab 	bl	800333e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	01db      	lsls	r3, r3, #7
 8002dee:	4013      	ands	r3, r2
 8002df0:	d013      	beq.n	8002e1a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	498b      	ldr	r1, [pc, #556]	@ (800302c <I2C_ITSlaveCplt+0x304>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01f      	beq.n	8002e4a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e18:	e017      	b.n	8002e4a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	4013      	ands	r3, r2
 8002e22:	d012      	beq.n	8002e4a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4980      	ldr	r1, [pc, #512]	@ (8003030 <I2C_ITSlaveCplt+0x308>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d020      	beq.n	8002e94 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2204      	movs	r2, #4
 8002e56:	4393      	bics	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2210      	movs	r2, #16
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d04f      	beq.n	8002f52 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002eb8:	d04b      	beq.n	8002f52 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d12d      	bne.n	8002f20 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2241      	movs	r2, #65	@ 0x41
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b28      	cmp	r3, #40	@ 0x28
 8002ece:	d10b      	bne.n	8002ee8 <I2C_ITSlaveCplt+0x1c0>
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	049b      	lsls	r3, r3, #18
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 f8a9 	bl	8003038 <I2C_ITListenCplt>
 8002ee6:	e034      	b.n	8002f52 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2241      	movs	r2, #65	@ 0x41
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b29      	cmp	r3, #41	@ 0x29
 8002ef2:	d110      	bne.n	8002f16 <I2C_ITSlaveCplt+0x1ee>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a4f      	ldr	r2, [pc, #316]	@ (8003034 <I2C_ITSlaveCplt+0x30c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00c      	beq.n	8002f16 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fa19 	bl	800333e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff fdd8 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
 8002f14:	e01d      	b.n	8002f52 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	61da      	str	r2, [r3, #28]
 8002f1e:	e018      	b.n	8002f52 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <I2C_ITSlaveCplt+0x21c>
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	045b      	lsls	r3, r3, #17
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 f8cb 	bl	80030e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2242      	movs	r2, #66	@ 0x42
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f8b9 	bl	80030e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2241      	movs	r2, #65	@ 0x41
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b28      	cmp	r3, #40	@ 0x28
 8002f80:	d147      	bne.n	8003012 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f855 	bl	8003038 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f8e:	e040      	b.n	8003012 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <I2C_ITSlaveCplt+0x30c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d016      	beq.n	8002fc8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7ff fd91 	bl	8002ac4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <I2C_ITSlaveCplt+0x30c>)
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2241      	movs	r2, #65	@ 0x41
 8002fac:	2120      	movs	r1, #32
 8002fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2240      	movs	r2, #64	@ 0x40
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fe feda 	bl	8001d7a <HAL_I2C_ListenCpltCallback>
}
 8002fc6:	e024      	b.n	8003012 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2241      	movs	r2, #65	@ 0x41
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b22      	cmp	r3, #34	@ 0x22
 8002fd2:	d10f      	bne.n	8002ff4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2241      	movs	r2, #65	@ 0x41
 8002fd8:	2120      	movs	r1, #32
 8002fda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2240      	movs	r2, #64	@ 0x40
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fd fdcb 	bl	8000b88 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff2:	e00e      	b.n	8003012 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2241      	movs	r2, #65	@ 0x41
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2240      	movs	r2, #64	@ 0x40
 8003006:	2100      	movs	r1, #0
 8003008:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f7fe fe9c 	bl	8001d4a <HAL_I2C_SlaveTxCpltCallback>
}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b006      	add	sp, #24
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	00008001 	.word	0x00008001
 8003020:	00008002 	.word	0x00008002
 8003024:	00008003 	.word	0x00008003
 8003028:	fe00e800 	.word	0xfe00e800
 800302c:	ffffbfff 	.word	0xffffbfff
 8003030:	ffff7fff 	.word	0xffff7fff
 8003034:	ffff0000 	.word	0xffff0000

08003038 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a26      	ldr	r2, [pc, #152]	@ (80030e0 <I2C_ITListenCplt+0xa8>)
 8003046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2241      	movs	r2, #65	@ 0x41
 8003052:	2120      	movs	r1, #32
 8003054:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2242      	movs	r2, #66	@ 0x42
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2204      	movs	r2, #4
 8003068:	4013      	ands	r3, r2
 800306a:	d022      	beq.n	80030b2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	2204      	movs	r2, #4
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030b2:	4a0c      	ldr	r2, [pc, #48]	@ (80030e4 <I2C_ITListenCplt+0xac>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fc1f 	bl	80038fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2210      	movs	r2, #16
 80030c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2240      	movs	r2, #64	@ 0x40
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fe fe52 	bl	8001d7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00008003 	.word	0x00008003

080030e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030f2:	200f      	movs	r0, #15
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	2141      	movs	r1, #65	@ 0x41
 80030fa:	5c52      	ldrb	r2, [r2, r1]
 80030fc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2242      	movs	r2, #66	@ 0x42
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a72      	ldr	r2, [pc, #456]	@ (80032d4 <I2C_ITError+0x1ec>)
 800310a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800311e:	183b      	adds	r3, r7, r0
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b28      	cmp	r3, #40	@ 0x28
 8003124:	d007      	beq.n	8003136 <I2C_ITError+0x4e>
 8003126:	183b      	adds	r3, r7, r0
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b29      	cmp	r3, #41	@ 0x29
 800312c:	d003      	beq.n	8003136 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800312e:	183b      	adds	r3, r7, r0
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b2a      	cmp	r3, #42	@ 0x2a
 8003134:	d10c      	bne.n	8003150 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2103      	movs	r1, #3
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fbde 	bl	80038fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2241      	movs	r2, #65	@ 0x41
 8003144:	2128      	movs	r1, #40	@ 0x28
 8003146:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a63      	ldr	r2, [pc, #396]	@ (80032d8 <I2C_ITError+0x1f0>)
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
 800314e:	e032      	b.n	80031b6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003150:	4a62      	ldr	r2, [pc, #392]	@ (80032dc <I2C_ITError+0x1f4>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fbd0 	bl	80038fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 f8ed 	bl	800333e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2241      	movs	r2, #65	@ 0x41
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b60      	cmp	r3, #96	@ 0x60
 800316e:	d01f      	beq.n	80031b0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2241      	movs	r2, #65	@ 0x41
 8003174:	2120      	movs	r1, #32
 8003176:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2220      	movs	r2, #32
 8003180:	4013      	ands	r3, r2
 8003182:	2b20      	cmp	r3, #32
 8003184:	d114      	bne.n	80031b0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	2b10      	cmp	r3, #16
 8003192:	d109      	bne.n	80031a8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	2204      	movs	r2, #4
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2220      	movs	r2, #32
 80031ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03b      	beq.n	800323c <I2C_ITError+0x154>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b11      	cmp	r3, #17
 80031c8:	d002      	beq.n	80031d0 <I2C_ITError+0xe8>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b21      	cmp	r3, #33	@ 0x21
 80031ce:	d135      	bne.n	800323c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	01db      	lsls	r3, r3, #7
 80031da:	401a      	ands	r2, r3
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	01db      	lsls	r3, r3, #7
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	493c      	ldr	r1, [pc, #240]	@ (80032e0 <I2C_ITError+0x1f8>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fe f8ad 	bl	8001358 <HAL_DMA_GetState>
 80031fe:	0003      	movs	r3, r0
 8003200:	2b01      	cmp	r3, #1
 8003202:	d016      	beq.n	8003232 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	4a36      	ldr	r2, [pc, #216]	@ (80032e4 <I2C_ITError+0x1fc>)
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	@ 0x40
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	0018      	movs	r0, r3
 800321a:	f7fe f833 	bl	8001284 <HAL_DMA_Abort_IT>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d051      	beq.n	80032c6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	0018      	movs	r0, r3
 800322e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003230:	e049      	b.n	80032c6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f859 	bl	80032ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800323a:	e044      	b.n	80032c6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03b      	beq.n	80032bc <I2C_ITError+0x1d4>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d002      	beq.n	8003250 <I2C_ITError+0x168>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b22      	cmp	r3, #34	@ 0x22
 800324e:	d135      	bne.n	80032bc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	401a      	ands	r2, r3
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	491e      	ldr	r1, [pc, #120]	@ (80032e8 <I2C_ITError+0x200>)
 8003270:	400a      	ands	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	0018      	movs	r0, r3
 800327a:	f7fe f86d 	bl	8001358 <HAL_DMA_GetState>
 800327e:	0003      	movs	r3, r0
 8003280:	2b01      	cmp	r3, #1
 8003282:	d016      	beq.n	80032b2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	4a16      	ldr	r2, [pc, #88]	@ (80032e4 <I2C_ITError+0x1fc>)
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	0018      	movs	r0, r3
 800329a:	f7fd fff3 	bl	8001284 <HAL_DMA_Abort_IT>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d013      	beq.n	80032ca <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	0018      	movs	r0, r3
 80032ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032b0:	e00b      	b.n	80032ca <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f819 	bl	80032ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ba:	e006      	b.n	80032ca <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 f814 	bl	80032ec <I2C_TreatErrorCallback>
  }
}
 80032c4:	e002      	b.n	80032cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	e000      	b.n	80032cc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ca:	46c0      	nop			@ (mov r8, r8)
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	ffff0000 	.word	0xffff0000
 80032d8:	08002011 	.word	0x08002011
 80032dc:	00008003 	.word	0x00008003
 80032e0:	ffffbfff 	.word	0xffffbfff
 80032e4:	08003383 	.word	0x08003383
 80032e8:	ffff7fff 	.word	0xffff7fff

080032ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2241      	movs	r2, #65	@ 0x41
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b60      	cmp	r3, #96	@ 0x60
 80032fe:	d10f      	bne.n	8003320 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2241      	movs	r2, #65	@ 0x41
 8003304:	2120      	movs	r1, #32
 8003306:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2240      	movs	r2, #64	@ 0x40
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f7fe fd4e 	bl	8001dba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800331e:	e00a      	b.n	8003336 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2240      	movs	r2, #64	@ 0x40
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe fd3a 	bl	8001daa <HAL_I2C_ErrorCallback>
}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d103      	bne.n	800335c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	2b01      	cmp	r3, #1
 8003368:	d007      	beq.n	800337a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	430a      	orrs	r2, r1
 8003378:	619a      	str	r2, [r3, #24]
  }
}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	2200      	movs	r2, #0
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ac:	2200      	movs	r2, #0
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7ff ff9a 	bl	80032ec <I2C_TreatErrorCallback>
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	e03a      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f8d3 	bl	8003584 <I2C_IsErrorOccurred>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e040      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d02d      	beq.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe28 	bl	8001040 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x42>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d122      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	425a      	negs	r2, r3
 8003412:	4153      	adcs	r3, r2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	001a      	movs	r2, r3
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d113      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	2220      	movs	r2, #32
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2241      	movs	r2, #65	@ 0x41
 8003430:	2120      	movs	r1, #32
 8003432:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2242      	movs	r2, #66	@ 0x42
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e00f      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	425a      	negs	r2, r3
 8003458:	4153      	adcs	r3, r2
 800345a:	b2db      	uxtb	r3, r3
 800345c:	001a      	movs	r2, r3
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d0b5      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800347c:	e032      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f87d 	bl	8003584 <I2C_IsErrorOccurred>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e030      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3301      	adds	r3, #1
 8003496:	d025      	beq.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fd fdd2 	bl	8001040 <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11a      	bne.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2202      	movs	r2, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d013      	beq.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	2220      	movs	r2, #32
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2241      	movs	r2, #65	@ 0x41
 80034cc:	2120      	movs	r1, #32
 80034ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2242      	movs	r2, #66	@ 0x42
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	@ 0x40
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e007      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d1c5      	bne.n	800347e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b004      	add	sp, #16
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003508:	e02f      	b.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f837 	bl	8003584 <I2C_IsErrorOccurred>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e02d      	b.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fd fd8f 	bl	8001040 <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11a      	bne.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2220      	movs	r2, #32
 800353c:	4013      	ands	r3, r2
 800353e:	2b20      	cmp	r3, #32
 8003540:	d013      	beq.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	2220      	movs	r2, #32
 8003548:	431a      	orrs	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2241      	movs	r2, #65	@ 0x41
 8003552:	2120      	movs	r1, #32
 8003554:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2242      	movs	r2, #66	@ 0x42
 800355a:	2100      	movs	r1, #0
 800355c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2240      	movs	r2, #64	@ 0x40
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2220      	movs	r2, #32
 8003572:	4013      	ands	r3, r2
 8003574:	2b20      	cmp	r3, #32
 8003576:	d1c8      	bne.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2327      	movs	r3, #39	@ 0x27
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2210      	movs	r2, #16
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <I2C_IsErrorOccurred+0x2e>
 80035b0:	e079      	b.n	80036a6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2210      	movs	r2, #16
 80035b8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035ba:	e057      	b.n	800366c <I2C_IsErrorOccurred+0xe8>
 80035bc:	2227      	movs	r2, #39	@ 0x27
 80035be:	18bb      	adds	r3, r7, r2
 80035c0:	18ba      	adds	r2, r7, r2
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	d04f      	beq.n	800366c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7fd fd38 	bl	8001040 <HAL_GetTick>
 80035d0:	0002      	movs	r2, r0
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <I2C_IsErrorOccurred+0x5e>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d144      	bne.n	800366c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	01db      	lsls	r3, r3, #7
 80035ec:	4013      	ands	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035f0:	2013      	movs	r0, #19
 80035f2:	183b      	adds	r3, r7, r0
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	2142      	movs	r1, #66	@ 0x42
 80035f8:	5c52      	ldrb	r2, [r2, r1]
 80035fa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	401a      	ands	r2, r3
 8003608:	2380      	movs	r3, #128	@ 0x80
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	429a      	cmp	r2, r3
 800360e:	d126      	bne.n	800365e <I2C_IsErrorOccurred+0xda>
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	01db      	lsls	r3, r3, #7
 8003616:	429a      	cmp	r2, r3
 8003618:	d021      	beq.n	800365e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b20      	cmp	r3, #32
 8003620:	d01d      	beq.n	800365e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	01c9      	lsls	r1, r1, #7
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003634:	f7fd fd04 	bl	8001040 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363c:	e00f      	b.n	800365e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800363e:	f7fd fcff 	bl	8001040 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b19      	cmp	r3, #25
 800364a:	d908      	bls.n	800365e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2220      	movs	r2, #32
 8003650:	4313      	orrs	r3, r2
 8003652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003654:	2327      	movs	r3, #39	@ 0x27
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]

              break;
 800365c:	e006      	b.n	800366c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2220      	movs	r2, #32
 8003666:	4013      	ands	r3, r2
 8003668:	2b20      	cmp	r3, #32
 800366a:	d1e8      	bne.n	800363e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2220      	movs	r2, #32
 8003674:	4013      	ands	r3, r2
 8003676:	2b20      	cmp	r3, #32
 8003678:	d004      	beq.n	8003684 <I2C_IsErrorOccurred+0x100>
 800367a:	2327      	movs	r3, #39	@ 0x27
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d09b      	beq.n	80035bc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003684:	2327      	movs	r3, #39	@ 0x27
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2204      	movs	r2, #4
 800369a:	4313      	orrs	r3, r2
 800369c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800369e:	2327      	movs	r3, #39	@ 0x27
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d00c      	beq.n	80036d2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2201      	movs	r2, #1
 80036bc:	4313      	orrs	r3, r2
 80036be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	0052      	lsls	r2, r2, #1
 80036c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ca:	2327      	movs	r3, #39	@ 0x27
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	d00c      	beq.n	80036f6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2208      	movs	r2, #8
 80036e0:	4313      	orrs	r3, r2
 80036e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	00d2      	lsls	r2, r2, #3
 80036ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ee:	2327      	movs	r3, #39	@ 0x27
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00c      	beq.n	800371a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2202      	movs	r2, #2
 8003704:	4313      	orrs	r3, r2
 8003706:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2280      	movs	r2, #128	@ 0x80
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003712:	2327      	movs	r3, #39	@ 0x27
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800371a:	2327      	movs	r3, #39	@ 0x27
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01d      	beq.n	8003760 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	0018      	movs	r0, r3
 8003728:	f7ff fe09 	bl	800333e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	490e      	ldr	r1, [pc, #56]	@ (8003770 <I2C_IsErrorOccurred+0x1ec>)
 8003738:	400a      	ands	r2, r1
 800373a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	431a      	orrs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2241      	movs	r2, #65	@ 0x41
 800374c:	2120      	movs	r1, #32
 800374e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2242      	movs	r2, #66	@ 0x42
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	2100      	movs	r1, #0
 800375e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003760:	2327      	movs	r3, #39	@ 0x27
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	781b      	ldrb	r3, [r3, #0]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b00a      	add	sp, #40	@ 0x28
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	fe00e800 	.word	0xfe00e800

08003774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	0008      	movs	r0, r1
 800377e:	0011      	movs	r1, r2
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	240a      	movs	r4, #10
 8003784:	193b      	adds	r3, r7, r4
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	2009      	movs	r0, #9
 800378c:	183b      	adds	r3, r7, r0
 800378e:	1c0a      	adds	r2, r1, #0
 8003790:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003792:	193b      	adds	r3, r7, r4
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	059b      	lsls	r3, r3, #22
 8003798:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800379a:	183b      	adds	r3, r7, r0
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0419      	lsls	r1, r3, #16
 80037a0:	23ff      	movs	r3, #255	@ 0xff
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	4313      	orrs	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037be:	0d51      	lsrs	r1, r2, #21
 80037c0:	2280      	movs	r2, #128	@ 0x80
 80037c2:	00d2      	lsls	r2, r2, #3
 80037c4:	400a      	ands	r2, r1
 80037c6:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <I2C_TransferConfig+0x70>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	43d2      	mvns	r2, r2
 80037cc:	401a      	ands	r2, r3
 80037ce:	0011      	movs	r1, r2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b007      	add	sp, #28
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	03ff63ff 	.word	0x03ff63ff

080037e8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	000a      	movs	r2, r1
 80037f2:	1cbb      	adds	r3, r7, #2
 80037f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037fe:	4b3c      	ldr	r3, [pc, #240]	@ (80038f0 <I2C_Enable_IRQ+0x108>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d035      	beq.n	8003870 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003808:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <I2C_Enable_IRQ+0x10c>)
 800380a:	429a      	cmp	r2, r3
 800380c:	d030      	beq.n	8003870 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003812:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <I2C_Enable_IRQ+0x110>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d02b      	beq.n	8003870 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003818:	1cbb      	adds	r3, r7, #2
 800381a:	2200      	movs	r2, #0
 800381c:	5e9b      	ldrsh	r3, [r3, r2]
 800381e:	2b00      	cmp	r3, #0
 8003820:	da03      	bge.n	800382a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22b8      	movs	r2, #184	@ 0xb8
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800382a:	1cbb      	adds	r3, r7, #2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	d003      	beq.n	800383c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22f2      	movs	r2, #242	@ 0xf2
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800383c:	1cbb      	adds	r3, r7, #2
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d003      	beq.n	800384e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22f4      	movs	r2, #244	@ 0xf4
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800384e:	1cbb      	adds	r3, r7, #2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2b10      	cmp	r3, #16
 8003854:	d103      	bne.n	800385e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2290      	movs	r2, #144	@ 0x90
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800385e:	1cbb      	adds	r3, r7, #2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	2b20      	cmp	r3, #32
 8003864:	d137      	bne.n	80038d6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800386e:	e032      	b.n	80038d6 <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003870:	1cbb      	adds	r3, r7, #2
 8003872:	2200      	movs	r2, #0
 8003874:	5e9b      	ldrsh	r3, [r3, r2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	da03      	bge.n	8003882 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22b8      	movs	r2, #184	@ 0xb8
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003882:	1cbb      	adds	r3, r7, #2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d003      	beq.n	8003894 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	22f2      	movs	r2, #242	@ 0xf2
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003894:	1cbb      	adds	r3, r7, #2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	2202      	movs	r2, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d003      	beq.n	80038a6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22f4      	movs	r2, #244	@ 0xf4
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d103      	bne.n	80038b6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2290      	movs	r2, #144	@ 0x90
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038b6:	1cbb      	adds	r3, r7, #2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d103      	bne.n	80038c6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2260      	movs	r2, #96	@ 0x60
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038c6:	1cbb      	adds	r3, r7, #2
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d103      	bne.n	80038d6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	08002211 	.word	0x08002211
 80038f4:	08002661 	.word	0x08002661
 80038f8:	08002409 	.word	0x08002409

080038fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	000a      	movs	r2, r1
 8003906:	1cbb      	adds	r3, r7, #2
 8003908:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800390e:	1cbb      	adds	r3, r7, #2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d010      	beq.n	800393a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2242      	movs	r2, #66	@ 0x42
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2241      	movs	r2, #65	@ 0x41
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	001a      	movs	r2, r3
 800392a:	2328      	movs	r3, #40	@ 0x28
 800392c:	4013      	ands	r3, r2
 800392e:	2b28      	cmp	r3, #40	@ 0x28
 8003930:	d003      	beq.n	800393a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22b0      	movs	r2, #176	@ 0xb0
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800393a:	1cbb      	adds	r3, r7, #2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d010      	beq.n	8003966 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2244      	movs	r2, #68	@ 0x44
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2241      	movs	r2, #65	@ 0x41
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	001a      	movs	r2, r3
 8003956:	2328      	movs	r3, #40	@ 0x28
 8003958:	4013      	ands	r3, r2
 800395a:	2b28      	cmp	r3, #40	@ 0x28
 800395c:	d003      	beq.n	8003966 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22b0      	movs	r2, #176	@ 0xb0
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003966:	1cbb      	adds	r3, r7, #2
 8003968:	2200      	movs	r2, #0
 800396a:	5e9b      	ldrsh	r3, [r3, r2]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da03      	bge.n	8003978 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22b8      	movs	r2, #184	@ 0xb8
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003978:	1cbb      	adds	r3, r7, #2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	2b10      	cmp	r3, #16
 800397e:	d103      	bne.n	8003988 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2290      	movs	r2, #144	@ 0x90
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003988:	1cbb      	adds	r3, r7, #2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	2b20      	cmp	r3, #32
 800398e:	d103      	bne.n	8003998 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003998:	1cbb      	adds	r3, r7, #2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	d103      	bne.n	80039a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	@ 0x40
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43d9      	mvns	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	400a      	ands	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2241      	movs	r2, #65	@ 0x41
 80039d2:	5c9b      	ldrb	r3, [r3, r2]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d138      	bne.n	8003a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2240      	movs	r2, #64	@ 0x40
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e032      	b.n	8003a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2240      	movs	r2, #64	@ 0x40
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2241      	movs	r2, #65	@ 0x41
 80039f4:	2124      	movs	r1, #36	@ 0x24
 80039f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2101      	movs	r1, #1
 8003a04:	438a      	bics	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4911      	ldr	r1, [pc, #68]	@ (8003a58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2241      	movs	r2, #65	@ 0x41
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2240      	movs	r2, #64	@ 0x40
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	ffffefff 	.word	0xffffefff

08003a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2241      	movs	r2, #65	@ 0x41
 8003a6a:	5c9b      	ldrb	r3, [r3, r2]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d139      	bne.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2240      	movs	r2, #64	@ 0x40
 8003a76:	5c9b      	ldrb	r3, [r3, r2]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e033      	b.n	8003ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2240      	movs	r2, #64	@ 0x40
 8003a84:	2101      	movs	r1, #1
 8003a86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2241      	movs	r2, #65	@ 0x41
 8003a8c:	2124      	movs	r1, #36	@ 0x24
 8003a8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a11      	ldr	r2, [pc, #68]	@ (8003af0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2241      	movs	r2, #65	@ 0x41
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2240      	movs	r2, #64	@ 0x40
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b004      	add	sp, #16
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffff0ff 	.word	0xfffff0ff

08003af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	2380      	movs	r3, #128	@ 0x80
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d11f      	bne.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b18:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4912      	ldr	r1, [pc, #72]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fc faec 	bl	8000104 <__udivsi3>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b32:	e008      	b.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e001      	b.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e009      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0ed      	beq.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	40007000 	.word	0x40007000
 8003b68:	fffff9ff 	.word	0xfffff9ff
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	000f4240 	.word	0x000f4240

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e2fe      	b.n	8004184 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <HAL_RCC_OscConfig+0x1e>
 8003b90:	e07c      	b.n	8003c8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	4bc3      	ldr	r3, [pc, #780]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2238      	movs	r2, #56	@ 0x38
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9c:	4bc0      	ldr	r3, [pc, #768]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3e>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4bb9      	ldr	r3, [pc, #740]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d062      	beq.n	8003c8a <HAL_RCC_OscConfig+0x116>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d15e      	bne.n	8003c8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e2d9      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x78>
 8003bdc:	4bb0      	ldr	r3, [pc, #704]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4baf      	ldr	r3, [pc, #700]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	0249      	lsls	r1, r1, #9
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e020      	b.n	8003c2e <HAL_RCC_OscConfig+0xba>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	23a0      	movs	r3, #160	@ 0xa0
 8003bf2:	02db      	lsls	r3, r3, #11
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d10e      	bne.n	8003c16 <HAL_RCC_OscConfig+0xa2>
 8003bf8:	4ba9      	ldr	r3, [pc, #676]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4ba8      	ldr	r3, [pc, #672]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	2180      	movs	r1, #128	@ 0x80
 8003c00:	02c9      	lsls	r1, r1, #11
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4ba6      	ldr	r3, [pc, #664]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	2180      	movs	r1, #128	@ 0x80
 8003c0e:	0249      	lsls	r1, r1, #9
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e00b      	b.n	8003c2e <HAL_RCC_OscConfig+0xba>
 8003c16:	4ba2      	ldr	r3, [pc, #648]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	49a1      	ldr	r1, [pc, #644]	@ (8003ea4 <HAL_RCC_OscConfig+0x330>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	4b9f      	ldr	r3, [pc, #636]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c28:	499f      	ldr	r1, [pc, #636]	@ (8003ea8 <HAL_RCC_OscConfig+0x334>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fa03 	bl	8001040 <HAL_GetTick>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fd f9fe 	bl	8001040 <HAL_GetTick>
 8003c44:	0002      	movs	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	@ 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e298      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	4b93      	ldr	r3, [pc, #588]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0xcc>
 8003c5e:	e015      	b.n	8003c8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd f9ee 	bl	8001040 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6a:	f7fd f9e9 	bl	8001040 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	@ 0x64
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e283      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7c:	4b88      	ldr	r3, [pc, #544]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	4013      	ands	r3, r2
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0xf6>
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	4013      	ands	r3, r2
 8003c94:	d100      	bne.n	8003c98 <HAL_RCC_OscConfig+0x124>
 8003c96:	e099      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c98:	4b81      	ldr	r3, [pc, #516]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2238      	movs	r2, #56	@ 0x38
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	4013      	ands	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x144>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d135      	bne.n	8003d2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbe:	4b78      	ldr	r3, [pc, #480]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x162>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e256      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b72      	ldr	r3, [pc, #456]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <HAL_RCC_OscConfig+0x338>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d112      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb0 <HAL_RCC_OscConfig+0x33c>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	4b67      	ldr	r3, [pc, #412]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d06:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	4013      	ands	r3, r2
 8003d10:	4a68      	ldr	r2, [pc, #416]	@ (8003eb4 <HAL_RCC_OscConfig+0x340>)
 8003d12:	40da      	lsrs	r2, r3
 8003d14:	4b68      	ldr	r3, [pc, #416]	@ (8003eb8 <HAL_RCC_OscConfig+0x344>)
 8003d16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d18:	4b68      	ldr	r3, [pc, #416]	@ (8003ebc <HAL_RCC_OscConfig+0x348>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fd f933 	bl	8000f88 <HAL_InitTick>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d051      	beq.n	8003dca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e22c      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d030      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb0 <HAL_RCC_OscConfig+0x33c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	4b57      	ldr	r3, [pc, #348]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d46:	4b56      	ldr	r3, [pc, #344]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b55      	ldr	r3, [pc, #340]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	2180      	movs	r1, #128	@ 0x80
 8003d4e:	0049      	lsls	r1, r1, #1
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd f974 	bl	8001040 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fd f96f 	bl	8001040 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e209      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a4a      	ldr	r2, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x338>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	021a      	lsls	r2, r3, #8
 8003d8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d94:	4b42      	ldr	r3, [pc, #264]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	4949      	ldr	r1, [pc, #292]	@ (8003ec0 <HAL_RCC_OscConfig+0x34c>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd f94e 	bl	8001040 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fd f949 	bl	8001040 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1e3      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x236>
 8003dc8:	e000      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d047      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2238      	movs	r2, #56	@ 0x38
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b18      	cmp	r3, #24
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003de2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d03c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d138      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e1c5      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d019      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e04:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f918 	bl	8001040 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fd f913 	bl	8001040 <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1ad      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d0f1      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2a2>
 8003e32:	e018      	b.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	438a      	bics	r2, r1
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd f8fe 	bl	8001040 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fd f8f9 	bl	8001040 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e193      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f1      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d100      	bne.n	8003e72 <HAL_RCC_OscConfig+0x2fe>
 8003e70:	e0c6      	b.n	8004000 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	231f      	movs	r3, #31
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2238      	movs	r2, #56	@ 0x38
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d11e      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_OscConfig+0x32c>)
 8003e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <HAL_RCC_OscConfig+0x31e>
 8003e90:	e0b6      	b.n	8004000 <HAL_RCC_OscConfig+0x48c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d000      	beq.n	8003e9c <HAL_RCC_OscConfig+0x328>
 8003e9a:	e0b1      	b.n	8004000 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e171      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	fffeffff 	.word	0xfffeffff
 8003ea8:	fffbffff 	.word	0xfffbffff
 8003eac:	ffff80ff 	.word	0xffff80ff
 8003eb0:	ffffc7ff 	.word	0xffffc7ff
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec4:	4bb1      	ldr	r3, [pc, #708]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	055b      	lsls	r3, r3, #21
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x360>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x362>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4bac      	ldr	r3, [pc, #688]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ede:	4bab      	ldr	r3, [pc, #684]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	0549      	lsls	r1, r1, #21
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	055b      	lsls	r3, r3, #21
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efe:	4ba4      	ldr	r3, [pc, #656]	@ (8004190 <HAL_RCC_OscConfig+0x61c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d11a      	bne.n	8003f40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0a:	4ba1      	ldr	r3, [pc, #644]	@ (8004190 <HAL_RCC_OscConfig+0x61c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4ba0      	ldr	r3, [pc, #640]	@ (8004190 <HAL_RCC_OscConfig+0x61c>)
 8003f10:	2180      	movs	r1, #128	@ 0x80
 8003f12:	0049      	lsls	r1, r1, #1
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f18:	f7fd f892 	bl	8001040 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fd f88d 	bl	8001040 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e127      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f34:	4b96      	ldr	r3, [pc, #600]	@ (8004190 <HAL_RCC_OscConfig+0x61c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2380      	movs	r3, #128	@ 0x80
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3e2>
 8003f48:	4b90      	ldr	r3, [pc, #576]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f4e:	2101      	movs	r1, #1
 8003f50:	430a      	orrs	r2, r1
 8003f52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x41c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x404>
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f62:	4b8a      	ldr	r3, [pc, #552]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f64:	2104      	movs	r1, #4
 8003f66:	430a      	orrs	r2, r1
 8003f68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f6a:	4b88      	ldr	r3, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f6e:	4b87      	ldr	r3, [pc, #540]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f70:	2101      	movs	r1, #1
 8003f72:	430a      	orrs	r2, r1
 8003f74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0x41c>
 8003f78:	4b84      	ldr	r3, [pc, #528]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f7c:	4b83      	ldr	r3, [pc, #524]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	438a      	bics	r2, r1
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f84:	4b81      	ldr	r3, [pc, #516]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f88:	4b80      	ldr	r3, [pc, #512]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d014      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd f852 	bl	8001040 <HAL_GetTick>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa0:	e009      	b.n	8003fb6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fd f84d 	bl	8001040 <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	4a79      	ldr	r2, [pc, #484]	@ (8004194 <HAL_RCC_OscConfig+0x620>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0e6      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb6:	4b75      	ldr	r3, [pc, #468]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
 8003fc0:	e013      	b.n	8003fea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd f83d 	bl	8001040 <HAL_GetTick>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fca:	e009      	b.n	8003fe0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f838 	bl	8001040 <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8004194 <HAL_RCC_OscConfig+0x620>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0d1      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fea:	231f      	movs	r3, #31
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b65      	ldr	r3, [pc, #404]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff8:	4b64      	ldr	r3, [pc, #400]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8003ffa:	4967      	ldr	r1, [pc, #412]	@ (8004198 <HAL_RCC_OscConfig+0x624>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x496>
 8004008:	e0bb      	b.n	8004182 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400a:	4b60      	ldr	r3, [pc, #384]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2238      	movs	r2, #56	@ 0x38
 8004010:	4013      	ands	r3, r2
 8004012:	2b10      	cmp	r3, #16
 8004014:	d100      	bne.n	8004018 <HAL_RCC_OscConfig+0x4a4>
 8004016:	e07b      	b.n	8004110 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d156      	bne.n	80040ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b5a      	ldr	r3, [pc, #360]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004026:	495d      	ldr	r1, [pc, #372]	@ (800419c <HAL_RCC_OscConfig+0x628>)
 8004028:	400a      	ands	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd f808 	bl	8001040 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004036:	f7fd f803 	bl	8001040 <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e09d      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	049b      	lsls	r3, r3, #18
 8004050:	4013      	ands	r3, r2
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004054:	4b4d      	ldr	r3, [pc, #308]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a51      	ldr	r2, [pc, #324]	@ (80041a0 <HAL_RCC_OscConfig+0x62c>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	431a      	orrs	r2, r3
 8004082:	4b42      	ldr	r3, [pc, #264]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004084:	430a      	orrs	r2, r1
 8004086:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004088:	4b40      	ldr	r3, [pc, #256]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b3f      	ldr	r3, [pc, #252]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	0449      	lsls	r1, r1, #17
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004096:	4b3d      	ldr	r3, [pc, #244]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	4b3c      	ldr	r3, [pc, #240]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	0549      	lsls	r1, r1, #21
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fc ffcc 	bl	8001040 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fc ffc7 	bl	8001040 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e061      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c0:	4b32      	ldr	r3, [pc, #200]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x53a>
 80040cc:	e059      	b.n	8004182 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b2f      	ldr	r3, [pc, #188]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 80040d4:	4931      	ldr	r1, [pc, #196]	@ (800419c <HAL_RCC_OscConfig+0x628>)
 80040d6:	400a      	ands	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fc ffb1 	bl	8001040 <HAL_GetTick>
 80040de:	0003      	movs	r3, r0
 80040e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fc ffac 	bl	8001040 <HAL_GetTick>
 80040e8:	0002      	movs	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e046      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f6:	4b25      	ldr	r3, [pc, #148]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	049b      	lsls	r3, r3, #18
 80040fe:	4013      	ands	r3, r2
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	4b21      	ldr	r3, [pc, #132]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 8004108:	4926      	ldr	r1, [pc, #152]	@ (80041a4 <HAL_RCC_OscConfig+0x630>)
 800410a:	400a      	ands	r2, r1
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	e038      	b.n	8004182 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e033      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x618>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2203      	movs	r2, #3
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	429a      	cmp	r2, r3
 800412e:	d126      	bne.n	800417e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2270      	movs	r2, #112	@ 0x70
 8004134:	401a      	ands	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d11f      	bne.n	800417e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	23fe      	movs	r3, #254	@ 0xfe
 8004142:	01db      	lsls	r3, r3, #7
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d116      	bne.n	800417e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	23f8      	movs	r3, #248	@ 0xf8
 8004154:	039b      	lsls	r3, r3, #14
 8004156:	401a      	ands	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d10e      	bne.n	800417e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	23e0      	movs	r3, #224	@ 0xe0
 8004164:	051b      	lsls	r3, r3, #20
 8004166:	401a      	ands	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	0f5b      	lsrs	r3, r3, #29
 8004174:	075a      	lsls	r2, r3, #29
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b008      	add	sp, #32
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	00001388 	.word	0x00001388
 8004198:	efffffff 	.word	0xefffffff
 800419c:	feffffff 	.word	0xfeffffff
 80041a0:	11c1808c 	.word	0x11c1808c
 80041a4:	eefefffc 	.word	0xeefefffc

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0e9      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b76      	ldr	r3, [pc, #472]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2207      	movs	r2, #7
 80041c2:	4013      	ands	r3, r2
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d91e      	bls.n	8004208 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b73      	ldr	r3, [pc, #460]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2207      	movs	r2, #7
 80041d0:	4393      	bics	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	4b70      	ldr	r3, [pc, #448]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041dc:	f7fc ff30 	bl	8001040 <HAL_GetTick>
 80041e0:	0003      	movs	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7fc ff2b 	bl	8001040 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	4a6a      	ldr	r2, [pc, #424]	@ (800439c <HAL_RCC_ClockConfig+0x1f4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0ca      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041fa:	4b67      	ldr	r3, [pc, #412]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2207      	movs	r2, #7
 8004200:	4013      	ands	r3, r2
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2202      	movs	r2, #2
 800420e:	4013      	ands	r3, r2
 8004210:	d015      	beq.n	800423e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2204      	movs	r2, #4
 8004218:	4013      	ands	r3, r2
 800421a:	d006      	beq.n	800422a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800421c:	4b60      	ldr	r3, [pc, #384]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b5f      	ldr	r3, [pc, #380]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 8004222:	21e0      	movs	r1, #224	@ 0xe0
 8004224:	01c9      	lsls	r1, r1, #7
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422a:	4b5d      	ldr	r3, [pc, #372]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4a5d      	ldr	r2, [pc, #372]	@ (80043a4 <HAL_RCC_ClockConfig+0x1fc>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2201      	movs	r2, #1
 8004244:	4013      	ands	r3, r2
 8004246:	d057      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004250:	4b53      	ldr	r3, [pc, #332]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	029b      	lsls	r3, r3, #10
 8004258:	4013      	ands	r3, r2
 800425a:	d12b      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e097      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004268:	4b4d      	ldr	r3, [pc, #308]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	049b      	lsls	r3, r3, #18
 8004270:	4013      	ands	r3, r2
 8004272:	d11f      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e08b      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004280:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4013      	ands	r3, r2
 800428a:	d113      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e07f      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004298:	4b41      	ldr	r3, [pc, #260]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429c:	2202      	movs	r2, #2
 800429e:	4013      	ands	r3, r2
 80042a0:	d108      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e074      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	4b3e      	ldr	r3, [pc, #248]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	2202      	movs	r2, #2
 80042ac:	4013      	ands	r3, r2
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e06d      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b4:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2207      	movs	r2, #7
 80042ba:	4393      	bics	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fc feba 	bl	8001040 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	e009      	b.n	80042e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f7fc feb5 	bl	8001040 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	4a2f      	ldr	r2, [pc, #188]	@ (800439c <HAL_RCC_ClockConfig+0x1f4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e054      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2e      	ldr	r3, [pc, #184]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2238      	movs	r2, #56	@ 0x38
 80042ec:	401a      	ands	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1ec      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b27      	ldr	r3, [pc, #156]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2207      	movs	r2, #7
 80042fe:	4013      	ands	r3, r2
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d21e      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b24      	ldr	r3, [pc, #144]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2207      	movs	r2, #7
 800430c:	4393      	bics	r3, r2
 800430e:	0019      	movs	r1, r3
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004318:	f7fc fe92 	bl	8001040 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004320:	e009      	b.n	8004336 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004322:	f7fc fe8d 	bl	8001040 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_RCC_ClockConfig+0x1f4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e02c      	b.n	8004390 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004336:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2207      	movs	r2, #7
 800433c:	4013      	ands	r3, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d1ee      	bne.n	8004322 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2204      	movs	r2, #4
 800434a:	4013      	ands	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <HAL_RCC_ClockConfig+0x200>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004362:	f000 f829 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004366:	0001      	movs	r1, r0
 8004368:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <HAL_RCC_ClockConfig+0x1f8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	220f      	movs	r2, #15
 8004370:	401a      	ands	r2, r3
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCC_ClockConfig+0x204>)
 8004374:	0092      	lsls	r2, r2, #2
 8004376:	58d3      	ldr	r3, [r2, r3]
 8004378:	221f      	movs	r2, #31
 800437a:	4013      	ands	r3, r2
 800437c:	000a      	movs	r2, r1
 800437e:	40da      	lsrs	r2, r3
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_ClockConfig+0x208>)
 8004382:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_ClockConfig+0x20c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0018      	movs	r0, r3
 800438a:	f7fc fdfd 	bl	8000f88 <HAL_InitTick>
 800438e:	0003      	movs	r3, r0
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40022000 	.word	0x40022000
 800439c:	00001388 	.word	0x00001388
 80043a0:	40021000 	.word	0x40021000
 80043a4:	fffff0ff 	.word	0xfffff0ff
 80043a8:	ffff8fff 	.word	0xffff8fff
 80043ac:	080056c0 	.word	0x080056c0
 80043b0:	20000004 	.word	0x20000004
 80043b4:	20000008 	.word	0x20000008

080043b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043be:	4b3c      	ldr	r3, [pc, #240]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2238      	movs	r2, #56	@ 0x38
 80043c4:	4013      	ands	r3, r2
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80043c8:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	0adb      	lsrs	r3, r3, #11
 80043ce:	2207      	movs	r2, #7
 80043d0:	4013      	ands	r3, r2
 80043d2:	2201      	movs	r2, #1
 80043d4:	409a      	lsls	r2, r3
 80043d6:	0013      	movs	r3, r2
 80043d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80043da:	6839      	ldr	r1, [r7, #0]
 80043dc:	4835      	ldr	r0, [pc, #212]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043de:	f7fb fe91 	bl	8000104 <__udivsi3>
 80043e2:	0003      	movs	r3, r0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e05d      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e8:	4b31      	ldr	r3, [pc, #196]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2238      	movs	r2, #56	@ 0x38
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d102      	bne.n	80043fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f4:	4b30      	ldr	r3, [pc, #192]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e054      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043fa:	4b2d      	ldr	r3, [pc, #180]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2238      	movs	r2, #56	@ 0x38
 8004400:	4013      	ands	r3, r2
 8004402:	2b10      	cmp	r3, #16
 8004404:	d138      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004406:	4b2a      	ldr	r3, [pc, #168]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2203      	movs	r2, #3
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	2207      	movs	r2, #7
 8004418:	4013      	ands	r3, r2
 800441a:	3301      	adds	r3, #1
 800441c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d10d      	bne.n	8004440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004428:	f7fb fe6c 	bl	8000104 <__udivsi3>
 800442c:	0003      	movs	r3, r0
 800442e:	0019      	movs	r1, r3
 8004430:	4b1f      	ldr	r3, [pc, #124]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	227f      	movs	r2, #127	@ 0x7f
 8004438:	4013      	ands	r3, r2
 800443a:	434b      	muls	r3, r1
 800443c:	617b      	str	r3, [r7, #20]
        break;
 800443e:	e00d      	b.n	800445c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	481c      	ldr	r0, [pc, #112]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004444:	f7fb fe5e 	bl	8000104 <__udivsi3>
 8004448:	0003      	movs	r3, r0
 800444a:	0019      	movs	r1, r3
 800444c:	4b18      	ldr	r3, [pc, #96]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	227f      	movs	r2, #127	@ 0x7f
 8004454:	4013      	ands	r3, r2
 8004456:	434b      	muls	r3, r1
 8004458:	617b      	str	r3, [r7, #20]
        break;
 800445a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800445c:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0f5b      	lsrs	r3, r3, #29
 8004462:	2207      	movs	r2, #7
 8004464:	4013      	ands	r3, r2
 8004466:	3301      	adds	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f7fb fe49 	bl	8000104 <__udivsi3>
 8004472:	0003      	movs	r3, r0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e015      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004478:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2238      	movs	r2, #56	@ 0x38
 800447e:	4013      	ands	r3, r2
 8004480:	2b20      	cmp	r3, #32
 8004482:	d103      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800448c:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2238      	movs	r2, #56	@ 0x38
 8004492:	4013      	ands	r3, r2
 8004494:	2b18      	cmp	r3, #24
 8004496:	d103      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004498:	23fa      	movs	r3, #250	@ 0xfa
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e001      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044a4:	693b      	ldr	r3, [r7, #16]
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	40021000 	.word	0x40021000
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	007a1200 	.word	0x007a1200

080044bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044c4:	2313      	movs	r3, #19
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044cc:	2312      	movs	r3, #18
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	029b      	lsls	r3, r3, #10
 80044dc:	4013      	ands	r3, r2
 80044de:	d100      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044e0:	e0a3      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2011      	movs	r0, #17
 80044e4:	183b      	adds	r3, r7, r0
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ea:	4bc3      	ldr	r3, [pc, #780]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ee:	2380      	movs	r3, #128	@ 0x80
 80044f0:	055b      	lsls	r3, r3, #21
 80044f2:	4013      	ands	r3, r2
 80044f4:	d110      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	4bc0      	ldr	r3, [pc, #768]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fa:	4bbf      	ldr	r3, [pc, #764]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044fc:	2180      	movs	r1, #128	@ 0x80
 80044fe:	0549      	lsls	r1, r1, #21
 8004500:	430a      	orrs	r2, r1
 8004502:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004504:	4bbc      	ldr	r3, [pc, #752]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	055b      	lsls	r3, r3, #21
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004512:	183b      	adds	r3, r7, r0
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004518:	4bb8      	ldr	r3, [pc, #736]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4bb7      	ldr	r3, [pc, #732]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	0049      	lsls	r1, r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004526:	f7fc fd8b 	bl	8001040 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fc fd86 	bl	8001040 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800453e:	2313      	movs	r3, #19
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2203      	movs	r2, #3
 8004544:	701a      	strb	r2, [r3, #0]
        break;
 8004546:	e005      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004548:	4bac      	ldr	r3, [pc, #688]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d0ed      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004554:	2313      	movs	r3, #19
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d154      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800455e:	4ba6      	ldr	r3, [pc, #664]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004560:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004562:	23c0      	movs	r3, #192	@ 0xc0
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4013      	ands	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d019      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	429a      	cmp	r2, r3
 8004578:	d014      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457a:	4b9f      	ldr	r3, [pc, #636]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800457c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457e:	4aa0      	ldr	r2, [pc, #640]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004580:	4013      	ands	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004584:	4b9c      	ldr	r3, [pc, #624]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004586:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004588:	4b9b      	ldr	r3, [pc, #620]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800458a:	2180      	movs	r1, #128	@ 0x80
 800458c:	0249      	lsls	r1, r1, #9
 800458e:	430a      	orrs	r2, r1
 8004590:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004592:	4b99      	ldr	r3, [pc, #612]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004594:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004596:	4b98      	ldr	r3, [pc, #608]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004598:	499a      	ldr	r1, [pc, #616]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800459a:	400a      	ands	r2, r1
 800459c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800459e:	4b96      	ldr	r3, [pc, #600]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d016      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fc fd48 	bl	8001040 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b4:	e00c      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fc fd43 	bl	8001040 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	4a91      	ldr	r2, [pc, #580]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d904      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045c6:	2313      	movs	r3, #19
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2203      	movs	r2, #3
 80045cc:	701a      	strb	r2, [r3, #0]
            break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d0:	4b89      	ldr	r3, [pc, #548]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d0ed      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045da:	2313      	movs	r3, #19
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e4:	4b84      	ldr	r3, [pc, #528]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	4a85      	ldr	r2, [pc, #532]	@ (8004800 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045f2:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fa:	2312      	movs	r3, #18
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2213      	movs	r2, #19
 8004600:	18ba      	adds	r2, r7, r2
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e005      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	2312      	movs	r3, #18
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2213      	movs	r2, #19
 800460e:	18ba      	adds	r2, r7, r2
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004614:	2311      	movs	r3, #17
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4b76      	ldr	r3, [pc, #472]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004622:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004624:	4979      	ldr	r1, [pc, #484]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004626:	400a      	ands	r2, r1
 8004628:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2201      	movs	r2, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004634:	4b70      	ldr	r3, [pc, #448]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	2203      	movs	r2, #3
 800463a:	4393      	bics	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	4b6d      	ldr	r3, [pc, #436]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004644:	430a      	orrs	r2, r1
 8004646:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2202      	movs	r2, #2
 800464e:	4013      	ands	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004652:	4b69      	ldr	r3, [pc, #420]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	220c      	movs	r2, #12
 8004658:	4393      	bics	r3, r2
 800465a:	0019      	movs	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b65      	ldr	r3, [pc, #404]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004662:	430a      	orrs	r2, r1
 8004664:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2210      	movs	r2, #16
 800466c:	4013      	ands	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004670:	4b61      	ldr	r3, [pc, #388]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	4a66      	ldr	r2, [pc, #408]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004676:	4013      	ands	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	4b5e      	ldr	r3, [pc, #376]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004680:	430a      	orrs	r2, r1
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4013      	ands	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004690:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	4a5f      	ldr	r2, [pc, #380]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	4b56      	ldr	r3, [pc, #344]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a0:	430a      	orrs	r2, r1
 80046a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4013      	ands	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b0:	4b51      	ldr	r3, [pc, #324]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	4a58      	ldr	r2, [pc, #352]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	4b4e      	ldr	r3, [pc, #312]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046c0:	430a      	orrs	r2, r1
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2220      	movs	r2, #32
 80046ca:	4013      	ands	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ce:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	4a52      	ldr	r2, [pc, #328]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	0019      	movs	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	4b46      	ldr	r3, [pc, #280]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046de:	430a      	orrs	r2, r1
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	2380      	movs	r3, #128	@ 0x80
 80046e8:	01db      	lsls	r3, r3, #7
 80046ea:	4013      	ands	r3, r2
 80046ec:	d015      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ee:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	0899      	lsrs	r1, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	4b3f      	ldr	r3, [pc, #252]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046fc:	430a      	orrs	r2, r1
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	429a      	cmp	r2, r3
 800470a:	d106      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800470c:	4b3a      	ldr	r3, [pc, #232]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	0249      	lsls	r1, r1, #9
 8004716:	430a      	orrs	r2, r1
 8004718:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	031b      	lsls	r3, r3, #12
 8004722:	4013      	ands	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004726:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	2240      	movs	r2, #64	@ 0x40
 800472c:	4393      	bics	r3, r2
 800472e:	0019      	movs	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004736:	430a      	orrs	r2, r1
 8004738:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	039b      	lsls	r3, r3, #14
 8004742:	4013      	ands	r3, r2
 8004744:	d016      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004746:	4b2c      	ldr	r3, [pc, #176]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800474c:	4013      	ands	r3, r2
 800474e:	0019      	movs	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004754:	4b28      	ldr	r3, [pc, #160]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004756:	430a      	orrs	r2, r1
 8004758:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800475e:	2380      	movs	r3, #128	@ 0x80
 8004760:	03db      	lsls	r3, r3, #15
 8004762:	429a      	cmp	r2, r3
 8004764:	d106      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b23      	ldr	r3, [pc, #140]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	0449      	lsls	r1, r1, #17
 8004770:	430a      	orrs	r2, r1
 8004772:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	03db      	lsls	r3, r3, #15
 800477c:	4013      	ands	r3, r2
 800477e:	d016      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004790:	430a      	orrs	r2, r1
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	045b      	lsls	r3, r3, #17
 800479c:	429a      	cmp	r2, r3
 800479e:	d106      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a6:	2180      	movs	r1, #128	@ 0x80
 80047a8:	0449      	lsls	r1, r1, #17
 80047aa:	430a      	orrs	r2, r1
 80047ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	4013      	ands	r3, r2
 80047b8:	d016      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047ba:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047be:	4a1a      	ldr	r2, [pc, #104]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047ca:	430a      	orrs	r2, r1
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	01db      	lsls	r3, r3, #7
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d106      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047da:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	0249      	lsls	r1, r1, #9
 80047e4:	430a      	orrs	r2, r1
 80047e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80047e8:	2312      	movs	r3, #18
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	781b      	ldrb	r3, [r3, #0]
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b006      	add	sp, #24
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40007000 	.word	0x40007000
 8004800:	fffffcff 	.word	0xfffffcff
 8004804:	fffeffff 	.word	0xfffeffff
 8004808:	00001388 	.word	0x00001388
 800480c:	efffffff 	.word	0xefffffff
 8004810:	fffff3ff 	.word	0xfffff3ff
 8004814:	fff3ffff 	.word	0xfff3ffff
 8004818:	ffcfffff 	.word	0xffcfffff
 800481c:	ffffcfff 	.word	0xffffcfff
 8004820:	ffbfffff 	.word	0xffbfffff
 8004824:	feffffff 	.word	0xfeffffff
 8004828:	ffff3fff 	.word	0xffff3fff

0800482c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e04a      	b.n	80048d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	223d      	movs	r2, #61	@ 0x3d
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d107      	bne.n	800485a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	223c      	movs	r2, #60	@ 0x3c
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7fc fa87 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	223d      	movs	r2, #61	@ 0x3d
 800485e:	2102      	movs	r1, #2
 8004860:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	0019      	movs	r1, r3
 800486c:	0010      	movs	r0, r2
 800486e:	f000 fb85 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2248      	movs	r2, #72	@ 0x48
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	223e      	movs	r2, #62	@ 0x3e
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223f      	movs	r2, #63	@ 0x3f
 8004886:	2101      	movs	r1, #1
 8004888:	5499      	strb	r1, [r3, r2]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2240      	movs	r2, #64	@ 0x40
 800488e:	2101      	movs	r1, #1
 8004890:	5499      	strb	r1, [r3, r2]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2241      	movs	r2, #65	@ 0x41
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2242      	movs	r2, #66	@ 0x42
 800489e:	2101      	movs	r1, #1
 80048a0:	5499      	strb	r1, [r3, r2]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2243      	movs	r2, #67	@ 0x43
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2244      	movs	r2, #68	@ 0x44
 80048ae:	2101      	movs	r1, #1
 80048b0:	5499      	strb	r1, [r3, r2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2245      	movs	r2, #69	@ 0x45
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2246      	movs	r2, #70	@ 0x46
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2247      	movs	r2, #71	@ 0x47
 80048c6:	2101      	movs	r1, #1
 80048c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	223d      	movs	r2, #61	@ 0x3d
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e04a      	b.n	8004984 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223d      	movs	r2, #61	@ 0x3d
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	223c      	movs	r2, #60	@ 0x3c
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 f841 	bl	800498c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	223d      	movs	r2, #61	@ 0x3d
 800490e:	2102      	movs	r1, #2
 8004910:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	0019      	movs	r1, r3
 800491c:	0010      	movs	r0, r2
 800491e:	f000 fb2d 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2248      	movs	r2, #72	@ 0x48
 8004926:	2101      	movs	r1, #1
 8004928:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223e      	movs	r2, #62	@ 0x3e
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	223f      	movs	r2, #63	@ 0x3f
 8004936:	2101      	movs	r1, #1
 8004938:	5499      	strb	r1, [r3, r2]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2240      	movs	r2, #64	@ 0x40
 800493e:	2101      	movs	r1, #1
 8004940:	5499      	strb	r1, [r3, r2]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	@ 0x41
 8004946:	2101      	movs	r1, #1
 8004948:	5499      	strb	r1, [r3, r2]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2242      	movs	r2, #66	@ 0x42
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2243      	movs	r2, #67	@ 0x43
 8004956:	2101      	movs	r1, #1
 8004958:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2244      	movs	r2, #68	@ 0x44
 800495e:	2101      	movs	r1, #1
 8004960:	5499      	strb	r1, [r3, r2]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2245      	movs	r2, #69	@ 0x45
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2246      	movs	r2, #70	@ 0x46
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2247      	movs	r2, #71	@ 0x47
 8004976:	2101      	movs	r1, #1
 8004978:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223d      	movs	r2, #61	@ 0x3d
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b002      	add	sp, #8
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004994:	46c0      	nop			@ (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2202      	movs	r2, #2
 80049b8:	4013      	ands	r3, r2
 80049ba:	d021      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2202      	movs	r2, #2
 80049c0:	4013      	ands	r3, r2
 80049c2:	d01d      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2203      	movs	r2, #3
 80049ca:	4252      	negs	r2, r2
 80049cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2203      	movs	r2, #3
 80049dc:	4013      	ands	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 fab2 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 80049e8:	e007      	b.n	80049fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 faa5 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 fab1 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d01e      	beq.n	8004a4e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2205      	movs	r2, #5
 8004a16:	4252      	negs	r2, r2
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	23c0      	movs	r3, #192	@ 0xc0
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 fa8b 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 fa7e 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fa8a 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2208      	movs	r2, #8
 8004a52:	4013      	ands	r3, r2
 8004a54:	d021      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2209      	movs	r2, #9
 8004a64:	4252      	negs	r2, r2
 8004a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	2203      	movs	r2, #3
 8004a76:	4013      	ands	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 fa65 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004a82:	e007      	b.n	8004a94 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 fa58 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fa64 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d01e      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2211      	movs	r2, #17
 8004ab0:	4252      	negs	r2, r2
 8004ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	23c0      	movs	r3, #192	@ 0xc0
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fa3e 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e007      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fa31 	bl	8004f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 fa3d 	bl	8004f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	4013      	ands	r3, r2
 8004af6:	d008      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4252      	negs	r2, r2
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 fa11 	bl	8004f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2280      	movs	r2, #128	@ 0x80
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d104      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	019b      	lsls	r3, r3, #6
 8004b18:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b1a:	d00b      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2280      	movs	r2, #128	@ 0x80
 8004b20:	4013      	ands	r3, r2
 8004b22:	d007      	beq.n	8004b34 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <HAL_TIM_IRQHandler+0x208>)
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 fd7e 	bl	8005630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2280      	movs	r2, #128	@ 0x80
 8004b42:	4013      	ands	r3, r2
 8004b44:	d007      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <HAL_TIM_IRQHandler+0x20c>)
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f000 fd75 	bl	8005640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2240      	movs	r2, #64	@ 0x40
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d00c      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2240      	movs	r2, #64	@ 0x40
 8004b62:	4013      	ands	r3, r2
 8004b64:	d008      	beq.n	8004b78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2241      	movs	r2, #65	@ 0x41
 8004b6c:	4252      	negs	r2, r2
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 f9fa 	bl	8004f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	4013      	ands	r3, r2
 8004b86:	d008      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2221      	movs	r2, #33	@ 0x21
 8004b8e:	4252      	negs	r2, r2
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 fd43 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	ffffdf7f 	.word	0xffffdf7f
 8004ba8:	fffffeff 	.word	0xfffffeff

08004bac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2317      	movs	r3, #23
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	223c      	movs	r2, #60	@ 0x3c
 8004bc4:	5c9b      	ldrb	r3, [r3, r2]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_IC_ConfigChannel+0x22>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e08c      	b.n	8004ce8 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	223c      	movs	r2, #60	@ 0x3c
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004bec:	f000 faea 	bl	80051c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	210c      	movs	r1, #12
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	619a      	str	r2, [r3, #24]
 8004c12:	e062      	b.n	8004cda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d11c      	bne.n	8004c54 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c2a:	f000 fb55 	bl	80052d8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	492d      	ldr	r1, [pc, #180]	@ (8004cf0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6999      	ldr	r1, [r3, #24]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	619a      	str	r2, [r3, #24]
 8004c52:	e042      	b.n	8004cda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c6a:	f000 fba9 	bl	80053c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	210c      	movs	r1, #12
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	61da      	str	r2, [r3, #28]
 8004c90:	e023      	b.n	8004cda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d11c      	bne.n	8004cd2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ca8:	f000 fbca 	bl	8005440 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	490e      	ldr	r1, [pc, #56]	@ (8004cf0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004cb8:	400a      	ands	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69d9      	ldr	r1, [r3, #28]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	61da      	str	r2, [r3, #28]
 8004cd0:	e003      	b.n	8004cda <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004cd2:	2317      	movs	r3, #23
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	223c      	movs	r2, #60	@ 0x3c
 8004cde:	2100      	movs	r1, #0
 8004ce0:	5499      	strb	r1, [r3, r2]

  return status;
 8004ce2:	2317      	movs	r3, #23
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	781b      	ldrb	r3, [r3, #0]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b006      	add	sp, #24
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	fffff3ff 	.word	0xfffff3ff

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223c      	movs	r2, #60	@ 0x3c
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x20>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0bc      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x19a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	223c      	movs	r2, #60	@ 0x3c
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223d      	movs	r2, #61	@ 0x3d
 8004d20:	2102      	movs	r1, #2
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004e98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a59      	ldr	r2, [pc, #356]	@ (8004e9c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2280      	movs	r2, #128	@ 0x80
 8004d4a:	0192      	lsls	r2, r2, #6
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d040      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xde>
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	0192      	lsls	r2, r2, #6
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d900      	bls.n	8004d5a <HAL_TIM_ConfigClockSource+0x66>
 8004d58:	e088      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d5a:	2280      	movs	r2, #128	@ 0x80
 8004d5c:	0152      	lsls	r2, r2, #5
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d100      	bne.n	8004d64 <HAL_TIM_ConfigClockSource+0x70>
 8004d62:	e088      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x182>
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	0152      	lsls	r2, r2, #5
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d900      	bls.n	8004d6e <HAL_TIM_ConfigClockSource+0x7a>
 8004d6c:	e07e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d6e:	2b70      	cmp	r3, #112	@ 0x70
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xb0>
 8004d72:	d900      	bls.n	8004d76 <HAL_TIM_ConfigClockSource+0x82>
 8004d74:	e07a      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d76:	2b60      	cmp	r3, #96	@ 0x60
 8004d78:	d04f      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x126>
 8004d7a:	d900      	bls.n	8004d7e <HAL_TIM_ConfigClockSource+0x8a>
 8004d7c:	e076      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d7e:	2b50      	cmp	r3, #80	@ 0x50
 8004d80:	d03b      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x106>
 8004d82:	d900      	bls.n	8004d86 <HAL_TIM_ConfigClockSource+0x92>
 8004d84:	e072      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d057      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x146>
 8004d8a:	d900      	bls.n	8004d8e <HAL_TIM_ConfigClockSource+0x9a>
 8004d8c:	e06e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d8e:	2b30      	cmp	r3, #48	@ 0x30
 8004d90:	d063      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d98:	d868      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d05d      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d05b      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004da2:	e063      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	f000 fba6 	bl	8005504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2277      	movs	r2, #119	@ 0x77
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
      break;
 8004dd0:	e052      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	f000 fb8f 	bl	8005504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2180      	movs	r1, #128	@ 0x80
 8004df2:	01c9      	lsls	r1, r1, #7
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	001a      	movs	r2, r3
 8004e08:	f000 fa38 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	@ 0x50
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fb5a 	bl	80054cc <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	001a      	movs	r2, r3
 8004e28:	f000 fa98 	bl	800535c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	@ 0x60
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fb4a 	bl	80054cc <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	001a      	movs	r2, r3
 8004e48:	f000 fa18 	bl	800527c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fb3a 	bl	80054cc <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f000 fb31 	bl	80054cc <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e005      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e76:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	223d      	movs	r2, #61	@ 0x3d
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	223c      	movs	r2, #60	@ 0x3c
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

  return status;
 8004e88:	230f      	movs	r3, #15
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b004      	add	sp, #16
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	ffceff88 	.word	0xffceff88
 8004e9c:	ffff00ff 	.word	0xffff00ff

08004ea0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223c      	movs	r2, #60	@ 0x3c
 8004eae:	5c9b      	ldrb	r3, [r3, r2]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e032      	b.n	8004f1e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	223c      	movs	r2, #60	@ 0x3c
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	223d      	movs	r2, #61	@ 0x3d
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0011      	movs	r1, r2
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 f8e2 	bl	8005098 <TIM_SlaveTimer_SetConfig>
 8004ed4:	1e03      	subs	r3, r0, #0
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	223d      	movs	r2, #61	@ 0x3d
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223c      	movs	r2, #60	@ 0x3c
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e018      	b.n	8004f1e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2140      	movs	r1, #64	@ 0x40
 8004ef8:	438a      	bics	r2, r1
 8004efa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4908      	ldr	r1, [pc, #32]	@ (8004f28 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	223d      	movs	r2, #61	@ 0x3d
 8004f10:	2101      	movs	r1, #1
 8004f12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223c      	movs	r2, #60	@ 0x3c
 8004f18:	2100      	movs	r1, #0
 8004f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b002      	add	sp, #8
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	ffffbfff 	.word	0xffffbfff

08004f2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f34:	46c0      	nop			@ (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f44:	46c0      	nop			@ (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f64:	46c0      	nop			@ (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800507c <TIM_Base_SetConfig+0x100>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d008      	beq.n	8004fa6 <TIM_Base_SetConfig+0x2a>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	05db      	lsls	r3, r3, #23
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x2a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a37      	ldr	r2, [pc, #220]	@ (8005080 <TIM_Base_SetConfig+0x104>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2270      	movs	r2, #112	@ 0x70
 8004faa:	4393      	bics	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a30      	ldr	r2, [pc, #192]	@ (800507c <TIM_Base_SetConfig+0x100>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	05db      	lsls	r3, r3, #23
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d013      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005080 <TIM_Base_SetConfig+0x104>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8005084 <TIM_Base_SetConfig+0x108>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <TIM_Base_SetConfig+0x10c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	@ (800508c <TIM_Base_SetConfig+0x110>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x76>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a28      	ldr	r2, [pc, #160]	@ (8005090 <TIM_Base_SetConfig+0x114>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	@ (8005094 <TIM_Base_SetConfig+0x118>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2280      	movs	r2, #128	@ 0x80
 8005008:	4393      	bics	r3, r2
 800500a:	001a      	movs	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a13      	ldr	r2, [pc, #76]	@ (800507c <TIM_Base_SetConfig+0x100>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0xce>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a14      	ldr	r2, [pc, #80]	@ (8005088 <TIM_Base_SetConfig+0x10c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0xce>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a13      	ldr	r2, [pc, #76]	@ (800508c <TIM_Base_SetConfig+0x110>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0xce>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a12      	ldr	r2, [pc, #72]	@ (8005090 <TIM_Base_SetConfig+0x114>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d103      	bne.n	8005052 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2201      	movs	r2, #1
 800505e:	4013      	ands	r3, r2
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2201      	movs	r2, #1
 800506a:	4393      	bics	r3, r2
 800506c:	001a      	movs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	611a      	str	r2, [r3, #16]
  }
}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40000400 	.word	0x40000400
 8005084:	40002000 	.word	0x40002000
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800
 8005094:	fffffcff 	.word	0xfffffcff

08005098 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2317      	movs	r3, #23
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4a41      	ldr	r2, [pc, #260]	@ (80051bc <TIM_SlaveTimer_SetConfig+0x124>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4a3e      	ldr	r2, [pc, #248]	@ (80051c0 <TIM_SlaveTimer_SetConfig+0x128>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b70      	cmp	r3, #112	@ 0x70
 80050e4:	d015      	beq.n	8005112 <TIM_SlaveTimer_SetConfig+0x7a>
 80050e6:	d900      	bls.n	80050ea <TIM_SlaveTimer_SetConfig+0x52>
 80050e8:	e05b      	b.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80050ea:	2b60      	cmp	r3, #96	@ 0x60
 80050ec:	d04f      	beq.n	800518e <TIM_SlaveTimer_SetConfig+0xf6>
 80050ee:	d858      	bhi.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80050f0:	2b50      	cmp	r3, #80	@ 0x50
 80050f2:	d042      	beq.n	800517a <TIM_SlaveTimer_SetConfig+0xe2>
 80050f4:	d855      	bhi.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d016      	beq.n	8005128 <TIM_SlaveTimer_SetConfig+0x90>
 80050fa:	d852      	bhi.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80050fc:	2b30      	cmp	r3, #48	@ 0x30
 80050fe:	d055      	beq.n	80051ac <TIM_SlaveTimer_SetConfig+0x114>
 8005100:	d84f      	bhi.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005102:	2b20      	cmp	r3, #32
 8005104:	d052      	beq.n	80051ac <TIM_SlaveTimer_SetConfig+0x114>
 8005106:	d84c      	bhi.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d04f      	beq.n	80051ac <TIM_SlaveTimer_SetConfig+0x114>
 800510c:	2b10      	cmp	r3, #16
 800510e:	d04d      	beq.n	80051ac <TIM_SlaveTimer_SetConfig+0x114>
 8005110:	e047      	b.n	80051a2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005122:	f000 f9ef 	bl	8005504 <TIM_ETR_SetConfig>
      break;
 8005126:	e042      	b.n	80051ae <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d101      	bne.n	8005134 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e03f      	b.n	80051b4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	22f0      	movs	r2, #240	@ 0xf0
 8005158:	4393      	bics	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	621a      	str	r2, [r3, #32]
      break;
 8005178:	e019      	b.n	80051ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	001a      	movs	r2, r3
 8005188:	f000 f878 	bl	800527c <TIM_TI1_ConfigInputStage>
      break;
 800518c:	e00f      	b.n	80051ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	001a      	movs	r2, r3
 800519c:	f000 f8de 	bl	800535c <TIM_TI2_ConfigInputStage>
      break;
 80051a0:	e005      	b.n	80051ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80051a2:	2317      	movs	r3, #23
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
      break;
 80051aa:	e000      	b.n	80051ae <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80051ac:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80051ae:	2317      	movs	r3, #23
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	781b      	ldrb	r3, [r3, #0]
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b006      	add	sp, #24
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	ffcfff8f 	.word	0xffcfff8f
 80051c0:	fffefff8 	.word	0xfffefff8

080051c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	2201      	movs	r2, #1
 80051de:	4393      	bics	r3, r2
 80051e0:	001a      	movs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <TIM_TI1_SetConfig+0xac>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00c      	beq.n	800520e <TIM_TI1_SetConfig+0x4a>
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	05db      	lsls	r3, r3, #23
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d007      	beq.n	800520e <TIM_TI1_SetConfig+0x4a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a1c      	ldr	r2, [pc, #112]	@ (8005274 <TIM_TI1_SetConfig+0xb0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_TI1_SetConfig+0x4a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <TIM_TI1_SetConfig+0xb4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <TIM_TI1_SetConfig+0x4e>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <TIM_TI1_SetConfig+0x50>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2203      	movs	r2, #3
 800521c:	4393      	bics	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e003      	b.n	8005232 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2201      	movs	r2, #1
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	22f0      	movs	r2, #240	@ 0xf0
 8005236:	4393      	bics	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	22ff      	movs	r2, #255	@ 0xff
 8005240:	4013      	ands	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	220a      	movs	r2, #10
 800524c:	4393      	bics	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	220a      	movs	r2, #10
 8005254:	4013      	ands	r3, r2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	46c0      	nop			@ (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	b006      	add	sp, #24
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400
 8005278:	40014000 	.word	0x40014000

0800527c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	2201      	movs	r2, #1
 8005294:	4393      	bics	r3, r2
 8005296:	001a      	movs	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	22f0      	movs	r2, #240	@ 0xf0
 80052a6:	4393      	bics	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	220a      	movs	r2, #10
 80052b8:	4393      	bics	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	46c0      	nop			@ (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b006      	add	sp, #24
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	2210      	movs	r2, #16
 80052f2:	4393      	bics	r3, r2
 80052f4:	001a      	movs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4a14      	ldr	r2, [pc, #80]	@ (8005354 <TIM_TI2_SetConfig+0x7c>)
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <TIM_TI2_SetConfig+0x80>)
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	0c1b      	lsrs	r3, r3, #16
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	22a0      	movs	r2, #160	@ 0xa0
 800532c:	4393      	bics	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	22a0      	movs	r2, #160	@ 0xa0
 8005336:	4013      	ands	r3, r2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b006      	add	sp, #24
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	fffffcff 	.word	0xfffffcff
 8005358:	ffff0fff 	.word	0xffff0fff

0800535c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	2210      	movs	r2, #16
 8005374:	4393      	bics	r3, r2
 8005376:	001a      	movs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4a0d      	ldr	r2, [pc, #52]	@ (80053bc <TIM_TI2_ConfigInputStage+0x60>)
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	22a0      	movs	r2, #160	@ 0xa0
 8005398:	4393      	bics	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b006      	add	sp, #24
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	ffff0fff 	.word	0xffff0fff

080053c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <TIM_TI3_SetConfig+0x78>)
 80053da:	401a      	ands	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2203      	movs	r2, #3
 80053ea:	4393      	bics	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	22f0      	movs	r2, #240	@ 0xf0
 80053fa:	4393      	bics	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	4013      	ands	r3, r2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4a0b      	ldr	r2, [pc, #44]	@ (800543c <TIM_TI3_SetConfig+0x7c>)
 8005410:	4013      	ands	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	021a      	lsls	r2, r3, #8
 8005418:	23a0      	movs	r3, #160	@ 0xa0
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4013      	ands	r3, r2
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b006      	add	sp, #24
 8005436:	bd80      	pop	{r7, pc}
 8005438:	fffffeff 	.word	0xfffffeff
 800543c:	fffff5ff 	.word	0xfffff5ff

08005440 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <TIM_TI4_SetConfig+0x7c>)
 800545a:	401a      	ands	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4a15      	ldr	r2, [pc, #84]	@ (80054c0 <TIM_TI4_SetConfig+0x80>)
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <TIM_TI4_SetConfig+0x84>)
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4a0d      	ldr	r2, [pc, #52]	@ (80054c8 <TIM_TI4_SetConfig+0x88>)
 8005492:	4013      	ands	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	031a      	lsls	r2, r3, #12
 800549a:	23a0      	movs	r3, #160	@ 0xa0
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	4013      	ands	r3, r2
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b006      	add	sp, #24
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	ffffefff 	.word	0xffffefff
 80054c0:	fffffcff 	.word	0xfffffcff
 80054c4:	ffff0fff 	.word	0xffff0fff
 80054c8:	ffff5fff 	.word	0xffff5fff

080054cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a08      	ldr	r2, [pc, #32]	@ (8005500 <TIM_ITRx_SetConfig+0x34>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	2207      	movs	r2, #7
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	609a      	str	r2, [r3, #8]
}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	ffcfff8f 	.word	0xffcfff8f

08005504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <TIM_ETR_SetConfig+0x3c>)
 800551c:	4013      	ands	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	46c0      	nop			@ (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b006      	add	sp, #24
 800553e:	bd80      	pop	{r7, pc}
 8005540:	ffff00ff 	.word	0xffff00ff

08005544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	223c      	movs	r2, #60	@ 0x3c
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005558:	2302      	movs	r3, #2
 800555a:	e055      	b.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223c      	movs	r2, #60	@ 0x3c
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	223d      	movs	r2, #61	@ 0x3d
 8005568:	2102      	movs	r1, #2
 800556a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a23      	ldr	r2, [pc, #140]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a22      	ldr	r2, [pc, #136]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800558a:	4013      	ands	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2270      	movs	r2, #112	@ 0x70
 800559c:	4393      	bics	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00f      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	05db      	lsls	r3, r3, #23
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d009      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a12      	ldr	r2, [pc, #72]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a11      	ldr	r2, [pc, #68]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10c      	bne.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	4393      	bics	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	223d      	movs	r2, #61	@ 0x3d
 80055fa:	2101      	movs	r1, #1
 80055fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	223c      	movs	r2, #60	@ 0x3c
 8005602:	2100      	movs	r1, #0
 8005604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	0018      	movs	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	b004      	add	sp, #16
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40012c00 	.word	0x40012c00
 8005614:	ff0fffff 	.word	0xff0fffff
 8005618:	40000400 	.word	0x40000400
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005638:	46c0      	nop			@ (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005648:	46c0      	nop			@ (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <memset>:
 8005650:	0003      	movs	r3, r0
 8005652:	1882      	adds	r2, r0, r2
 8005654:	4293      	cmp	r3, r2
 8005656:	d100      	bne.n	800565a <memset+0xa>
 8005658:	4770      	bx	lr
 800565a:	7019      	strb	r1, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	e7f9      	b.n	8005654 <memset+0x4>

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2600      	movs	r6, #0
 8005664:	4c0c      	ldr	r4, [pc, #48]	@ (8005698 <__libc_init_array+0x38>)
 8005666:	4d0d      	ldr	r5, [pc, #52]	@ (800569c <__libc_init_array+0x3c>)
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	2600      	movs	r6, #0
 8005672:	f000 f819 	bl	80056a8 <_init>
 8005676:	4c0a      	ldr	r4, [pc, #40]	@ (80056a0 <__libc_init_array+0x40>)
 8005678:	4d0a      	ldr	r5, [pc, #40]	@ (80056a4 <__libc_init_array+0x44>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	00b3      	lsls	r3, r6, #2
 8005686:	58eb      	ldr	r3, [r5, r3]
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	00b3      	lsls	r3, r6, #2
 8005690:	58eb      	ldr	r3, [r5, r3]
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	08005700 	.word	0x08005700
 800569c:	08005700 	.word	0x08005700
 80056a0:	08005704 	.word	0x08005704
 80056a4:	08005700 	.word	0x08005700

080056a8 <_init>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr

080056b4 <_fini>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr
