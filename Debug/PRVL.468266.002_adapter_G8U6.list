
PRVL.468266.002_adapter_G8U6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ec4  08002ec4  00003ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002f0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08002f1c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002f1c  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41a  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200b  00000000  00000000  00011452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00013460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad8  00000000  00000000  00014238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c26  00000000  00000000  00014d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c2a  00000000  00000000  0002c936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa22  00000000  00000000  0003d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000322c  00000000  00000000  000d7fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000db1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002eac 	.word	0x08002eac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08002eac 	.word	0x08002eac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <SetButton>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
AdapterState state = 0;

void SetButton(GPIO_PinState state)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PWR_SW_GPIO_Port, PWR_SW_Pin, state);
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781a      	ldrb	r2, [r3, #0]
 800022c:	23a0      	movs	r3, #160	@ 0xa0
 800022e:	05db      	lsls	r3, r3, #23
 8000230:	2110      	movs	r1, #16
 8000232:	0018      	movs	r0, r3
 8000234:	f000 ff05 	bl	8001042 <HAL_GPIO_WritePin>
}
 8000238:	46c0      	nop			@ (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <SetPWROK>:
	HAL_Delay(100);
	SetButton(GPIO_PIN_SET);
}

void SetPWROK(PWROKState state)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	0002      	movs	r2, r0
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB_PWROK_GPIO_Port, MB_PWROK_Pin, (state == HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	425a      	negs	r2, r3
 8000254:	4153      	adcs	r3, r2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	001a      	movs	r2, r3
 800025a:	23a0      	movs	r3, #160	@ 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	2108      	movs	r1, #8
 8000260:	0018      	movs	r0, r3
 8000262:	f000 feee 	bl	8001042 <HAL_GPIO_WritePin>
	PWR_OK_State = state;
 8000266:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <SetPWROK+0x38>)
 8000268:	1dfa      	adds	r2, r7, #7
 800026a:	7812      	ldrb	r2, [r2, #0]
 800026c:	701a      	strb	r2, [r3, #0]
}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	b002      	add	sp, #8
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	20000001 	.word	0x20000001

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fbe4 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f842 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f9d2 	bl	8000630 <MX_GPIO_Init>
  MX_I2C1_Init();
 800028c:	f000 f89c 	bl	80003c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000290:	f000 f8da 	bl	8000448 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000294:	f000 f918 	bl	80004c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SetButton(GPIO_PIN_SET);
 8000298:	2001      	movs	r0, #1
 800029a:	f7ff ffbf 	bl	800021c <SetButton>
  	SetPWROK(HIGH);
 800029e:	2001      	movs	r0, #1
 80002a0:	f7ff ffce 	bl	8000240 <SetPWROK>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80002a4:	23a0      	movs	r3, #160	@ 0xa0
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2104      	movs	r1, #4
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 feac 	bl	8001008 <HAL_GPIO_ReadPin>
 80002b0:	0003      	movs	r3, r0
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <main+0x84>)
 80002b6:	701a      	strb	r2, [r3, #0]

	  if (State == PWR_ON && !MB_State)
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <main+0x88>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b03      	cmp	r3, #3
 80002be:	d10f      	bne.n	80002e0 <main+0x64>
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <main+0x84>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d10b      	bne.n	80002e0 <main+0x64>
	  {
		  HAL_GPIO_WritePin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin, !MB_State);
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <main+0x84>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	425a      	negs	r2, r3
 80002ce:	4153      	adcs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <main+0x8c>)
 80002d6:	2110      	movs	r1, #16
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 feb2 	bl	8001042 <HAL_GPIO_WritePin>
 80002de:	e00e      	b.n	80002fe <main+0x82>
	  }
	  else if (State == PWR_OFF)
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <main+0x88>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1dd      	bne.n	80002a4 <main+0x28>
	  {
		  if (MB_State)
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <main+0x84>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0d9      	beq.n	80002a4 <main+0x28>
		  {
			  HAL_GPIO_WritePin(MB_STATUS_LED_GPIO_Port, MB_STATUS_LED_Pin, MB_State);
 80002f0:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <main+0x84>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <main+0x8c>)
 80002f6:	001a      	movs	r2, r3
 80002f8:	2110      	movs	r1, #16
 80002fa:	f000 fea2 	bl	8001042 <HAL_GPIO_WritePin>
	  MB_State = HAL_GPIO_ReadPin(MB_PSON_GPIO_Port, MB_PSON_Pin);
 80002fe:	e7d1      	b.n	80002a4 <main+0x28>
 8000300:	20000000 	.word	0x20000000
 8000304:	20000120 	.word	0x20000120
 8000308:	50000400 	.word	0x50000400

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b093      	sub	sp, #76	@ 0x4c
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	2410      	movs	r4, #16
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	2338      	movs	r3, #56	@ 0x38
 800031a:	001a      	movs	r2, r3
 800031c:	2100      	movs	r1, #0
 800031e:	f002 fd99 	bl	8002e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000322:	003b      	movs	r3, r7
 8000324:	0018      	movs	r0, r3
 8000326:	2310      	movs	r3, #16
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 fd92 	bl	8002e54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000330:	2380      	movs	r3, #128	@ 0x80
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ffdf 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	2280      	movs	r2, #128	@ 0x80
 8000344:	0052      	lsls	r2, r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000348:	0021      	movs	r1, r4
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2240      	movs	r2, #64	@ 0x40
 8000354:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2202      	movs	r2, #2
 800035a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2202      	movs	r2, #2
 8000360:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2208      	movs	r2, #8
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	0292      	lsls	r2, r2, #10
 8000374:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	22e0      	movs	r2, #224	@ 0xe0
 800037a:	0512      	lsls	r2, r2, #20
 800037c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2280      	movs	r2, #128	@ 0x80
 8000382:	0592      	lsls	r2, r2, #22
 8000384:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	187b      	adds	r3, r7, r1
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fff5 	bl	8001378 <HAL_RCC_OscConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000392:	f000 f9d1 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	003b      	movs	r3, r7
 8000398:	2207      	movs	r2, #7
 800039a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039c:	003b      	movs	r3, r7
 800039e:	2202      	movs	r2, #2
 80003a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ae:	003b      	movs	r3, r7
 80003b0:	2102      	movs	r1, #2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fafa 	bl	80019ac <HAL_RCC_ClockConfig>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003bc:	f000 f9bc 	bl	8000738 <Error_Handler>
  }
}
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b013      	add	sp, #76	@ 0x4c
 80003c6:	bd90      	pop	{r4, r7, pc}

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_I2C1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <MX_I2C1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <MX_I2C1_Init+0x74>)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000444 <MX_I2C1_Init+0x7c>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003de:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_I2C1_Init+0x74>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b14      	ldr	r3, [pc, #80]	@ (800043c <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f6:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_I2C1_Init+0x74>)
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fe39 	bl	800107c <HAL_I2C_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040e:	f000 f993 	bl	8000738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_I2C1_Init+0x74>)
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f000 fed6 	bl	80011c8 <HAL_I2CEx_ConfigAnalogFilter>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000420:	f000 f98a 	bl	8000738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <MX_I2C1_Init+0x74>)
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f000 ff19 	bl	8001260 <HAL_I2CEx_ConfigDigitalFilter>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f981 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	2000002c 	.word	0x2000002c
 8000440:	40005400 	.word	0x40005400
 8000444:	10b17db5 	.word	0x10b17db5

08000448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <MX_I2C2_Init+0x74>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	@ (80004c0 <MX_I2C2_Init+0x78>)
 8000450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000454:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <MX_I2C2_Init+0x7c>)
 8000456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000458:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_I2C2_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045e:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000460:	2201      	movs	r2, #1
 8000462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000464:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800046a:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <MX_I2C2_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000470:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <MX_I2C2_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fdf9 	bl	800107c <HAL_I2C_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800048e:	f000 f953 	bl	8000738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <MX_I2C2_Init+0x74>)
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fe96 	bl	80011c8 <HAL_I2CEx_ConfigAnalogFilter>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004a0:	f000 f94a 	bl	8000738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <MX_I2C2_Init+0x74>)
 80004a6:	2100      	movs	r1, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fed9 	bl	8001260 <HAL_I2CEx_ConfigDigitalFilter>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f941 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000080 	.word	0x20000080
 80004c0:	40005800 	.word	0x40005800
 80004c4:	10b17db5 	.word	0x10b17db5

080004c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	@ 0x40
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	2330      	movs	r3, #48	@ 0x30
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2310      	movs	r3, #16
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fcbb 	bl	8002e54 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004de:	231c      	movs	r3, #28
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fcb3 	bl	8002e54 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004ee:	230c      	movs	r3, #12
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2310      	movs	r3, #16
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fcab 	bl	8002e54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	230c      	movs	r3, #12
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 fca4 	bl	8002e54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800050c:	4b46      	ldr	r3, [pc, #280]	@ (8000628 <MX_TIM1_Init+0x160>)
 800050e:	4a47      	ldr	r2, [pc, #284]	@ (800062c <MX_TIM1_Init+0x164>)
 8000510:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000512:	4b45      	ldr	r3, [pc, #276]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000514:	221f      	movs	r2, #31
 8000516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b43      	ldr	r3, [pc, #268]	@ (8000628 <MX_TIM1_Init+0x160>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 800051e:	4b42      	ldr	r3, [pc, #264]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000520:	2231      	movs	r2, #49	@ 0x31
 8000522:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b40      	ldr	r3, [pc, #256]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800052a:	4b3f      	ldr	r3, [pc, #252]	@ (8000628 <MX_TIM1_Init+0x160>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b3d      	ldr	r3, [pc, #244]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000536:	4b3c      	ldr	r3, [pc, #240]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fd79 	bl	8002030 <HAL_TIM_Base_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000542:	f000 f8f9 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	2130      	movs	r1, #48	@ 0x30
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000550:	187a      	adds	r2, r7, r1
 8000552:	4b35      	ldr	r3, [pc, #212]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 ffce 	bl	80024f8 <HAL_TIM_ConfigClockSource>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000560:	f000 f8ea 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000564:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fdba 	bl	80020e0 <HAL_TIM_IC_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 f8e2 	bl	8000738 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000574:	211c      	movs	r1, #28
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2204      	movs	r2, #4
 800057a:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2250      	movs	r2, #80	@ 0x50
 8000580:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000594:	187a      	adds	r2, r7, r1
 8000596:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <MX_TIM1_Init+0x160>)
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f002 f882 	bl	80026a4 <HAL_TIM_SlaveConfigSynchro>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80005a4:	f000 f8c8 	bl	8000738 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005a8:	210c      	movs	r1, #12
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2201      	movs	r2, #1
 80005b4:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005c2:	1879      	adds	r1, r7, r1
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <MX_TIM1_Init+0x160>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fef1 	bl	80023b0 <HAL_TIM_IC_ConfigChannel>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80005d2:	f000 f8b1 	bl	8000738 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80005d6:	210c      	movs	r1, #12
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80005e4:	1879      	adds	r1, r7, r1
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <MX_TIM1_Init+0x160>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fee0 	bl	80023b0 <HAL_TIM_IC_ConfigChannel>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80005f4:	f000 f8a0 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	003b      	movs	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060a:	003a      	movs	r2, r7
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_TIM1_Init+0x160>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f002 fb99 	bl	8002d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800061a:	f000 f88d 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b010      	add	sp, #64	@ 0x40
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	200000d4 	.word	0x200000d4
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 fc07 	bl	8002e54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b3a      	ldr	r3, [pc, #232]	@ (8000730 <MX_GPIO_Init+0x100>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064a:	4b39      	ldr	r3, [pc, #228]	@ (8000730 <MX_GPIO_Init+0x100>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
 8000652:	4b37      	ldr	r3, [pc, #220]	@ (8000730 <MX_GPIO_Init+0x100>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <MX_GPIO_Init+0x100>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <MX_GPIO_Init+0x100>)
 8000664:	2102      	movs	r1, #2
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <MX_GPIO_Init+0x100>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2202      	movs	r2, #2
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_I2C_RES_Pin|PWR_SW_Pin|RST_SW_Pin, GPIO_PIN_SET);
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2201      	movs	r2, #1
 800067c:	2131      	movs	r1, #49	@ 0x31
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fcdf 	bl	8001042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_FAN_TACH_Pin|MB_PWROK_Pin|MB_PWROKA6_Pin, GPIO_PIN_RESET);
 8000684:	23a0      	movs	r3, #160	@ 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2200      	movs	r2, #0
 800068a:	214a      	movs	r1, #74	@ 0x4a
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fcd8 	bl	8001042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_BITCH_GPIO_Port, MB_BITCH_Pin, GPIO_PIN_RESET);
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <MX_GPIO_Init+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	2108      	movs	r1, #8
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fcd2 	bl	8001042 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USB_I2C_RES_Pin MB_FAN_TACH_Pin MB_PWROK_Pin PWR_SW_Pin
                           RST_SW_Pin MB_PWROKA6_Pin */
  GPIO_InitStruct.Pin = USB_I2C_RES_Pin|MB_FAN_TACH_Pin|MB_PWROK_Pin|PWR_SW_Pin
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	227b      	movs	r2, #123	@ 0x7b
 80006a2:	601a      	str	r2, [r3, #0]
                          |RST_SW_Pin|MB_PWROKA6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	193a      	adds	r2, r7, r4
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fb3e 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PSON_Pin MCU_ATTACH_IN_Pin */
  GPIO_InitStruct.Pin = MB_PSON_Pin|MCU_ATTACH_IN_Pin;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2284      	movs	r2, #132	@ 0x84
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	193a      	adds	r2, r7, r4
 80006d8:	23a0      	movs	r3, #160	@ 0xa0
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fb2e 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_BITCH_Pin */
  GPIO_InitStruct.Pin = MB_BITCH_Pin;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2208      	movs	r2, #8
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MB_BITCH_GPIO_Port, &GPIO_InitStruct);
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <MX_GPIO_Init+0x104>)
 8000700:	0019      	movs	r1, r3
 8000702:	0010      	movs	r0, r2
 8000704:	f000 fb1c 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_STATUS_LED_Pin MCU_HOS_ON_Pin */
  GPIO_InitStruct.Pin = MB_STATUS_LED_Pin|MCU_HOS_ON_Pin;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2250      	movs	r2, #80	@ 0x50
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	187b      	adds	r3, r7, r1
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <MX_GPIO_Init+0x104>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f000 fb0c 	bl	8000d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b009      	add	sp, #36	@ 0x24
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	50000400 	.word	0x50000400

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <HAL_MspInit+0x4c>)
 800074c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <HAL_MspInit+0x4c>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	641a      	str	r2, [r3, #64]	@ 0x40
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <HAL_MspInit+0x4c>)
 8000764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_MspInit+0x4c>)
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0549      	lsls	r1, r1, #21
 800076c:	430a      	orrs	r2, r1
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <HAL_MspInit+0x4c>)
 8000772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	055b      	lsls	r3, r3, #21
 8000778:	4013      	ands	r3, r2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f9e8 	bl	8000b58 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b099      	sub	sp, #100	@ 0x64
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	234c      	movs	r3, #76	@ 0x4c
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	0018      	movs	r0, r3
 80007a2:	2314      	movs	r3, #20
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f002 fb54 	bl	8002e54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	2418      	movs	r4, #24
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2334      	movs	r3, #52	@ 0x34
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 fb4c 	bl	8002e54 <memset>
  if(hi2c->Instance==I2C1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a3e      	ldr	r2, [pc, #248]	@ (80008bc <HAL_I2C_MspInit+0x128>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d13f      	bne.n	8000846 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2220      	movs	r2, #32
 80007ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fa73 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007de:	f7ff ffab 	bl	8000738 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 80007e8:	2102      	movs	r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2202      	movs	r2, #2
 80007f4:	4013      	ands	r3, r2
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = FAN_I2C1_SDA_Pin|FAN_I2C1_SCL_Pin;
 80007fa:	214c      	movs	r1, #76	@ 0x4c
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	22c0      	movs	r2, #192	@ 0xc0
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2212      	movs	r2, #18
 8000808:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2206      	movs	r2, #6
 800081a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	187b      	adds	r3, r7, r1
 800081e:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <HAL_I2C_MspInit+0x130>)
 8000820:	0019      	movs	r1, r3
 8000822:	0010      	movs	r0, r2
 8000824:	f000 fa8c 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 800082a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	0389      	lsls	r1, r1, #14
 8000832:	430a      	orrs	r2, r1
 8000834:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 8000838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	039b      	lsls	r3, r3, #14
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000844:	e036      	b.n	80008b4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <HAL_I2C_MspInit+0x134>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d131      	bne.n	80008b4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 8000852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 800085e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U3_FAN_I2C2_SCL_Pin|U3_FAN_I2C2_SDA_Pin;
 8000868:	214c      	movs	r1, #76	@ 0x4c
 800086a:	187b      	adds	r3, r7, r1
 800086c:	22c0      	movs	r2, #192	@ 0xc0
 800086e:	0152      	lsls	r2, r2, #5
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2212      	movs	r2, #18
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2206      	movs	r2, #6
 8000888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	187a      	adds	r2, r7, r1
 800088c:	23a0      	movs	r3, #160	@ 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fa54 	bl	8000d40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 800089a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	03c9      	lsls	r1, r1, #15
 80008a2:	430a      	orrs	r2, r1
 80008a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_I2C_MspInit+0x12c>)
 80008a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	03db      	lsls	r3, r3, #15
 80008ae:	4013      	ands	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b019      	add	sp, #100	@ 0x64
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40021000 	.word	0x40021000
 80008c4:	50000400 	.word	0x50000400
 80008c8:	40005800 	.word	0x40005800

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b097      	sub	sp, #92	@ 0x5c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2344      	movs	r3, #68	@ 0x44
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f002 fab8 	bl	8002e54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	2410      	movs	r4, #16
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2334      	movs	r3, #52	@ 0x34
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f002 fab0 	bl	8002e54 <memset>
  if(htim_base->Instance==TIM1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a27      	ldr	r2, [pc, #156]	@ (8000998 <HAL_TIM_Base_MspInit+0xcc>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d148      	bne.n	8000990 <HAL_TIM_Base_MspInit+0xc4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	0392      	lsls	r2, r2, #14
 8000904:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	193b      	adds	r3, r7, r4
 800090e:	0018      	movs	r0, r3
 8000910:	f001 f9d6 	bl	8001cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000918:	f7ff ff0e 	bl	8000738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 800091e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	0109      	lsls	r1, r1, #4
 8000926:	430a      	orrs	r2, r1
 8000928:	641a      	str	r2, [r3, #64]	@ 0x40
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 800092c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4013      	ands	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 800093a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_TIM_Base_MspInit+0xd0>)
 8000946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000948:	2201      	movs	r2, #1
 800094a:	4013      	ands	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000950:	2144      	movs	r1, #68	@ 0x44
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	187a      	adds	r2, r7, r1
 8000974:	23a0      	movs	r3, #160	@ 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f9e0 	bl	8000d40 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	200e      	movs	r0, #14
 8000986:	f000 f9a9 	bl	8000cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800098a:	200e      	movs	r0, #14
 800098c:	f000 f9bb 	bl	8000d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b017      	add	sp, #92	@ 0x5c
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40012c00 	.word	0x40012c00
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8aa 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <TIM1_CC_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fbe0 	bl	80021a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	200000d4 	.word	0x200000d4

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f7ff fff6 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a26:	f002 fa1d 	bl	8002e64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a2a:	f7ff fc27 	bl	800027c <main>

08000a2e <LoopForever>:

LoopForever:
  b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	08002f0c 	.word	0x08002f0c
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	20000128 	.word	0x20000128

08000a48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_COMP_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <HAL_Init+0x3c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Init+0x3c>)
 8000a5e:	2180      	movs	r1, #128	@ 0x80
 8000a60:	0049      	lsls	r1, r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	2003      	movs	r0, #3
 8000a68:	f000 f810 	bl	8000a8c <HAL_InitTick>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe64 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <HAL_InitTick+0x88>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02b      	beq.n	8000afc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <HAL_InitTick+0x8c>)
 8000aa6:	681c      	ldr	r4, [r3, #0]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_InitTick+0x88>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	0019      	movs	r1, r3
 8000aae:	23fa      	movs	r3, #250	@ 0xfa
 8000ab0:	0098      	lsls	r0, r3, #2
 8000ab2:	f7ff fb27 	bl	8000104 <__udivsi3>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0020      	movs	r0, r4
 8000abc:	f7ff fb22 	bl	8000104 <__udivsi3>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f92f 	bl	8000d26 <HAL_SYSTICK_Config>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d112      	bne.n	8000af2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80a      	bhi.n	8000ae8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f8fe 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_InitTick+0x90>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	e00d      	b.n	8000b04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e008      	b.n	8000b04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e003      	b.n	8000b04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b005      	add	sp, #20
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	18d2      	adds	r2, r2, r3
 8000b30:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	20000124 	.word	0x20000124

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	@ (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000124 	.word	0x20000124

08000b58 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a06      	ldr	r2, [pc, #24]	@ (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	0019      	movs	r1, r3
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	fffff9ff 	.word	0xfffff9ff

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b96:	d809      	bhi.n	8000bac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	231f      	movs	r3, #31
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_EnableIRQ+0x30>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	000a      	movs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bcc:	d828      	bhi.n	8000c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bce:	4a2f      	ldr	r2, [pc, #188]	@ (8000c8c <__NVIC_SetPriority+0xd4>)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	33c0      	adds	r3, #192	@ 0xc0
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	589b      	ldr	r3, [r3, r2]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	@ 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	@ 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <__NVIC_SetPriority+0xd4>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	33c0      	adds	r3, #192	@ 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1e:	e031      	b.n	8000c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3306      	adds	r3, #6
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	@ 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	@ 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001c      	movs	r4, r3
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	3b08      	subs	r3, #8
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	3306      	adds	r3, #6
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	18c3      	adds	r3, r0, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	045b      	lsls	r3, r3, #17
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d301      	bcc.n	8000cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e010      	b.n	8000cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff7c 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff33 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ffaf 	bl	8000c94 <SysTick_Config>
 8000d36:	0003      	movs	r3, r0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e147      	b.n	8000fe0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x28>
 8000d66:	e138      	b.n	8000fda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x40>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	58d3      	ldr	r3, [r2, r3]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2107      	movs	r1, #7
 8000e56:	400b      	ands	r3, r1
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	6939      	ldr	r1, [r7, #16]
 8000e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	401a      	ands	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x174>
 8000eb2:	e092      	b.n	8000fda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eb4:	4a50      	ldr	r2, [pc, #320]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3318      	adds	r3, #24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	589b      	ldr	r3, [r3, r2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	220f      	movs	r2, #15
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	23a0      	movs	r3, #160	@ 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1ca>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a45      	ldr	r2, [pc, #276]	@ (8000ffc <HAL_GPIO_Init+0x2bc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1c6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a44      	ldr	r2, [pc, #272]	@ (8001000 <HAL_GPIO_Init+0x2c0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1c2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a43      	ldr	r2, [pc, #268]	@ (8001004 <HAL_GPIO_Init+0x2c4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1be>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	2103      	movs	r1, #3
 8000f10:	400a      	ands	r2, r1
 8000f12:	00d2      	lsls	r2, r2, #3
 8000f14:	4093      	lsls	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f1c:	4936      	ldr	r1, [pc, #216]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3318      	adds	r3, #24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f80:	2384      	movs	r3, #132	@ 0x84
 8000f82:	58d3      	ldr	r3, [r2, r3]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4914      	ldr	r1, [pc, #80]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	2284      	movs	r2, #132	@ 0x84
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd2:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	40da      	lsrs	r2, r3
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	d000      	beq.n	8000fee <HAL_GPIO_Init+0x2ae>
 8000fec:	e6b0      	b.n	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021800 	.word	0x40021800
 8000ffc:	50000400 	.word	0x50000400
 8001000:	50000800 	.word	0x50000800
 8001004:	50000c00 	.word	0x50000c00

08001008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	000a      	movs	r2, r1
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	1cba      	adds	r2, r7, #2
 800101c:	8812      	ldrh	r2, [r2, #0]
 800101e:	4013      	ands	r3, r2
 8001020:	d004      	beq.n	800102c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e003      	b.n	8001034 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	0008      	movs	r0, r1
 800104c:	0011      	movs	r1, r2
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	1c02      	adds	r2, r0, #0
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	1c7b      	adds	r3, r7, #1
 8001056:	1c0a      	adds	r2, r1, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105a:	1c7b      	adds	r3, r7, #1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001062:	1cbb      	adds	r3, r7, #2
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800106a:	e003      	b.n	8001074 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106c:	1cbb      	adds	r3, r7, #2
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e08f      	b.n	80011ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2241      	movs	r2, #65	@ 0x41
 8001092:	5c9b      	ldrb	r3, [r3, r2]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d107      	bne.n	80010aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2240      	movs	r2, #64	@ 0x40
 800109e:	2100      	movs	r1, #0
 80010a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fb75 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2241      	movs	r2, #65	@ 0x41
 80010ae:	2124      	movs	r1, #36	@ 0x24
 80010b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	438a      	bics	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	493b      	ldr	r1, [pc, #236]	@ (80011b8 <HAL_I2C_Init+0x13c>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4938      	ldr	r1, [pc, #224]	@ (80011bc <HAL_I2C_Init+0x140>)
 80010dc:	400a      	ands	r2, r1
 80010de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d108      	bne.n	80010fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	0209      	lsls	r1, r1, #8
 80010f4:	430a      	orrs	r2, r1
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	e007      	b.n	800110a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2184      	movs	r1, #132	@ 0x84
 8001104:	0209      	lsls	r1, r1, #8
 8001106:	430a      	orrs	r2, r1
 8001108:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d109      	bne.n	8001126 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	0109      	lsls	r1, r1, #4
 8001120:	430a      	orrs	r2, r1
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	e007      	b.n	8001136 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4923      	ldr	r1, [pc, #140]	@ (80011c0 <HAL_I2C_Init+0x144>)
 8001132:	400a      	ands	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4920      	ldr	r1, [pc, #128]	@ (80011c4 <HAL_I2C_Init+0x148>)
 8001142:	430a      	orrs	r2, r1
 8001144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	491a      	ldr	r1, [pc, #104]	@ (80011bc <HAL_I2C_Init+0x140>)
 8001152:	400a      	ands	r2, r1
 8001154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	431a      	orrs	r2, r3
 8001160:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69d9      	ldr	r1, [r3, #28]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2241      	movs	r2, #65	@ 0x41
 800119a:	2120      	movs	r1, #32
 800119c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2242      	movs	r2, #66	@ 0x42
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	f0ffffff 	.word	0xf0ffffff
 80011bc:	ffff7fff 	.word	0xffff7fff
 80011c0:	fffff7ff 	.word	0xfffff7ff
 80011c4:	02008000 	.word	0x02008000

080011c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2241      	movs	r2, #65	@ 0x41
 80011d6:	5c9b      	ldrb	r3, [r3, r2]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b20      	cmp	r3, #32
 80011dc:	d138      	bne.n	8001250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2240      	movs	r2, #64	@ 0x40
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e032      	b.n	8001252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2240      	movs	r2, #64	@ 0x40
 80011f0:	2101      	movs	r1, #1
 80011f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2241      	movs	r2, #65	@ 0x41
 80011f8:	2124      	movs	r1, #36	@ 0x24
 80011fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2101      	movs	r1, #1
 8001208:	438a      	bics	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4911      	ldr	r1, [pc, #68]	@ (800125c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2241      	movs	r2, #65	@ 0x41
 8001240:	2120      	movs	r1, #32
 8001242:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2240      	movs	r2, #64	@ 0x40
 8001248:	2100      	movs	r1, #0
 800124a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	e000      	b.n	8001252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001250:	2302      	movs	r3, #2
  }
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	ffffefff 	.word	0xffffefff

08001260 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2241      	movs	r2, #65	@ 0x41
 800126e:	5c9b      	ldrb	r3, [r3, r2]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b20      	cmp	r3, #32
 8001274:	d139      	bne.n	80012ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2240      	movs	r2, #64	@ 0x40
 800127a:	5c9b      	ldrb	r3, [r3, r2]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001280:	2302      	movs	r3, #2
 8001282:	e033      	b.n	80012ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2240      	movs	r2, #64	@ 0x40
 8001288:	2101      	movs	r1, #1
 800128a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2241      	movs	r2, #65	@ 0x41
 8001290:	2124      	movs	r1, #36	@ 0x24
 8001292:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2241      	movs	r2, #65	@ 0x41
 80012da:	2120      	movs	r1, #32
 80012dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2240      	movs	r2, #64	@ 0x40
 80012e2:	2100      	movs	r1, #0
 80012e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012ea:	2302      	movs	r3, #2
  }
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	fffff0ff 	.word	0xfffff0ff

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	@ (800136c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d11f      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	0013      	movs	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	189b      	adds	r3, r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4912      	ldr	r1, [pc, #72]	@ (8001374 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe feea 	bl	8000104 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001336:	e008      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e009      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	401a      	ands	r2, r3
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	429a      	cmp	r2, r3
 800135a:	d0ed      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40007000 	.word	0x40007000
 800136c:	fffff9ff 	.word	0xfffff9ff
 8001370:	20000004 	.word	0x20000004
 8001374:	000f4240 	.word	0x000f4240

08001378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e2fe      	b.n	8001988 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x1e>
 8001394:	e07c      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001396:	4bc3      	ldr	r3, [pc, #780]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2238      	movs	r2, #56	@ 0x38
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a0:	4bc0      	ldr	r3, [pc, #768]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3e>
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4bb9      	ldr	r3, [pc, #740]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d062      	beq.n	800148e <HAL_RCC_OscConfig+0x116>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15e      	bne.n	800148e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e2d9      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x78>
 80013e0:	4bb0      	ldr	r3, [pc, #704]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4baf      	ldr	r3, [pc, #700]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2180      	movs	r1, #128	@ 0x80
 80013e8:	0249      	lsls	r1, r1, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e020      	b.n	8001432 <HAL_RCC_OscConfig+0xba>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	23a0      	movs	r3, #160	@ 0xa0
 80013f6:	02db      	lsls	r3, r3, #11
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <HAL_RCC_OscConfig+0xa2>
 80013fc:	4ba9      	ldr	r3, [pc, #676]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4ba8      	ldr	r3, [pc, #672]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001402:	2180      	movs	r1, #128	@ 0x80
 8001404:	02c9      	lsls	r1, r1, #11
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4ba6      	ldr	r3, [pc, #664]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4ba5      	ldr	r3, [pc, #660]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	0249      	lsls	r1, r1, #9
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e00b      	b.n	8001432 <HAL_RCC_OscConfig+0xba>
 800141a:	4ba2      	ldr	r3, [pc, #648]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4ba1      	ldr	r3, [pc, #644]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001420:	49a1      	ldr	r1, [pc, #644]	@ (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001422:	400a      	ands	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	4b9f      	ldr	r3, [pc, #636]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b9e      	ldr	r3, [pc, #632]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	499f      	ldr	r1, [pc, #636]	@ (80016ac <HAL_RCC_OscConfig+0x334>)
 800142e:	400a      	ands	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d014      	beq.n	8001464 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fb83 	bl	8000b44 <HAL_GetTick>
 800143e:	0003      	movs	r3, r0
 8001440:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fb7e 	bl	8000b44 <HAL_GetTick>
 8001448:	0002      	movs	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e298      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001456:	4b93      	ldr	r3, [pc, #588]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xcc>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fb6e 	bl	8000b44 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146e:	f7ff fb69 	bl	8000b44 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	@ 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e283      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0xf6>
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x124>
 800149a:	e099      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2238      	movs	r2, #56	@ 0x38
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a6:	4b7f      	ldr	r3, [pc, #508]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2203      	movs	r2, #3
 80014ac:	4013      	ands	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_OscConfig+0x144>
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d002      	beq.n	80014c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d135      	bne.n	800152e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c2:	4b78      	ldr	r3, [pc, #480]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x162>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e256      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b72      	ldr	r3, [pc, #456]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a74      	ldr	r2, [pc, #464]	@ (80016b0 <HAL_RCC_OscConfig+0x338>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	4b6e      	ldr	r3, [pc, #440]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014f6:	4b6b      	ldr	r3, [pc, #428]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6e      	ldr	r2, [pc, #440]	@ (80016b4 <HAL_RCC_OscConfig+0x33c>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	4b67      	ldr	r3, [pc, #412]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800150a:	4b66      	ldr	r3, [pc, #408]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0adb      	lsrs	r3, r3, #11
 8001510:	2207      	movs	r2, #7
 8001512:	4013      	ands	r3, r2
 8001514:	4a68      	ldr	r2, [pc, #416]	@ (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001516:	40da      	lsrs	r2, r3
 8001518:	4b68      	ldr	r3, [pc, #416]	@ (80016bc <HAL_RCC_OscConfig+0x344>)
 800151a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800151c:	4b68      	ldr	r3, [pc, #416]	@ (80016c0 <HAL_RCC_OscConfig+0x348>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fab3 	bl	8000a8c <HAL_InitTick>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d051      	beq.n	80015ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e22c      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d030      	beq.n	8001598 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001536:	4b5b      	ldr	r3, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x33c>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	4b57      	ldr	r3, [pc, #348]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	4b56      	ldr	r3, [pc, #344]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b55      	ldr	r3, [pc, #340]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff faf4 	bl	8000b44 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff faef 	bl	8000b44 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e209      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b48      	ldr	r3, [pc, #288]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	021a      	lsls	r2, r3, #8
 8001590:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	e01b      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001598:	4b42      	ldr	r3, [pc, #264]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800159e:	4949      	ldr	r1, [pc, #292]	@ (80016c4 <HAL_RCC_OscConfig+0x34c>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff face 	bl	8000b44 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fac9 	bl	8000b44 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1e3      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c0:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x236>
 80015cc:	e000      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4013      	ands	r3, r2
 80015d8:	d047      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	@ 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b18      	cmp	r3, #24
 80015e4:	d10a      	bne.n	80015fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d03c      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d138      	bne.n	800166a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e1c5      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d019      	beq.n	8001638 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001606:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa98 	bl	8000b44 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fa93 	bl	8000b44 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1ad      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800162e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d0f1      	beq.n	800161a <HAL_RCC_OscConfig+0x2a2>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fa7e 	bl	8000b44 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa79 	bl	8000b44 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e193      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d1f1      	bne.n	800164e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d100      	bne.n	8001676 <HAL_RCC_OscConfig+0x2fe>
 8001674:	e0c6      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2238      	movs	r2, #56	@ 0x38
 8001684:	4013      	ands	r3, r2
 8001686:	2b20      	cmp	r3, #32
 8001688:	d11e      	bne.n	80016c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x31e>
 8001694:	e0b6      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d000      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 800169e:	e0b1      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e171      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	fffbffff 	.word	0xfffbffff
 80016b0:	ffff80ff 	.word	0xffff80ff
 80016b4:	ffffc7ff 	.word	0xffffc7ff
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	20000004 	.word	0x20000004
 80016c0:	20000008 	.word	0x20000008
 80016c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80016ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x360>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x362>
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d011      	beq.n	8001702 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4bac      	ldr	r3, [pc, #688]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80016e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016e2:	4bab      	ldr	r3, [pc, #684]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	0549      	lsls	r1, r1, #21
 80016e8:	430a      	orrs	r2, r1
 80016ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016ec:	4ba8      	ldr	r3, [pc, #672]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80016ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	055b      	lsls	r3, r3, #21
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016fa:	231f      	movs	r3, #31
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4ba4      	ldr	r3, [pc, #656]	@ (8001994 <HAL_RCC_OscConfig+0x61c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d11a      	bne.n	8001744 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170e:	4ba1      	ldr	r3, [pc, #644]	@ (8001994 <HAL_RCC_OscConfig+0x61c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4ba0      	ldr	r3, [pc, #640]	@ (8001994 <HAL_RCC_OscConfig+0x61c>)
 8001714:	2180      	movs	r1, #128	@ 0x80
 8001716:	0049      	lsls	r1, r1, #1
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa12 	bl	8000b44 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fa0d 	bl	8000b44 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e127      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b96      	ldr	r3, [pc, #600]	@ (8001994 <HAL_RCC_OscConfig+0x61c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x3e2>
 800174c:	4b90      	ldr	r3, [pc, #576]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800174e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001750:	4b8f      	ldr	r3, [pc, #572]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x41c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x404>
 8001762:	4b8b      	ldr	r3, [pc, #556]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001766:	4b8a      	ldr	r3, [pc, #552]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001768:	2104      	movs	r1, #4
 800176a:	430a      	orrs	r2, r1
 800176c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800176e:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001772:	4b87      	ldr	r3, [pc, #540]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	65da      	str	r2, [r3, #92]	@ 0x5c
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x41c>
 800177c:	4b84      	ldr	r3, [pc, #528]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800177e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001780:	4b83      	ldr	r3, [pc, #524]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001782:	2101      	movs	r1, #1
 8001784:	438a      	bics	r2, r1
 8001786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001788:	4b81      	ldr	r3, [pc, #516]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800178a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800178c:	4b80      	ldr	r3, [pc, #512]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800178e:	2104      	movs	r1, #4
 8001790:	438a      	bics	r2, r1
 8001792:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d014      	beq.n	80017c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f9d2 	bl	8000b44 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f9cd 	bl	8000b44 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a79      	ldr	r2, [pc, #484]	@ (8001998 <HAL_RCC_OscConfig+0x620>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0e6      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	4b75      	ldr	r3, [pc, #468]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x42e>
 80017c4:	e013      	b.n	80017ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff f9bd 	bl	8000b44 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff f9b8 	bl	8000b44 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	4a6f      	ldr	r2, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x620>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0d1      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017ee:	231f      	movs	r3, #31
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80017fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80017fe:	4967      	ldr	r1, [pc, #412]	@ (800199c <HAL_RCC_OscConfig+0x624>)
 8001800:	400a      	ands	r2, r1
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x496>
 800180c:	e0bb      	b.n	8001986 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180e:	4b60      	ldr	r3, [pc, #384]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2238      	movs	r2, #56	@ 0x38
 8001814:	4013      	ands	r3, r2
 8001816:	2b10      	cmp	r3, #16
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x4a4>
 800181a:	e07b      	b.n	8001914 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d156      	bne.n	80018d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b5a      	ldr	r3, [pc, #360]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800182a:	495d      	ldr	r1, [pc, #372]	@ (80019a0 <HAL_RCC_OscConfig+0x628>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f988 	bl	8000b44 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff f983 	bl	8000b44 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e09d      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	@ 0x80
 8001852:	049b      	lsls	r3, r3, #18
 8001854:	4013      	ands	r3, r2
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a51      	ldr	r2, [pc, #324]	@ (80019a4 <HAL_RCC_OscConfig+0x62c>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001884:	431a      	orrs	r2, r3
 8001886:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188c:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0449      	lsls	r1, r1, #17
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f94c 	bl	8000b44 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff f947 	bl	8000b44 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e061      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	049b      	lsls	r3, r3, #18
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x53a>
 80018d0:	e059      	b.n	8001986 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80018d8:	4931      	ldr	r1, [pc, #196]	@ (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018da:	400a      	ands	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f931 	bl	8000b44 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f92c 	bl	8000b44 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e046      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	049b      	lsls	r3, r3, #18
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 800190c:	4926      	ldr	r1, [pc, #152]	@ (80019a8 <HAL_RCC_OscConfig+0x630>)
 800190e:	400a      	ands	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e038      	b.n	8001986 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e033      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x618>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2203      	movs	r2, #3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	429a      	cmp	r2, r3
 8001932:	d126      	bne.n	8001982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2270      	movs	r2, #112	@ 0x70
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d11f      	bne.n	8001982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	23fe      	movs	r3, #254	@ 0xfe
 8001946:	01db      	lsls	r3, r3, #7
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d116      	bne.n	8001982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	23f8      	movs	r3, #248	@ 0xf8
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	23e0      	movs	r3, #224	@ 0xe0
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	0f5b      	lsrs	r3, r3, #29
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b008      	add	sp, #32
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	00001388 	.word	0x00001388
 800199c:	efffffff 	.word	0xefffffff
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	11c1808c 	.word	0x11c1808c
 80019a8:	eefefffc 	.word	0xeefefffc

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0e9      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b76      	ldr	r3, [pc, #472]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d91e      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b73      	ldr	r3, [pc, #460]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2207      	movs	r2, #7
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b70      	ldr	r3, [pc, #448]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019e0:	f7ff f8b0 	bl	8000b44 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e8:	e009      	b.n	80019fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7ff f8ab 	bl	8000b44 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1f4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0ca      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019fe:	4b67      	ldr	r3, [pc, #412]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2207      	movs	r2, #7
 8001a04:	4013      	ands	r3, r2
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d006      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a20:	4b60      	ldr	r3, [pc, #384]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	21e0      	movs	r1, #224	@ 0xe0
 8001a28:	01c9      	lsls	r1, r1, #7
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d057      	beq.n	8001afc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a54:	4b53      	ldr	r3, [pc, #332]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d12b      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e097      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	049b      	lsls	r3, r3, #18
 8001a74:	4013      	ands	r3, r2
 8001a76:	d11f      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e08b      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a84:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d113      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e07f      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e074      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e06d      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2207      	movs	r2, #7
 8001abe:	4393      	bics	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001acc:	f7ff f83a 	bl	8000b44 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f7ff f835 	bl	8000b44 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e054      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2238      	movs	r2, #56	@ 0x38
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1ec      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2207      	movs	r2, #7
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d21e      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff f812 	bl	8000b44 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7ff f80d 	bl	8000b44 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e02c      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2207      	movs	r2, #7
 8001b40:	4013      	ands	r3, r2
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1ee      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4a15      	ldr	r2, [pc, #84]	@ (8001bac <HAL_RCC_ClockConfig+0x200>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b66:	f000 f829 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b6a:	0001      	movs	r1, r0
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	220f      	movs	r2, #15
 8001b74:	401a      	ands	r2, r3
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_RCC_ClockConfig+0x204>)
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	58d3      	ldr	r3, [r2, r3]
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	4013      	ands	r3, r2
 8001b80:	000a      	movs	r2, r1
 8001b82:	40da      	lsrs	r2, r3
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_ClockConfig+0x208>)
 8001b86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x20c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe ff7d 	bl	8000a8c <HAL_InitTick>
 8001b92:	0003      	movs	r3, r0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	00001388 	.word	0x00001388
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	fffff0ff 	.word	0xfffff0ff
 8001bac:	ffff8fff 	.word	0xffff8fff
 8001bb0:	08002ec4 	.word	0x08002ec4
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000008 	.word	0x20000008

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2238      	movs	r2, #56	@ 0x38
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d10f      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bcc:	4b39      	ldr	r3, [pc, #228]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0adb      	lsrs	r3, r3, #11
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	0013      	movs	r3, r2
 8001bdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	4835      	ldr	r0, [pc, #212]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001be2:	f7fe fa8f 	bl	8000104 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e05d      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2238      	movs	r2, #56	@ 0x38
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf8:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	e054      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2238      	movs	r2, #56	@ 0x38
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d138      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	4824      	ldr	r0, [pc, #144]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8001c2c:	f7fe fa6a 	bl	8000104 <__udivsi3>
 8001c30:	0003      	movs	r3, r0
 8001c32:	0019      	movs	r1, r3
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	227f      	movs	r2, #127	@ 0x7f
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	434b      	muls	r3, r1
 8001c40:	617b      	str	r3, [r7, #20]
        break;
 8001c42:	e00d      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	481c      	ldr	r0, [pc, #112]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c48:	f7fe fa5c 	bl	8000104 <__udivsi3>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	0019      	movs	r1, r3
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	227f      	movs	r2, #127	@ 0x7f
 8001c58:	4013      	ands	r3, r2
 8001c5a:	434b      	muls	r3, r1
 8001c5c:	617b      	str	r3, [r7, #20]
        break;
 8001c5e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0f5b      	lsrs	r3, r3, #29
 8001c66:	2207      	movs	r2, #7
 8001c68:	4013      	ands	r3, r2
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7fe fa47 	bl	8000104 <__udivsi3>
 8001c76:	0003      	movs	r3, r0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	e015      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2238      	movs	r2, #56	@ 0x38
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d103      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2238      	movs	r2, #56	@ 0x38
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b18      	cmp	r3, #24
 8001c9a:	d103      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c9c:	23fa      	movs	r3, #250	@ 0xfa
 8001c9e:	01db      	lsls	r3, r3, #7
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e001      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca8:	693b      	ldr	r3, [r7, #16]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cc8:	2313      	movs	r3, #19
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	029b      	lsls	r3, r3, #10
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ce4:	e0a3      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2011      	movs	r0, #17
 8001ce8:	183b      	adds	r3, r7, r0
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4bc3      	ldr	r3, [pc, #780]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	055b      	lsls	r3, r3, #21
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d110      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4bc0      	ldr	r3, [pc, #768]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cfe:	4bbf      	ldr	r3, [pc, #764]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0549      	lsls	r1, r1, #21
 8001d04:	430a      	orrs	r2, r1
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d08:	4bbc      	ldr	r3, [pc, #752]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d0c:	2380      	movs	r3, #128	@ 0x80
 8001d0e:	055b      	lsls	r3, r3, #21
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	183b      	adds	r3, r7, r0
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4bb7      	ldr	r3, [pc, #732]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	0049      	lsls	r1, r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d2a:	f7fe ff0b 	bl	8000b44 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d32:	e00b      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7fe ff06 	bl	8000b44 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d904      	bls.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d42:	2313      	movs	r3, #19
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	2203      	movs	r2, #3
 8001d48:	701a      	strb	r2, [r3, #0]
        break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4c:	4bac      	ldr	r3, [pc, #688]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d0ed      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d58:	2313      	movs	r3, #19
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d154      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d62:	4ba6      	ldr	r3, [pc, #664]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d66:	23c0      	movs	r3, #192	@ 0xc0
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d019      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d014      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d7e:	4b9f      	ldr	r3, [pc, #636]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	4aa0      	ldr	r2, [pc, #640]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d88:	4b9c      	ldr	r3, [pc, #624]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d8c:	4b9b      	ldr	r3, [pc, #620]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	0249      	lsls	r1, r1, #9
 8001d92:	430a      	orrs	r2, r1
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d96:	4b99      	ldr	r3, [pc, #612]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d9a:	4b98      	ldr	r3, [pc, #608]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	499a      	ldr	r1, [pc, #616]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001da2:	4b96      	ldr	r3, [pc, #600]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d016      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe fec8 	bl	8000b44 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7fe fec3 	bl	8000b44 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4a91      	ldr	r2, [pc, #580]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d904      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001dca:	2313      	movs	r3, #19
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2203      	movs	r2, #3
 8001dd0:	701a      	strb	r2, [r3, #0]
            break;
 8001dd2:	e004      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd4:	4b89      	ldr	r3, [pc, #548]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d0ed      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dde:	2313      	movs	r3, #19
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de8:	4b84      	ldr	r3, [pc, #528]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	4a85      	ldr	r2, [pc, #532]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001df6:	4b81      	ldr	r3, [pc, #516]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dfc:	e00c      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2213      	movs	r2, #19
 8001e04:	18ba      	adds	r2, r7, r2
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e0c:	2312      	movs	r3, #18
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2213      	movs	r2, #19
 8001e12:	18ba      	adds	r2, r7, r2
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e18:	2311      	movs	r3, #17
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d105      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	4b76      	ldr	r3, [pc, #472]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e26:	4b75      	ldr	r3, [pc, #468]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e28:	4979      	ldr	r1, [pc, #484]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e38:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4393      	bics	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e56:	4b69      	ldr	r3, [pc, #420]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b65      	ldr	r3, [pc, #404]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	4a66      	ldr	r2, [pc, #408]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b5e      	ldr	r3, [pc, #376]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e94:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e98:	4a5f      	ldr	r2, [pc, #380]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eb4:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb8:	4a58      	ldr	r2, [pc, #352]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed6:	4a52      	ldr	r2, [pc, #328]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	01db      	lsls	r3, r3, #7
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ef2:	4b42      	ldr	r3, [pc, #264]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	0899      	lsrs	r1, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	05db      	lsls	r3, r3, #23
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	0249      	lsls	r1, r1, #9
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f2a:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f38:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	039b      	lsls	r3, r3, #14
 8001f46:	4013      	ands	r3, r2
 8001f48:	d016      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	4a35      	ldr	r2, [pc, #212]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f58:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	03db      	lsls	r3, r3, #15
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d106      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	0449      	lsls	r1, r1, #17
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	03db      	lsls	r3, r3, #15
 8001f80:	4013      	ands	r3, r2
 8001f82:	d016      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f84:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	4a27      	ldr	r2, [pc, #156]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	045b      	lsls	r3, r3, #17
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	0449      	lsls	r1, r1, #17
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d016      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d106      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0249      	lsls	r1, r1, #9
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001fec:	2312      	movs	r3, #18
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b006      	add	sp, #24
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	fffffcff 	.word	0xfffffcff
 8002008:	fffeffff 	.word	0xfffeffff
 800200c:	00001388 	.word	0x00001388
 8002010:	efffffff 	.word	0xefffffff
 8002014:	fffff3ff 	.word	0xfffff3ff
 8002018:	fff3ffff 	.word	0xfff3ffff
 800201c:	ffcfffff 	.word	0xffcfffff
 8002020:	ffffcfff 	.word	0xffffcfff
 8002024:	ffbfffff 	.word	0xffbfffff
 8002028:	feffffff 	.word	0xfeffffff
 800202c:	ffff3fff 	.word	0xffff3fff

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e04a      	b.n	80020d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	223d      	movs	r2, #61	@ 0x3d
 8002046:	5c9b      	ldrb	r3, [r3, r2]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223c      	movs	r2, #60	@ 0x3c
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f7fe fc37 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	223d      	movs	r2, #61	@ 0x3d
 8002062:	2102      	movs	r1, #2
 8002064:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	0019      	movs	r1, r3
 8002070:	0010      	movs	r0, r2
 8002072:	f000 fb85 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2248      	movs	r2, #72	@ 0x48
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223e      	movs	r2, #62	@ 0x3e
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223f      	movs	r2, #63	@ 0x3f
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2240      	movs	r2, #64	@ 0x40
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2241      	movs	r2, #65	@ 0x41
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2242      	movs	r2, #66	@ 0x42
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2243      	movs	r2, #67	@ 0x43
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2244      	movs	r2, #68	@ 0x44
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2245      	movs	r2, #69	@ 0x45
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2246      	movs	r2, #70	@ 0x46
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2247      	movs	r2, #71	@ 0x47
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	223d      	movs	r2, #61	@ 0x3d
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e04a      	b.n	8002188 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223d      	movs	r2, #61	@ 0x3d
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223c      	movs	r2, #60	@ 0x3c
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 f841 	bl	8002190 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223d      	movs	r2, #61	@ 0x3d
 8002112:	2102      	movs	r1, #2
 8002114:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	0019      	movs	r1, r3
 8002120:	0010      	movs	r0, r2
 8002122:	f000 fb2d 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2248      	movs	r2, #72	@ 0x48
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	223e      	movs	r2, #62	@ 0x3e
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223f      	movs	r2, #63	@ 0x3f
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2240      	movs	r2, #64	@ 0x40
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2241      	movs	r2, #65	@ 0x41
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2242      	movs	r2, #66	@ 0x42
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2243      	movs	r2, #67	@ 0x43
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2244      	movs	r2, #68	@ 0x44
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2245      	movs	r2, #69	@ 0x45
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2246      	movs	r2, #70	@ 0x46
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2247      	movs	r2, #71	@ 0x47
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	223d      	movs	r2, #61	@ 0x3d
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d021      	beq.n	8002204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d01d      	beq.n	8002204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2203      	movs	r2, #3
 80021ce:	4252      	negs	r2, r2
 80021d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fab2 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e007      	b.n	80021fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 faa5 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 fab1 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2204      	movs	r2, #4
 8002208:	4013      	ands	r3, r2
 800220a:	d022      	beq.n	8002252 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	d01e      	beq.n	8002252 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2205      	movs	r2, #5
 800221a:	4252      	negs	r2, r2
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	23c0      	movs	r3, #192	@ 0xc0
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fa8b 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 800223a:	e007      	b.n	800224c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fa7e 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fa8a 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2208      	movs	r2, #8
 8002256:	4013      	ands	r3, r2
 8002258:	d021      	beq.n	800229e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2208      	movs	r2, #8
 800225e:	4013      	ands	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2209      	movs	r2, #9
 8002268:	4252      	negs	r2, r2
 800226a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2204      	movs	r2, #4
 8002270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2203      	movs	r2, #3
 800227a:	4013      	ands	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fa65 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002286:	e007      	b.n	8002298 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 fa58 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fa64 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d022      	beq.n	80022ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d01e      	beq.n	80022ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2211      	movs	r2, #17
 80022b4:	4252      	negs	r2, r2
 80022b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2208      	movs	r2, #8
 80022bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	23c0      	movs	r3, #192	@ 0xc0
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fa3e 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80022d4:	e007      	b.n	80022e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 fa31 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fa3d 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d00c      	beq.n	800230e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d008      	beq.n	800230e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2202      	movs	r2, #2
 8002302:	4252      	negs	r2, r2
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fa11 	bl	8002730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	4013      	ands	r3, r2
 8002314:	d104      	bne.n	8002320 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	019b      	lsls	r3, r3, #6
 800231c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800231e:	d00b      	beq.n	8002338 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2280      	movs	r2, #128	@ 0x80
 8002324:	4013      	ands	r3, r2
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_TIM_IRQHandler+0x208>)
 800232e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fd7e 	bl	8002e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4013      	ands	r3, r2
 8002340:	d00b      	beq.n	800235a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	4013      	ands	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_TIM_IRQHandler+0x20c>)
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f000 fd75 	bl	8002e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	4013      	ands	r3, r2
 8002360:	d00c      	beq.n	800237c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	4013      	ands	r3, r2
 8002368:	d008      	beq.n	800237c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2241      	movs	r2, #65	@ 0x41
 8002370:	4252      	negs	r2, r2
 8002372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f9fa 	bl	8002770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2220      	movs	r2, #32
 8002380:	4013      	ands	r3, r2
 8002382:	d00c      	beq.n	800239e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	4013      	ands	r3, r2
 800238a:	d008      	beq.n	800239e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2221      	movs	r2, #33	@ 0x21
 8002392:	4252      	negs	r2, r2
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fd43 	bl	8002e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	ffffdf7f 	.word	0xffffdf7f
 80023ac:	fffffeff 	.word	0xfffffeff

080023b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2317      	movs	r3, #23
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	223c      	movs	r2, #60	@ 0x3c
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_IC_ConfigChannel+0x22>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e08c      	b.n	80024ec <HAL_TIM_IC_ConfigChannel+0x13c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	223c      	movs	r2, #60	@ 0x3c
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80023f0:	f000 faea 	bl	80029c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	210c      	movs	r1, #12
 8002400:	438a      	bics	r2, r1
 8002402:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6999      	ldr	r1, [r3, #24]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	e062      	b.n	80024de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d11c      	bne.n	8002458 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800242e:	f000 fb55 	bl	8002adc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	492d      	ldr	r1, [pc, #180]	@ (80024f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800243e:	400a      	ands	r2, r1
 8002440:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6999      	ldr	r1, [r3, #24]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	e042      	b.n	80024de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11b      	bne.n	8002496 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800246e:	f000 fba9 	bl	8002bc4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	210c      	movs	r1, #12
 800247e:	438a      	bics	r2, r1
 8002480:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	61da      	str	r2, [r3, #28]
 8002494:	e023      	b.n	80024de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d11c      	bne.n	80024d6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80024ac:	f000 fbca 	bl	8002c44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	490e      	ldr	r1, [pc, #56]	@ (80024f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80024bc:	400a      	ands	r2, r1
 80024be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69d9      	ldr	r1, [r3, #28]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	021a      	lsls	r2, r3, #8
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
 80024d4:	e003      	b.n	80024de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80024d6:	2317      	movs	r3, #23
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	223c      	movs	r2, #60	@ 0x3c
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

  return status;
 80024e6:	2317      	movs	r3, #23
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b006      	add	sp, #24
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	fffff3ff 	.word	0xfffff3ff

080024f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	230f      	movs	r3, #15
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	223c      	movs	r2, #60	@ 0x3c
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_TIM_ConfigClockSource+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e0bc      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x19a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	223c      	movs	r2, #60	@ 0x3c
 800251c:	2101      	movs	r1, #1
 800251e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	223d      	movs	r2, #61	@ 0x3d
 8002524:	2102      	movs	r1, #2
 8002526:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4a5a      	ldr	r2, [pc, #360]	@ (800269c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4a59      	ldr	r2, [pc, #356]	@ (80026a0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	0192      	lsls	r2, r2, #6
 8002550:	4293      	cmp	r3, r2
 8002552:	d040      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xde>
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	0192      	lsls	r2, r2, #6
 8002558:	4293      	cmp	r3, r2
 800255a:	d900      	bls.n	800255e <HAL_TIM_ConfigClockSource+0x66>
 800255c:	e088      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	0152      	lsls	r2, r2, #5
 8002562:	4293      	cmp	r3, r2
 8002564:	d100      	bne.n	8002568 <HAL_TIM_ConfigClockSource+0x70>
 8002566:	e088      	b.n	800267a <HAL_TIM_ConfigClockSource+0x182>
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	0152      	lsls	r2, r2, #5
 800256c:	4293      	cmp	r3, r2
 800256e:	d900      	bls.n	8002572 <HAL_TIM_ConfigClockSource+0x7a>
 8002570:	e07e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 8002572:	2b70      	cmp	r3, #112	@ 0x70
 8002574:	d018      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0xb0>
 8002576:	d900      	bls.n	800257a <HAL_TIM_ConfigClockSource+0x82>
 8002578:	e07a      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 800257a:	2b60      	cmp	r3, #96	@ 0x60
 800257c:	d04f      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x126>
 800257e:	d900      	bls.n	8002582 <HAL_TIM_ConfigClockSource+0x8a>
 8002580:	e076      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 8002582:	2b50      	cmp	r3, #80	@ 0x50
 8002584:	d03b      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x106>
 8002586:	d900      	bls.n	800258a <HAL_TIM_ConfigClockSource+0x92>
 8002588:	e072      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 800258a:	2b40      	cmp	r3, #64	@ 0x40
 800258c:	d057      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x146>
 800258e:	d900      	bls.n	8002592 <HAL_TIM_ConfigClockSource+0x9a>
 8002590:	e06e      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 8002592:	2b30      	cmp	r3, #48	@ 0x30
 8002594:	d063      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x166>
 8002596:	d86b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d060      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x166>
 800259c:	d868      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d05d      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x166>
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d05b      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x166>
 80025a6:	e063      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025b8:	f000 fba6 	bl	8002d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2277      	movs	r2, #119	@ 0x77
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]
      break;
 80025d4:	e052      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025e6:	f000 fb8f 	bl	8002d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	01c9      	lsls	r1, r1, #7
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
      break;
 80025fc:	e03e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	001a      	movs	r2, r3
 800260c:	f000 fa38 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2150      	movs	r1, #80	@ 0x50
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fb5a 	bl	8002cd0 <TIM_ITRx_SetConfig>
      break;
 800261c:	e02e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	001a      	movs	r2, r3
 800262c:	f000 fa98 	bl	8002b60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2160      	movs	r1, #96	@ 0x60
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fb4a 	bl	8002cd0 <TIM_ITRx_SetConfig>
      break;
 800263c:	e01e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	001a      	movs	r2, r3
 800264c:	f000 fa18 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2140      	movs	r1, #64	@ 0x40
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fb3a 	bl	8002cd0 <TIM_ITRx_SetConfig>
      break;
 800265c:	e00e      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f000 fb31 	bl	8002cd0 <TIM_ITRx_SetConfig>
      break;
 800266e:	e005      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002670:	230f      	movs	r3, #15
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
      break;
 8002678:	e000      	b.n	800267c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800267a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	223d      	movs	r2, #61	@ 0x3d
 8002680:	2101      	movs	r1, #1
 8002682:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	223c      	movs	r2, #60	@ 0x3c
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

  return status;
 800268c:	230f      	movs	r3, #15
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	ffceff88 	.word	0xffceff88
 80026a0:	ffff00ff 	.word	0xffff00ff

080026a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223c      	movs	r2, #60	@ 0x3c
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e032      	b.n	8002722 <HAL_TIM_SlaveConfigSynchro+0x7e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223c      	movs	r2, #60	@ 0x3c
 80026c0:	2101      	movs	r1, #1
 80026c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223d      	movs	r2, #61	@ 0x3d
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f8e2 	bl	800289c <TIM_SlaveTimer_SetConfig>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d009      	beq.n	80026f0 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	223d      	movs	r2, #61	@ 0x3d
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	223c      	movs	r2, #60	@ 0x3c
 80026e8:	2100      	movs	r1, #0
 80026ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e018      	b.n	8002722 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2140      	movs	r1, #64	@ 0x40
 80026fc:	438a      	bics	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800270c:	400a      	ands	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	@ 0x3d
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	223c      	movs	r2, #60	@ 0x3c
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	ffffbfff 	.word	0xffffbfff

08002730 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002738:	46c0      	nop			@ (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3b      	ldr	r2, [pc, #236]	@ (8002880 <TIM_Base_SetConfig+0x100>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d008      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	429a      	cmp	r2, r3
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a37      	ldr	r2, [pc, #220]	@ (8002884 <TIM_Base_SetConfig+0x104>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2270      	movs	r2, #112	@ 0x70
 80027ae:	4393      	bics	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <TIM_Base_SetConfig+0x100>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d013      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002884 <TIM_Base_SetConfig+0x104>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00f      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002888 <TIM_Base_SetConfig+0x108>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2a      	ldr	r2, [pc, #168]	@ (800288c <TIM_Base_SetConfig+0x10c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <TIM_Base_SetConfig+0x110>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <TIM_Base_SetConfig+0x114>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d108      	bne.n	8002808 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <TIM_Base_SetConfig+0x118>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	4393      	bics	r3, r2
 800280e:	001a      	movs	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <TIM_Base_SetConfig+0x100>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <TIM_Base_SetConfig+0x10c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <TIM_Base_SetConfig+0x110>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <TIM_Base_SetConfig+0x114>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d103      	bne.n	8002856 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2201      	movs	r2, #1
 8002862:	4013      	ands	r3, r2
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2201      	movs	r2, #1
 800286e:	4393      	bics	r3, r2
 8002870:	001a      	movs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
  }
}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40000400 	.word	0x40000400
 8002888:	40002000 	.word	0x40002000
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800
 8002898:	fffffcff 	.word	0xfffffcff

0800289c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2317      	movs	r3, #23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4a41      	ldr	r2, [pc, #260]	@ (80029c0 <TIM_SlaveTimer_SetConfig+0x124>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	@ (80029c4 <TIM_SlaveTimer_SetConfig+0x128>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b70      	cmp	r3, #112	@ 0x70
 80028e8:	d015      	beq.n	8002916 <TIM_SlaveTimer_SetConfig+0x7a>
 80028ea:	d900      	bls.n	80028ee <TIM_SlaveTimer_SetConfig+0x52>
 80028ec:	e05b      	b.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80028ee:	2b60      	cmp	r3, #96	@ 0x60
 80028f0:	d04f      	beq.n	8002992 <TIM_SlaveTimer_SetConfig+0xf6>
 80028f2:	d858      	bhi.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80028f4:	2b50      	cmp	r3, #80	@ 0x50
 80028f6:	d042      	beq.n	800297e <TIM_SlaveTimer_SetConfig+0xe2>
 80028f8:	d855      	bhi.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 80028fa:	2b40      	cmp	r3, #64	@ 0x40
 80028fc:	d016      	beq.n	800292c <TIM_SlaveTimer_SetConfig+0x90>
 80028fe:	d852      	bhi.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002900:	2b30      	cmp	r3, #48	@ 0x30
 8002902:	d055      	beq.n	80029b0 <TIM_SlaveTimer_SetConfig+0x114>
 8002904:	d84f      	bhi.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002906:	2b20      	cmp	r3, #32
 8002908:	d052      	beq.n	80029b0 <TIM_SlaveTimer_SetConfig+0x114>
 800290a:	d84c      	bhi.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d04f      	beq.n	80029b0 <TIM_SlaveTimer_SetConfig+0x114>
 8002910:	2b10      	cmp	r3, #16
 8002912:	d04d      	beq.n	80029b0 <TIM_SlaveTimer_SetConfig+0x114>
 8002914:	e047      	b.n	80029a6 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002926:	f000 f9ef 	bl	8002d08 <TIM_ETR_SetConfig>
      break;
 800292a:	e042      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d101      	bne.n	8002938 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e03f      	b.n	80029b8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6a1a      	ldr	r2, [r3, #32]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	438a      	bics	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	22f0      	movs	r2, #240	@ 0xf0
 800295c:	4393      	bics	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	621a      	str	r2, [r3, #32]
      break;
 800297c:	e019      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298a:	001a      	movs	r2, r3
 800298c:	f000 f878 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      break;
 8002990:	e00f      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800299e:	001a      	movs	r2, r3
 80029a0:	f000 f8de 	bl	8002b60 <TIM_TI2_ConfigInputStage>
      break;
 80029a4:	e005      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80029a6:	2317      	movs	r3, #23
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
      break;
 80029ae:	e000      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80029b0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80029b2:	2317      	movs	r3, #23
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b006      	add	sp, #24
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffcfff8f 	.word	0xffcfff8f
 80029c4:	fffefff8 	.word	0xfffefff8

080029c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4393      	bics	r3, r2
 80029e4:	001a      	movs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a20      	ldr	r2, [pc, #128]	@ (8002a74 <TIM_TI1_SetConfig+0xac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00c      	beq.n	8002a12 <TIM_TI1_SetConfig+0x4a>
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d007      	beq.n	8002a12 <TIM_TI1_SetConfig+0x4a>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	@ (8002a78 <TIM_TI1_SetConfig+0xb0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_TI1_SetConfig+0x4a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <TIM_TI1_SetConfig+0xb4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <TIM_TI1_SetConfig+0x4e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <TIM_TI1_SetConfig+0x50>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	4393      	bics	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e003      	b.n	8002a36 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	22f0      	movs	r2, #240	@ 0xf0
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	22ff      	movs	r2, #255	@ 0xff
 8002a44:	4013      	ands	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	220a      	movs	r2, #10
 8002a50:	4393      	bics	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	220a      	movs	r2, #10
 8002a58:	4013      	ands	r3, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	621a      	str	r2, [r3, #32]
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40014000 	.word	0x40014000

08002a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4393      	bics	r3, r2
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	22f0      	movs	r2, #240	@ 0xf0
 8002aaa:	4393      	bics	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	220a      	movs	r2, #10
 8002abc:	4393      	bics	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	621a      	str	r2, [r3, #32]
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	2210      	movs	r2, #16
 8002af6:	4393      	bics	r3, r2
 8002af8:	001a      	movs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <TIM_TI2_SetConfig+0x7c>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <TIM_TI2_SetConfig+0x80>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	22a0      	movs	r2, #160	@ 0xa0
 8002b30:	4393      	bics	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	22a0      	movs	r2, #160	@ 0xa0
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b006      	add	sp, #24
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	fffffcff 	.word	0xfffffcff
 8002b5c:	ffff0fff 	.word	0xffff0fff

08002b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	2210      	movs	r2, #16
 8002b78:	4393      	bics	r3, r2
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc0 <TIM_TI2_ConfigInputStage+0x60>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	031b      	lsls	r3, r3, #12
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	22a0      	movs	r2, #160	@ 0xa0
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	ffff0fff 	.word	0xffff0fff

08002bc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <TIM_TI3_SetConfig+0x78>)
 8002bde:	401a      	ands	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4393      	bics	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	22f0      	movs	r2, #240	@ 0xf0
 8002bfe:	4393      	bics	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	4a0b      	ldr	r2, [pc, #44]	@ (8002c40 <TIM_TI3_SetConfig+0x7c>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	021a      	lsls	r2, r3, #8
 8002c1c:	23a0      	movs	r3, #160	@ 0xa0
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffffeff 	.word	0xfffffeff
 8002c40:	fffff5ff 	.word	0xfffff5ff

08002c44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a18      	ldr	r2, [pc, #96]	@ (8002cc0 <TIM_TI4_SetConfig+0x7c>)
 8002c5e:	401a      	ands	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <TIM_TI4_SetConfig+0x80>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <TIM_TI4_SetConfig+0x84>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	031b      	lsls	r3, r3, #12
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <TIM_TI4_SetConfig+0x88>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	031a      	lsls	r2, r3, #12
 8002c9e:	23a0      	movs	r3, #160	@ 0xa0
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b006      	add	sp, #24
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	ffffefff 	.word	0xffffefff
 8002cc4:	fffffcff 	.word	0xfffffcff
 8002cc8:	ffff0fff 	.word	0xffff0fff
 8002ccc:	ffff5fff 	.word	0xffff5fff

08002cd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	@ (8002d04 <TIM_ITRx_SetConfig+0x34>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	609a      	str	r2, [r3, #8]
}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	ffcfff8f 	.word	0xffcfff8f

08002d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4a09      	ldr	r2, [pc, #36]	@ (8002d44 <TIM_ETR_SetConfig+0x3c>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b006      	add	sp, #24
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	ffff00ff 	.word	0xffff00ff

08002d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223c      	movs	r2, #60	@ 0x3c
 8002d56:	5c9b      	ldrb	r3, [r3, r2]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e055      	b.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	223c      	movs	r2, #60	@ 0x3c
 8002d64:	2101      	movs	r1, #1
 8002d66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	223d      	movs	r2, #61	@ 0x3d
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2270      	movs	r2, #112	@ 0x70
 8002da0:	4393      	bics	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00f      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	05db      	lsls	r3, r3, #23
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d009      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10c      	bne.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2280      	movs	r2, #128	@ 0x80
 8002de4:	4393      	bics	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223d      	movs	r2, #61	@ 0x3d
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223c      	movs	r2, #60	@ 0x3c
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b004      	add	sp, #16
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	ff0fffff 	.word	0xff0fffff
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40014000 	.word	0x40014000

08002e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <memset>:
 8002e54:	0003      	movs	r3, r0
 8002e56:	1882      	adds	r2, r0, r2
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <memset+0xa>
 8002e5c:	4770      	bx	lr
 8002e5e:	7019      	strb	r1, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e7f9      	b.n	8002e58 <memset+0x4>

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	2600      	movs	r6, #0
 8002e68:	4c0c      	ldr	r4, [pc, #48]	@ (8002e9c <__libc_init_array+0x38>)
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ea0 <__libc_init_array+0x3c>)
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	2600      	movs	r6, #0
 8002e76:	f000 f819 	bl	8002eac <_init>
 8002e7a:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea4 <__libc_init_array+0x40>)
 8002e7c:	4d0a      	ldr	r5, [pc, #40]	@ (8002ea8 <__libc_init_array+0x44>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	00b3      	lsls	r3, r6, #2
 8002e8a:	58eb      	ldr	r3, [r5, r3]
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	00b3      	lsls	r3, r6, #2
 8002e94:	58eb      	ldr	r3, [r5, r3]
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002f04 	.word	0x08002f04
 8002ea0:	08002f04 	.word	0x08002f04
 8002ea4:	08002f08 	.word	0x08002f08
 8002ea8:	08002f04 	.word	0x08002f04

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
